// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  }; 
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["liftM1"] = liftM1;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var SemigroupRecord = function (appendRecord) {
      this.appendRecord = appendRecord;
  };
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupRecordNil = new SemigroupRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return {};
          };
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function (dictRowToList) {
      return function (dictSemigroupRecord) {
          return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return new SemigroupRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var insert = Record_Unsafe.unsafeSet(key);
                              var get = Record_Unsafe.unsafeGet(key);
                              return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                          };
                      };
                  });
              };
          };
      };
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var MonoidRecord = function (SemigroupRecord0, memptyRecord) {
      this.SemigroupRecord0 = SemigroupRecord0;
      this.memptyRecord = memptyRecord;
  };
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidRecordNil = new MonoidRecord(function () {
      return Data_Semigroup.semigroupRecordNil;
  }, function (v) {
      return {};
  });                        
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function (dictRowToList) {
      return function (dictMonoidRecord) {
          return new Monoid(function () {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
          }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function (dictCons) {
              return function (dictMonoidRecord) {
                  return new MonoidRecord(function () {
                      return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                  }, function (v) {
                      var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(mempty(dictMonoid))(tail);
                  });
              };
          };
      };
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applicativeEither"] = applicativeEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var $$try = function (action) {
      return $foreign.catchException((function () {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function ($1) {
              return $0(Data_Either.Left.create($1));
          };
      })())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var monadThrowEffect = new MonadThrow(function () {
      return Effect.monadEffect;
  }, Effect_Exception.throwException);                    
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["monadThrowEffect"] = monadThrowEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];            
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($91) {
                      return $90(Data_Either.Left.create($91));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $92 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($93) {
              return ExceptT($92(Data_Either.Right.create($93)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $102 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($103) {
              return ExceptT($102(Data_Either.Left.create($103)));
          };
      })());
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                      if (rm instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                      };
                      if (rm instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                              if (rn instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                              };
                              if (rn instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [ rn.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [ rm.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  var $90 = wrap(dictNewtype1);
                  var $91 = unwrap(dictNewtype);
                  return function ($92) {
                      return $90(f($91($92)));
                  };
              };
          };
      };
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  var ala = function (dictFunctor) {
      return function (dictNewtype) {
          return function (dictNewtype1) {
              return function (v) {
                  return function (f) {
                      return Data_Functor.map(dictFunctor)(unwrap(dictNewtype))(f(wrap(dictNewtype1)));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["ala"] = ala;
  exports["alaF"] = alaF;
  exports["over"] = over;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 29, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["oneOf"] = oneOf;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThan"] = greaterThan;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord.Min"] = $PS["Data.Ord.Min"] || {};
  var exports = $PS["Data.Ord.Min"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Min = function (x) {
      return x;
  };
  var semigroupMin = function (dictOrd) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Ord.min(dictOrd)(v)(v1);
          };
      });
  };
  var newtypeMin = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Min);
  exports["Min"] = Min;
  exports["newtypeMin"] = newtypeMin;
  exports["semigroupMin"] = semigroupMin;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord_Min = $PS["Data.Ord.Min"];
  var Foldable1 = function (Foldable0, fold1, foldMap1) {
      this.Foldable0 = Foldable0;
      this.fold1 = fold1;
      this.foldMap1 = foldMap1;
  };
  var foldMap1 = function (dict) {
      return dict.foldMap1;
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable1) {
          return Data_Newtype.ala(Data_Functor.functorFn)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.newtypeMin)(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
      };
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1"] = foldMap1;
  exports["minimum"] = minimum;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var foldable1NonEmpty = function (dictFoldable) {
      return new Data_Semigroup_Foldable.Foldable1(function () {
          return foldableNonEmpty(dictFoldable);
      }, function (dictSemigroup) {
          return Data_Semigroup_Foldable.foldMap1(foldable1NonEmpty(dictFoldable))(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
      }, function (dictSemigroup) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(function (s) {
                      return function (a1) {
                          return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                      };
                  })(f(v.value0))(v.value1);
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
  exports["foldable1NonEmpty"] = foldable1NonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });           
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $233 = Data_NonEmpty.singleton(plusList);
      return function ($234) {
          return NonEmptyList($233($234));
      };
  })());
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.MonadZero"] = $PS["Control.MonadZero"] || {};
  var exports = $PS["Control.MonadZero"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  }; 
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe (line 174, column 1 - line 177, column 43): " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
              var v2 = span(v)(v1.value1);
              return {
                  init: new Data_List_Types.Cons(v1.value0, v2.init),
                  rest: v2.rest
              };
          };
          return {
              init: Data_List_Types.Nil.value,
              rest: v1
          };
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var unsnoc = function (lst) {
      var go = function ($copy_v) {
          return function ($copy_acc) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, acc) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return new Data_Maybe.Just({
                          revInit: acc,
                          last: v.value0
                      });
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): " + [ v.constructor.name, acc.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_acc);
              };
              return $tco_result;
          };
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (h) {
          return {
              init: reverse(h.revInit),
              last: h.last
          };
      })(go(lst)(Data_List_Types.Nil.value));
  };
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };    
  var last = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Cons) {
              $copy_v = v.value1;
              return;
          };
          $tco_done = true;
          return Data_Maybe.Nothing.value;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var init = function (lst) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.init;
      })(unsnoc(lst));
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
  exports["span"] = span;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["newtypeFirst"] = newtypeFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];              
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  }; 
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              var $312 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
              var $313 = Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                  var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                  if ($163) {
                      return new Data_Maybe.Just(v.value1);
                  };
                  return Data_Maybe.Nothing.value;
              });
              return function ($314) {
                  return $312($313($314));
              };
          };
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["lookup"] = lookup;
  exports["monoidTuple"] = monoidTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CatQueue"] = $PS["Data.CatQueue"] || {};
  var exports = $PS["Data.CatQueue"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue (line 83, column 1 - line 83, column 63): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CatList"] = $PS["Data.CatList"] || {};
  var exports = $PS["Data.CatList"];
  var Data_CatQueue = $PS["Data.CatQueue"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];                            
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (v1) {
          if (v instanceof CatNil) {
              return v1;
          };
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.CatList (line 109, column 1 - line 109, column 54): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList (line 125, column 3 - line 125, column 59): " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList (line 121, column 14 - line 123, column 67): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $44 = Data_CatQueue["null"](v.value1);
              if ($44) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList (line 100, column 1 - line 100, column 61): " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = link;
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["empty"] = empty;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Free"] = $PS["Control.Monad.Free"] || {};
  var exports = $PS["Control.Monad.Free"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_CatList = $PS["Data.CatList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)((function () {
              var $120 = Control_Applicative.pure(freeApplicative);
              return function ($121) {
                  return $120(k($121));
              };
          })())(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($122) {
      return fromView(Return.create($122));
  });
  var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
      return freeMonad;
  }, function (k) {
      return function (a) {
          return Control_Bind.bind(freeBind)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(freeApplicative)(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free (line 86, column 26 - line 88, column 21): " + [ v.constructor.name ]);
          });
      };
  });
  var liftF = function (f) {
      return fromView(new Bind(f, (function () {
          var $123 = Control_Applicative.pure(freeApplicative);
          return function ($124) {
              return $123($124);
          };
      })()));
  };
  exports["liftF"] = liftF;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeMonadRec"] = freeMonadRec;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader"] = $PS["Control.Monad.Reader"] || {};
  var exports = $PS["Control.Monad.Reader"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                 
  var runReader = function (v) {
      var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($3) {
          return $2(v($3));
      };
  };
  exports["runReader"] = runReader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];       
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };          
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $69 = Data_Functor.map(dictFunctor);
          return function ($70) {
              return mapReaderT($69($70));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $74 = Control_Applicative.pure(dictApplicative);
          return function ($75) {
              return ReaderT(Data_Function["const"]($74($75)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
              });
          };
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $112 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($113) {
                  return $112(f($113));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.MonadPlus"] = $PS["Control.MonadPlus"] || {};
  var exports = $PS["Control.MonadPlus"];                          
  var MonadPlus = function (MonadZero0) {
      this.MonadZero0 = MonadZero0;
  };
  exports["MonadPlus"] = MonadPlus;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parTraverse = function (dictParallel) {
      return function (dictTraversable) {
          return function (f) {
              var $22 = Control_Parallel_Class.sequential(dictParallel);
              var $23 = Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())((function () {
                  var $25 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($26) {
                      return $25(f($26));
                  };
              })());
              return function ($24) {
                  return $22($23($24));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parTraverse"] = parTraverse;
  exports["parSequence_"] = parSequence_;
})(PS);
(function(exports) {
  exports._exit = function(code) {
    return function() {
      process.exit(code);
    };
  };
})(PS["Core"] = PS["Core"] || {});
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var unsafeFreeze = (function () {
      var $8 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
      return function ($9) {
          return $8($9);
      };
  })();
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };                                                                                     
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));
      };
      throw new Error("Failed pattern match at Data.Array (line 323, column 1 - line 323, column 45): " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var unsnoc = function (xs) {
      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return function (v1) {
              return {
                  init: v,
                  last: v1
              };
          };
      })(init(xs)))(last(xs));
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST.empty();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST.empty();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $94 = Data_Maybe.maybe([  ])(singleton);
          return function ($95) {
              return $94(f($95));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["last"] = last;
  exports["uncons"] = uncons;
  exports["unsnoc"] = unsnoc;
  exports["index"] = index;
  exports["catMaybes"] = catMaybes;
  exports["mapWithIndex"] = mapWithIndex;
  exports["sort"] = sort;
  exports["groupBy"] = groupBy;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var Constructor = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Constructor"] = Constructor;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Generic.Rep.Show"] = $PS["Data.Generic.Rep.Show"] || {};
  var exports = $PS["Data.Generic.Rep.Show"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  }; 
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowArgsProduct = function (dictGenericShowArgs) {
      return function (dictGenericShowArgs1) {
          return new GenericShowArgs(function (v) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
          });
      };
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowArgsProduct"] = genericShowArgsProduct;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Variant.Internal"] = $PS["Data.Variant.Internal"] || {};
  var exports = $PS["Data.Variant.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];
  var VariantTags = function (variantTags) {
      this.variantTags = variantTags;
  };                          
  var Contractable = function (contractWith) {
      this.contractWith = contractWith;
  };
  var variantTagsNil = new VariantTags(function (v) {
      return Data_List_Types.Nil.value;
  });
  var variantTags = function (dict) {
      return dict.variantTags;
  };
  var variantTagsCons = function (dictVariantTags) {
      return function (dictIsSymbol) {
          return new VariantTags(function (v) {
              return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value), variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value));
          });
      };
  };   
  var lookupTag = function (tag) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons) {
                  if (v.value0 === tag) {
                      $tco_done = true;
                      return true;
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = v.value1;
                      return;
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return false;
              };
              throw new Error("Failed pattern match at Data.Variant.Internal (line 94, column 8 - line 98, column 18): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return go;
  };
  var contractWithInstance = function (dictRowToList) {
      return function (dictUnion) {
          return function (dictVariantTags) {
              return new Contractable(function (dictAlternative) {
                  return function (v) {
                      return function (v1) {
                          return function (tag) {
                              return function (a) {
                                  if (lookupTag(tag)(variantTags(dictVariantTags)(Type_Data_RowList.RLProxy.value))) {
                                      return Control_Applicative.pure(dictAlternative.Applicative0())(a);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      return Control_Plus.empty(dictAlternative.Plus1());
                                  };
                                  throw new Error("Failed pattern match at Data.Variant.Internal (line 254, column 1 - line 263, column 24): " + [ v.constructor.name, v1.constructor.name, tag.constructor.name, a.constructor.name ]);
                              };
                          };
                      };
                  };
              });
          };
      };
  };
  var contractWith = function (dict) {
      return dict.contractWith;
  };
  exports["contractWith"] = contractWith;
  exports["variantTagsNil"] = variantTagsNil;
  exports["variantTagsCons"] = variantTagsCons;
  exports["contractWithInstance"] = contractWithInstance;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };           
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $43 = Data_Functor["void"](Effect.functorEffect);
      return function ($44) {
          return $43(launchAff($44));
      };
  })();
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var effectCanceler = (function () {
      var $45 = Effect_Class.liftEffect(monadEffectAff);
      return function ($46) {
          return Canceler(Data_Function["const"]($45($46)));
      };
  })();
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, (function () {
      var $53 = Control_Parallel_Class.parallel(parallelAff);
      var $54 = Control_Applicative.pure(applicativeAff);
      return function ($55) {
          return $53($54($55));
      };
  })());
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);           
  var altAff = new Control_Alt.Alt(function () {
      return functorAff;
  }, function (a1) {
      return function (a2) {
          return Control_Monad_Error_Class.catchError(monadErrorAff)(a1)(Data_Function["const"](a2));
      };
  });
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["altAff"] = altAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["parallelAff"] = parallelAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $26 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($27) {
          return $26(Effect_Console.log($27));
      };
  };
  var error = function (dictMonadEffect) {
      var $36 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($37) {
          return $36(Effect_Console.error($37));
      };
  };
  exports["log"] = log;
  exports["error"] = error;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];                      
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["readString"] = readString;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Data.Row"] = $PS["Type.Data.Row"] || {};
  var exports = $PS["Type.Data.Row"];
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Function = $PS["Data.Function"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Type_Data_Row = $PS["Type.Data.Row"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var on = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (f) {
                  return function (g) {
                      return function (r) {
                          if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                              return f(r.value);
                          };
                          return g(r);
                      };
                  };
              };
          };
      };
  };
  var prj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (dictAlternative) {
              return function (p) {
                  return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
              };
          };
      };
  };
  var inj = function (dictCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  var expand = function (dictUnion) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var contract = function (dictAlternative) {
      return function (dictContractable) {
          return function (v) {
              return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Data_Row.RProxy.value)(Type_Data_Row.RProxy.value)(v.type)(v);
          };
      };
  };
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["on"] = on;
  exports["expand"] = expand;
  exports["contract"] = contract;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Kishimen"] = $PS["Kishimen"] || {};
  var exports = $PS["Kishimen"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Variant = $PS["Data.Variant"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var GenericSumToVariantArg = function (genericSumToVariantArgImpl, variantArgImplToGenericSumImpl) {
      this.genericSumToVariantArgImpl = genericSumToVariantArgImpl;
      this.variantArgImplToGenericSumImpl = variantArgImplToGenericSumImpl;
  };
  var GenericSumToVariant = function (genericSumToVariantImpl, variantImplToGenericSumImpl) {
      this.genericSumToVariantImpl = genericSumToVariantImpl;
      this.variantImplToGenericSumImpl = variantImplToGenericSumImpl;
  };
  var variantImplToGenericSumImpl = function (dict) {
      return dict.variantImplToGenericSumImpl;
  };
  var variantToGenericSum = function (dictGeneric) {
      return function (dictGenericSumToVariant) {
          return function (v) {
              var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(variantImplToGenericSumImpl(dictGenericSumToVariant)(v));
              if (v1 instanceof Data_Maybe.Just) {
                  return v1.value0;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Partial_Unsafe.unsafeCrashWith("the impossible occurred: the input Variant was not a valid representation of the generic sum.");
              };
              throw new Error("Failed pattern match at Kishimen (line 30, column 3 - line 33, column 102): " + [ v1.constructor.name ]);
          };
      };
  };
  var variantArgImplToGenericSumImpl = function (dict) {
      return dict.variantArgImplToGenericSumImpl;
  };
  var genericSumToVariantImpl = function (dict) {
      return dict.genericSumToVariantImpl;
  };
  var genericSumToVariantSum = function (dictGenericSumToVariant) {
      return function (dictGenericSumToVariant1) {
          return function (dictUnion) {
              return function (dictUnion1) {
                  return function (dictUnion2) {
                      return function (dictRowToList) {
                          return function (dictVariantTags) {
                              return function (dictRowToList1) {
                                  return function (dictVariantTags1) {
                                      return new GenericSumToVariant(function (v) {
                                          if (v instanceof Data_Generic_Rep.Inl) {
                                              return Data_Variant.expand()(genericSumToVariantImpl(dictGenericSumToVariant)(v.value0));
                                          };
                                          if (v instanceof Data_Generic_Rep.Inr) {
                                              return Data_Variant.expand()(genericSumToVariantImpl(dictGenericSumToVariant1)(v.value0));
                                          };
                                          throw new Error("Failed pattern match at Kishimen (line 56, column 1 - line 80, column 25): " + [ v.constructor.name ]);
                                      }, function (v) {
                                          var readRight = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Variant.contract(Data_Maybe.alternativeMaybe)(Data_Variant_Internal.contractWithInstance()()(dictVariantTags1))(v))(function (v1) {
                                              return Control_Bind.bind(Data_Maybe.bindMaybe)(variantImplToGenericSumImpl(dictGenericSumToVariant1)(v1))(function (v2) {
                                                  return new Data_Maybe.Just(new Data_Generic_Rep.Inr(v2));
                                              });
                                          });
                                          var readLeft = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Variant.contract(Data_Maybe.alternativeMaybe)(Data_Variant_Internal.contractWithInstance()()(dictVariantTags))(v))(function (v1) {
                                              return Control_Bind.bind(Data_Maybe.bindMaybe)(variantImplToGenericSumImpl(dictGenericSumToVariant)(v1))(function (v2) {
                                                  return new Data_Maybe.Just(new Data_Generic_Rep.Inl(v2));
                                              });
                                          });
                                          return Control_Alt.alt(Data_Maybe.altMaybe)(readLeft)(readRight);
                                      });
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  }; 
  var genericSumToVariantArgImpl = function (dict) {
      return dict.genericSumToVariantArgImpl;
  };
  var genericSumToVariantConstructor = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictGenericSumToVariantArg) {
              return new GenericSumToVariant(function (v) {
                  var value = genericSumToVariantArgImpl(dictGenericSumToVariantArg)(v);
                  return Data_Variant.inj()(dictIsSymbol)(Data_Symbol.SProxy.value)(value);
              }, function (v) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Variant.prj()(dictIsSymbol)(Data_Maybe.alternativeMaybe)(Data_Symbol.SProxy.value)(v))(function (v1) {
                      return Data_Maybe.Just.create(Data_Generic_Rep.Constructor(variantArgImplToGenericSumImpl(dictGenericSumToVariantArg)(v1)));
                  });
              });
          };
      };
  };
  var genericSumToVariantArgArguments = new GenericSumToVariantArg(function (v) {
      return v;
  }, function (x) {
      return x;
  });
  var genericSumToVariant = function (dictGeneric) {
      return function (dictGenericSumToVariant) {
          return function (a) {
              return genericSumToVariantImpl(dictGenericSumToVariant)(Data_Generic_Rep.from(dictGeneric)(a));
          };
      };
  };
  exports["genericSumToVariant"] = genericSumToVariant;
  exports["variantToGenericSum"] = variantToGenericSum;
  exports["genericSumToVariantConstructor"] = genericSumToVariantConstructor;
  exports["genericSumToVariantSum"] = genericSumToVariantSum;
  exports["genericSumToVariantArgArguments"] = genericSumToVariantArgArguments;
})(PS);
(function(exports) {
  'use strict';

  /* eslint-env node*/

  exports.unsafeFromNullable = function unsafeFromNullable (msg) {
      return function (x) {
          if (x === null) throw new Error(msg);
          return x;
      };
  };

  exports.spawnImpl = function spawnImpl (command) {
      return function (args) {
          return function (opts) {
              return function () {
                  return require('child_process').spawn(command, args, opts);
              };
          };
      };
  };

  exports.mkOnExit = function mkOnExit (mkChildExit) {
      return function onExit (cp) {
          return function (cb) {
              return function () {
                  cp.on('exit', function (code, signal) {
                      cb(mkChildExit(code)(signal))();
                  });
              };
          };
      };
  };

  exports.onError = function onError (cp) {
      return function (cb) {
          return function () {
              cp.on('error', function (err) {
                  cb(err)();
              });
          };
      };
  };

  exports.undefined = undefined;
  exports.process = process;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Posix.Signal"] = $PS["Data.Posix.Signal"] || {};
  var exports = $PS["Data.Posix.Signal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGBUS = (function () {
      function SIGBUS() {

      };
      SIGBUS.value = new SIGBUS();
      return SIGBUS;
  })();
  var SIGCHLD = (function () {
      function SIGCHLD() {

      };
      SIGCHLD.value = new SIGCHLD();
      return SIGCHLD;
  })();
  var SIGCLD = (function () {
      function SIGCLD() {

      };
      SIGCLD.value = new SIGCLD();
      return SIGCLD;
  })();
  var SIGCONT = (function () {
      function SIGCONT() {

      };
      SIGCONT.value = new SIGCONT();
      return SIGCONT;
  })();
  var SIGEMT = (function () {
      function SIGEMT() {

      };
      SIGEMT.value = new SIGEMT();
      return SIGEMT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGINFO = (function () {
      function SIGINFO() {

      };
      SIGINFO.value = new SIGINFO();
      return SIGINFO;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGIO = (function () {
      function SIGIO() {

      };
      SIGIO.value = new SIGIO();
      return SIGIO;
  })();
  var SIGIOT = (function () {
      function SIGIOT() {

      };
      SIGIOT.value = new SIGIOT();
      return SIGIOT;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGLOST = (function () {
      function SIGLOST() {

      };
      SIGLOST.value = new SIGLOST();
      return SIGLOST;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGPOLL = (function () {
      function SIGPOLL() {

      };
      SIGPOLL.value = new SIGPOLL();
      return SIGPOLL;
  })();
  var SIGPROF = (function () {
      function SIGPROF() {

      };
      SIGPROF.value = new SIGPROF();
      return SIGPROF;
  })();
  var SIGPWR = (function () {
      function SIGPWR() {

      };
      SIGPWR.value = new SIGPWR();
      return SIGPWR;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGSTKFLT = (function () {
      function SIGSTKFLT() {

      };
      SIGSTKFLT.value = new SIGSTKFLT();
      return SIGSTKFLT;
  })();
  var SIGSTOP = (function () {
      function SIGSTOP() {

      };
      SIGSTOP.value = new SIGSTOP();
      return SIGSTOP;
  })();
  var SIGSYS = (function () {
      function SIGSYS() {

      };
      SIGSYS.value = new SIGSYS();
      return SIGSYS;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var SIGTRAP = (function () {
      function SIGTRAP() {

      };
      SIGTRAP.value = new SIGTRAP();
      return SIGTRAP;
  })();
  var SIGTSTP = (function () {
      function SIGTSTP() {

      };
      SIGTSTP.value = new SIGTSTP();
      return SIGTSTP;
  })();
  var SIGTTIN = (function () {
      function SIGTTIN() {

      };
      SIGTTIN.value = new SIGTTIN();
      return SIGTTIN;
  })();
  var SIGTTOU = (function () {
      function SIGTTOU() {

      };
      SIGTTOU.value = new SIGTTOU();
      return SIGTTOU;
  })();
  var SIGUNUSED = (function () {
      function SIGUNUSED() {

      };
      SIGUNUSED.value = new SIGUNUSED();
      return SIGUNUSED;
  })();
  var SIGURG = (function () {
      function SIGURG() {

      };
      SIGURG.value = new SIGURG();
      return SIGURG;
  })();
  var SIGUSR1 = (function () {
      function SIGUSR1() {

      };
      SIGUSR1.value = new SIGUSR1();
      return SIGUSR1;
  })();
  var SIGUSR2 = (function () {
      function SIGUSR2() {

      };
      SIGUSR2.value = new SIGUSR2();
      return SIGUSR2;
  })();
  var SIGVTALRM = (function () {
      function SIGVTALRM() {

      };
      SIGVTALRM.value = new SIGVTALRM();
      return SIGVTALRM;
  })();
  var SIGWINCH = (function () {
      function SIGWINCH() {

      };
      SIGWINCH.value = new SIGWINCH();
      return SIGWINCH;
  })();
  var SIGXCPU = (function () {
      function SIGXCPU() {

      };
      SIGXCPU.value = new SIGXCPU();
      return SIGXCPU;
  })();
  var SIGXFSZ = (function () {
      function SIGXFSZ() {

      };
      SIGXFSZ.value = new SIGXFSZ();
      return SIGXFSZ;
  })();
  var toString = function (s) {
      if (s instanceof SIGABRT) {
          return "SIGABRT";
      };
      if (s instanceof SIGALRM) {
          return "SIGALRM";
      };
      if (s instanceof SIGBUS) {
          return "SIGBUS";
      };
      if (s instanceof SIGCHLD) {
          return "SIGCHLD";
      };
      if (s instanceof SIGCLD) {
          return "SIGCLD";
      };
      if (s instanceof SIGCONT) {
          return "SIGCONT";
      };
      if (s instanceof SIGEMT) {
          return "SIGEMT";
      };
      if (s instanceof SIGFPE) {
          return "SIGFPE";
      };
      if (s instanceof SIGHUP) {
          return "SIGHUP";
      };
      if (s instanceof SIGILL) {
          return "SIGILL";
      };
      if (s instanceof SIGINFO) {
          return "SIGINFO";
      };
      if (s instanceof SIGINT) {
          return "SIGINT";
      };
      if (s instanceof SIGIO) {
          return "SIGIO";
      };
      if (s instanceof SIGIOT) {
          return "SIGIOT";
      };
      if (s instanceof SIGKILL) {
          return "SIGKILL";
      };
      if (s instanceof SIGLOST) {
          return "SIGLOST";
      };
      if (s instanceof SIGPIPE) {
          return "SIGPIPE";
      };
      if (s instanceof SIGPOLL) {
          return "SIGPOLL";
      };
      if (s instanceof SIGPROF) {
          return "SIGPROF";
      };
      if (s instanceof SIGPWR) {
          return "SIGPWR";
      };
      if (s instanceof SIGQUIT) {
          return "SIGQUIT";
      };
      if (s instanceof SIGSEGV) {
          return "SIGSEGV";
      };
      if (s instanceof SIGSTKFLT) {
          return "SIGSTKFLT";
      };
      if (s instanceof SIGSTOP) {
          return "SIGSTOP";
      };
      if (s instanceof SIGSYS) {
          return "SIGSYS";
      };
      if (s instanceof SIGTERM) {
          return "SIGTERM";
      };
      if (s instanceof SIGTRAP) {
          return "SIGTRAP";
      };
      if (s instanceof SIGTSTP) {
          return "SIGTSTP";
      };
      if (s instanceof SIGTTIN) {
          return "SIGTTIN";
      };
      if (s instanceof SIGTTOU) {
          return "SIGTTOU";
      };
      if (s instanceof SIGUNUSED) {
          return "SIGUNUSED";
      };
      if (s instanceof SIGURG) {
          return "SIGURG";
      };
      if (s instanceof SIGUSR1) {
          return "SIGUSR1";
      };
      if (s instanceof SIGUSR2) {
          return "SIGUSR2";
      };
      if (s instanceof SIGVTALRM) {
          return "SIGVTALRM";
      };
      if (s instanceof SIGWINCH) {
          return "SIGWINCH";
      };
      if (s instanceof SIGXCPU) {
          return "SIGXCPU";
      };
      if (s instanceof SIGXFSZ) {
          return "SIGXFSZ";
      };
      throw new Error("Failed pattern match at Data.Posix.Signal (line 48, column 14 - line 86, column 24): " + [ s.constructor.name ]);
  };
  var showSignal = new Data_Show.Show(toString);
  var fromString = function (s) {
      if (s === "SIGABRT") {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (s === "SIGALRM") {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (s === "SIGBUS") {
          return new Data_Maybe.Just(SIGBUS.value);
      };
      if (s === "SIGCHLD") {
          return new Data_Maybe.Just(SIGCHLD.value);
      };
      if (s === "SIGCLD") {
          return new Data_Maybe.Just(SIGCLD.value);
      };
      if (s === "SIGCONT") {
          return new Data_Maybe.Just(SIGCONT.value);
      };
      if (s === "SIGEMT") {
          return new Data_Maybe.Just(SIGEMT.value);
      };
      if (s === "SIGFPE") {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (s === "SIGHUP") {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (s === "SIGILL") {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (s === "SIGINFO") {
          return new Data_Maybe.Just(SIGINFO.value);
      };
      if (s === "SIGINT") {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (s === "SIGIO") {
          return new Data_Maybe.Just(SIGIO.value);
      };
      if (s === "SIGIOT") {
          return new Data_Maybe.Just(SIGIOT.value);
      };
      if (s === "SIGKILL") {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (s === "SIGLOST") {
          return new Data_Maybe.Just(SIGLOST.value);
      };
      if (s === "SIGPIPE") {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (s === "SIGPOLL") {
          return new Data_Maybe.Just(SIGPOLL.value);
      };
      if (s === "SIGPROF") {
          return new Data_Maybe.Just(SIGPROF.value);
      };
      if (s === "SIGPWR") {
          return new Data_Maybe.Just(SIGPWR.value);
      };
      if (s === "SIGQUIT") {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (s === "SIGSEGV") {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (s === "SIGSTKFLT") {
          return new Data_Maybe.Just(SIGSTKFLT.value);
      };
      if (s === "SIGSTOP") {
          return new Data_Maybe.Just(SIGSTOP.value);
      };
      if (s === "SIGSYS") {
          return new Data_Maybe.Just(SIGSYS.value);
      };
      if (s === "SIGTERM") {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (s === "SIGTRAP") {
          return new Data_Maybe.Just(SIGTRAP.value);
      };
      if (s === "SIGTSTP") {
          return new Data_Maybe.Just(SIGTSTP.value);
      };
      if (s === "SIGTTIN") {
          return new Data_Maybe.Just(SIGTTIN.value);
      };
      if (s === "SIGTTOU") {
          return new Data_Maybe.Just(SIGTTOU.value);
      };
      if (s === "SIGUNUSED") {
          return new Data_Maybe.Just(SIGUNUSED.value);
      };
      if (s === "SIGURG") {
          return new Data_Maybe.Just(SIGURG.value);
      };
      if (s === "SIGUSR1") {
          return new Data_Maybe.Just(SIGUSR1.value);
      };
      if (s === "SIGUSR2") {
          return new Data_Maybe.Just(SIGUSR2.value);
      };
      if (s === "SIGVTALRM") {
          return new Data_Maybe.Just(SIGVTALRM.value);
      };
      if (s === "SIGWINCH") {
          return new Data_Maybe.Just(SIGWINCH.value);
      };
      if (s === "SIGXCPU") {
          return new Data_Maybe.Just(SIGXCPU.value);
      };
      if (s === "SIGXFSZ") {
          return new Data_Maybe.Just(SIGXFSZ.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["SIGTERM"] = SIGTERM;
  exports["toString"] = toString;
  exports["fromString"] = fromString;
  exports["showSignal"] = showSignal;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Exception.Unsafe"] = $PS["Effect.Exception.Unsafe"] || {};
  var exports = $PS["Effect.Exception.Unsafe"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];                
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.ChildProcess"] = $PS["Node.ChildProcess"] || {};
  var exports = $PS["Node.ChildProcess"];
  var $foreign = $PS["Node.ChildProcess"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Pipe = (function () {
      function Pipe() {

      };
      Pipe.value = new Pipe();
      return Pipe;
  })();
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();
  var ShareStream = (function () {
      function ShareStream(value0) {
          this.value0 = value0;
      };
      ShareStream.create = function (value0) {
          return new ShareStream(value0);
      };
      return ShareStream;
  })();
  var ShareFD = (function () {
      function ShareFD(value0) {
          this.value0 = value0;
      };
      ShareFD.create = function (value0) {
          return new ShareFD(value0);
      };
      return ShareFD;
  })();
  var Normally = (function () {
      function Normally(value0) {
          this.value0 = value0;
      };
      Normally.create = function (value0) {
          return new Normally(value0);
      };
      return Normally;
  })();
  var BySignal = (function () {
      function BySignal(value0) {
          this.value0 = value0;
      };
      BySignal.create = function (value0) {
          return new BySignal(value0);
      };
      return BySignal;
  })();
  var toStandardError = Unsafe_Coerce.unsafeCoerce;
  var toActualStdIOBehaviour = function (b) {
      if (b instanceof Pipe) {
          return "pipe";
      };
      if (b instanceof Ignore) {
          return "ignore";
      };
      if (b instanceof ShareFD) {
          return b.value0;
      };
      if (b instanceof ShareStream) {
          return b.value0;
      };
      throw new Error("Failed pattern match at Node.ChildProcess (line 510, column 28 - line 514, column 33): " + [ b.constructor.name ]);
  };
  var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)((function () {
      var $29 = Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour);
      return function ($30) {
          return Data_Nullable.toNullable($29($30));
      };
  })());
  var spawn = function (cmd) {
      return function (args) {
          var convertOpts = function (opts) {
              return {
                  cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                  stdio: toActualStdIOOptions(opts.stdio),
                  env: Data_Nullable.toNullable(opts.env),
                  detached: opts.detached,
                  uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                  gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
              };
          };
          var $31 = $foreign.spawnImpl(cmd)(args);
          return function ($32) {
              return $31(convertOpts($32));
          };
      };
  };
  var showExit = new Data_Show.Show(function (v) {
      if (v instanceof Normally) {
          return "Normally " + Data_Show.show(Data_Show.showInt)(v.value0);
      };
      if (v instanceof BySignal) {
          return "BySignal " + Data_Show.show(Data_Posix_Signal.showSignal)(v.value0);
      };
      throw new Error("Failed pattern match at Node.ChildProcess (line 163, column 1 - line 165, column 48): " + [ v.constructor.name ]);
  });
  var runChildProcess = function (v) {
      return v;
  };
  var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);
  var mkExit = function (code) {
      return function (signal) {
          var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)((function () {
              var $34 = Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create);
              return function ($35) {
                  return $34(Data_Posix_Signal.fromString($35));
              };
          })());
          var fromCode = (function () {
              var $36 = Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create);
              return function ($37) {
                  return $36(Data_Nullable.toMaybe($37));
              };
          })();
          var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
          };
          throw new Error("Failed pattern match at Node.ChildProcess (line 169, column 3 - line 171, column 73): " + [ v.constructor.name ]);
      };
  };                                       
  var onExit = $foreign.mkOnExit(mkExit);
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var missingStream = function (str) {
      return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
  };
  var stderr = (function () {
      var $38 = $foreign.unsafeFromNullable(missingStream("stderr"));
      return function ($39) {
          return $38((function (v) {
              return v.stderr;
          })(runChildProcess($39)));
      };
  })();
  var stdin = (function () {
      var $40 = $foreign.unsafeFromNullable(missingStream("stdin"));
      return function ($41) {
          return $40((function (v) {
              return v.stdin;
          })(runChildProcess($41)));
      };
  })();
  var stdout = (function () {
      var $42 = $foreign.unsafeFromNullable(missingStream("stdout"));
      return function ($43) {
          return $42((function (v) {
              return v.stdout;
          })(runChildProcess($43)));
      };
  })();
  var kill = function (sig) {
      return function (v) {
          return mkEffect(function (v1) {
              return v.kill(Data_Posix_Signal.toString(sig));
          });
      };
  };
  var inherit = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ new ShareStream($foreign.process.stdin), new ShareStream($foreign.process.stdout), new ShareStream($foreign.process.stderr) ]);
  var defaultSpawnOptions = {
      cwd: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      detached: false,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
  };
  exports["stdin"] = stdin;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["kill"] = kill;
  exports["toStandardError"] = toStandardError;
  exports["Normally"] = Normally;
  exports["BySignal"] = BySignal;
  exports["onExit"] = onExit;
  exports["spawn"] = spawn;
  exports["defaultSpawnOptions"] = defaultSpawnOptions;
  exports["inherit"] = inherit;
  exports["showExit"] = showExit;
  exports["onError"] = $foreign.onError;
})(PS);
(function(exports) {
  exports._parseJSON = JSON.parse;
})(PS["Simple.JSON"] = PS["Simple.JSON"] || {});
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($21) {
                  return $19($20($21));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  }; 
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  exports["readProp"] = readProp;
})(PS);
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global.Unsafe"] = $PS["Global.Unsafe"] || {};
  var exports = $PS["Global.Unsafe"];
  var $foreign = $PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Symbol = $PS["Data.Symbol"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Simple.JSON"] = $PS["Simple.JSON"] || {};
  var exports = $PS["Simple.JSON"];
  var $foreign = $PS["Simple.JSON"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Global_Unsafe = $PS["Global.Unsafe"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Record = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var WriteForeignVariant = function (writeVariantImpl) {
      this.writeVariantImpl = writeVariantImpl;
  };
  var WriteForeignFields = function (writeImplFields) {
      this.writeImplFields = writeImplFields;
  };
  var WriteForeign = function (writeImpl) {
      this.writeImpl = writeImpl;
  };
  var ReadForeignVariant = function (readVariantImpl) {
      this.readVariantImpl = readVariantImpl;
  };
  var ReadForeignFields = function (getFields) {
      this.getFields = getFields;
  };
  var ReadForeign = function (readImpl) {
      this.readImpl = readImpl;
  };
  var writeVariantImpl = function (dict) {
      return dict.writeVariantImpl;
  };
  var writeImplFields = function (dict) {
      return dict.writeImplFields;
  };
  var writeImpl = function (dict) {
      return dict.writeImpl;
  };
  var writeJSON = function (dictWriteForeign) {
      var $87 = writeImpl(dictWriteForeign);
      return function ($88) {
          return Global_Unsafe.unsafeStringify($87($88));
      };
  };
  var writeForeignVariant = function (dictRowToList) {
      return function (dictWriteForeignVariant) {
          return new WriteForeign(function (variant) {
              return writeVariantImpl(dictWriteForeignVariant)(Type_Data_RowList.RLProxy.value)(variant);
          });
      };
  };
  var writeForeignString = new WriteForeign(Foreign.unsafeToForeign);
  var writeForeignForeign = new WriteForeign(Control_Category.identity(Control_Category.categoryFn));
  var recordWriteForeign = function (dictRowToList) {
      return function (dictWriteForeignFields) {
          return new WriteForeign(function (rec) {
              var steps = writeImplFields(dictWriteForeignFields)(Type_Data_RowList.RLProxy.value)(rec);
              return Foreign.unsafeToForeign(Record_Builder.build(steps)({}));
          });
      };
  };
  var readVariantNil = new ReadForeignVariant(function (v) {
      return function (v1) {
          return Foreign.fail(new Foreign.ForeignError("Unable to match any variant member."));
      };
  });
  var readVariantImpl = function (dict) {
      return dict.readVariantImpl;
  };
  var readString = new ReadForeign(Foreign.readString);
  var readImpl = function (dict) {
      return dict.readImpl;
  };
  var readForeignVariant = function (dictRowToList) {
      return function (dictReadForeignVariant) {
          return new ReadForeign(function (o) {
              return readVariantImpl(dictReadForeignVariant)(Type_Data_RowList.RLProxy.value)(o);
          });
      };
  };
  var readForeign = new ReadForeign(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
  var readFieldsNil = new ReadForeignFields(function (v) {
      return function (v1) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.identity(Record_Builder.categoryBuilder));
      };
  });                                                    
  var readArray = function (dictReadForeign) {
      return new ReadForeign((function () {
          var readAtIdx = function (i) {
              return function (f) {
                  return Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(i)))(readImpl(dictReadForeign)(f));
              };
          };
          return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(readAtIdx))(Foreign.readArray);
      })());
  };
  var parseJSON = (function () {
      var $102 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)((function () {
          var $105 = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList);
          return function ($106) {
              return $105(Foreign.ForeignError.create(Effect_Exception.message($106)));
          };
      })());
      var $103 = Effect_Uncurried.runEffectFn1($foreign["_parseJSON"]);
      return function ($104) {
          return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($102(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"]($103($104))))));
      };
  })();
  var readJSON = function (dictReadForeign) {
      var $107 = Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(parseJSON);
      return function ($108) {
          return Control_Monad_Except.runExcept($107($108));
      };
  };
  var nilWriteForeignVariant = new WriteForeignVariant(function (v) {
      return function (v1) {
          return Partial_Unsafe.unsafeCrashWith("Variant was not able to be writen row WriteForeign.");
      };
  });
  var nilWriteForeignFields = new WriteForeignFields(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var getFields = function (dict) {
      return dict.getFields;
  };
  var readRecord = function (dictRowToList) {
      return function (dictReadForeignFields) {
          return new ReadForeign(function (o) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Function.flip(Record_Builder.build)({}))(getFields(dictReadForeignFields)(Type_Data_RowList.RLProxy.value)(o));
          });
      };
  };
  var consWriteForeignVariant = function (dictIsSymbol) {
      return function (dictWriteForeign) {
          return function (dictCons) {
              return function (dictWriteForeignVariant) {
                  return new WriteForeignVariant(function (v) {
                      return function (variant) {
                          var writeVariant = function (value) {
                              return Foreign.unsafeToForeign({
                                  type: Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value),
                                  value: writeImpl(dictWriteForeign)(value)
                              });
                          };
                          return Data_Variant.on()(dictIsSymbol)(Data_Symbol.SProxy.value)(writeVariant)(writeVariantImpl(dictWriteForeignVariant)(Type_Data_RowList.RLProxy.value))(variant);
                      };
                  });
              };
          };
      };
  };
  var consWriteForeignFields = function (dictIsSymbol) {
      return function (dictWriteForeign) {
          return function (dictWriteForeignFields) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return function (dictCons1) {
                          return new WriteForeignFields(function (v) {
                              return function (rec) {
                                  var rest = writeImplFields(dictWriteForeignFields)(Type_Data_RowList.RLProxy.value)(rec);
                                  var value = writeImpl(dictWriteForeign)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(rec));
                                  var result = Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(value))(rest);
                                  return result;
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var applyEither = function (dictSemigroup) {
      return function (v) {
          return function (v1) {
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Left(v.value0);
              };
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v1.value0);
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Simple.JSON (line 234, column 1 - line 234, column 90): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var exceptTApply = function (dictSemigroup) {
      return function (dictApplicative) {
          return function (fun) {
              return function (a) {
                  return Control_Monad_Except_Trans.ExceptT(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(applyEither(dictSemigroup))(Control_Monad_Except_Trans.runExceptT(fun)))(Control_Monad_Except_Trans.runExceptT(a)));
              };
          };
      };
  };
  var readFieldsCons = function (dictIsSymbol) {
      return function (dictReadForeign) {
          return function (dictReadForeignFields) {
              return function (dictLacks) {
                  return function (dictCons) {
                      return new ReadForeignFields(function (v) {
                          return function (obj) {
                              var rest = getFields(dictReadForeignFields)(Type_Data_RowList.RLProxy.value)(obj);
                              var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var withExcept$prime = Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(name)));
                              var first = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(withExcept$prime(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Foreign_Index.readProp(name)(obj))))(function (value) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(value));
                              });
                              return exceptTApply(Data_List_Types.semigroupNonEmptyList)(Data_Identity.applicativeIdentity)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder))(first))(rest);
                          };
                      });
                  };
              };
          };
      };
  };
  var readVariantCons = function (dictIsSymbol) {
      return function (dictReadForeign) {
          return function (dictCons) {
              return function (dictReadForeignVariant) {
                  return new ReadForeignVariant(function (v) {
                      return function (o) {
                          var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                          return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(readRecord()(readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "type";
                          }))(readString)(readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "value";
                          }))(readForeign)(readFieldsNil)()())()()))(o))(function (v1) {
                              var $85 = v1.type === name;
                              if ($85) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign)(v1.value))(function (v2) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Variant.inj()(dictIsSymbol)(Data_Symbol.SProxy.value)(v2));
                                  });
                              };
                              return Foreign.fail(Foreign.ForeignError.create("Did not match variant tag " + name));
                          }))(readVariantImpl(dictReadForeignVariant)(Type_Data_RowList.RLProxy.value)(o));
                      };
                  });
              };
          };
      };
  };
  exports["readJSON"] = readJSON;
  exports["writeJSON"] = writeJSON;
  exports["ReadForeign"] = ReadForeign;
  exports["readImpl"] = readImpl;
  exports["WriteForeign"] = WriteForeign;
  exports["writeImpl"] = writeImpl;
  exports["readString"] = readString;
  exports["readArray"] = readArray;
  exports["readRecord"] = readRecord;
  exports["readFieldsCons"] = readFieldsCons;
  exports["readFieldsNil"] = readFieldsNil;
  exports["readForeignVariant"] = readForeignVariant;
  exports["readVariantNil"] = readVariantNil;
  exports["readVariantCons"] = readVariantCons;
  exports["writeForeignForeign"] = writeForeignForeign;
  exports["writeForeignString"] = writeForeignString;
  exports["recordWriteForeign"] = recordWriteForeign;
  exports["consWriteForeignFields"] = consWriteForeignFields;
  exports["nilWriteForeignFields"] = nilWriteForeignFields;
  exports["writeForeignVariant"] = writeForeignVariant;
  exports["nilWriteForeignVariant"] = nilWriteForeignVariant;
  exports["consWriteForeignVariant"] = consWriteForeignVariant;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  exports["bindLazy"] = bindLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["BoundedEnum"] = BoundedEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  exports["Semiring"] = Semiring;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                         
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["length"] = length;
  exports["indexOf"] = indexOf;
})(PS);
(function(exports) {
  "use strict";

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["replaceAll"] = $foreign.replaceAll;
  exports["split"] = $foreign.split;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Motsunabe"] = $PS["Motsunabe"] || {};
  var exports = $PS["Motsunabe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var PNil = (function () {
      function PNil() {

      };
      PNil.value = new PNil();
      return PNil;
  })();
  var PText = (function () {
      function PText(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PText.create = function (value0) {
          return function (value1) {
              return new PText(value0, value1);
          };
      };
      return PText;
  })();
  var PLine = (function () {
      function PLine(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PLine.create = function (value0) {
          return function (value1) {
              return new PLine(value0, value1);
          };
      };
      return PLine;
  })();
  var DNil = (function () {
      function DNil() {

      };
      DNil.value = new DNil();
      return DNil;
  })();
  var DAppend = (function () {
      function DAppend(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DAppend.create = function (value0) {
          return function (value1) {
              return new DAppend(value0, value1);
          };
      };
      return DAppend;
  })();
  var DNest = (function () {
      function DNest(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DNest.create = function (value0) {
          return function (value1) {
              return new DNest(value0, value1);
          };
      };
      return DNest;
  })();
  var DText = (function () {
      function DText(value0) {
          this.value0 = value0;
      };
      DText.create = function (value0) {
          return new DText(value0);
      };
      return DText;
  })();
  var DLine = (function () {
      function DLine() {

      };
      DLine.value = new DLine();
      return DLine;
  })();
  var DAlt = (function () {
      function DAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DAlt.create = function (value0) {
          return function (value1) {
              return new DAlt(value0, value1);
          };
      };
      return DAlt;
  })();
  var trimRight = function (s) {
      return s.trimRight(Data_Unit.unit);
  };
  var sgDoc = new Data_Semigroup.Semigroup(DAppend.create);
  var postProcess = function (s) {
      return Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(trimRight)(Data_String_Common.split("\x0a")(s)));
  };
  var mDoc = new Data_Monoid.Monoid(function () {
      return sgDoc;
  }, DNil.value);
  var indent = function (v) {
      if (v === 0) {
          return "";
      };
      if (v === 1) {
          return "  ";
      };
      return "  " + indent(v - 1 | 0);
  };
  var layout = function (v) {
      if (v instanceof PNil) {
          return "";
      };
      if (v instanceof PText) {
          return v.value0 + layout(v.value1);
      };
      if (v instanceof PLine) {
          return "\x0a" + (indent(v.value0) + layout(v.value1));
      };
      throw new Error("Failed pattern match at Motsunabe (line 44, column 1 - line 44, column 26): " + [ v.constructor.name ]);
  };
  var fits = function ($copy_w) {
      return function ($copy_v) {
          var $tco_var_w = $copy_w;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(w, v) {
              if (w < 0) {
                  $tco_done = true;
                  return false;
              };
              if (v instanceof PNil) {
                  $tco_done = true;
                  return true;
              };
              if (v instanceof PText) {
                  $tco_var_w = w - Data_String_CodePoints.length(v.value0) | 0;
                  $copy_v = v.value1;
                  return;
              };
              if (v instanceof PLine) {
                  $tco_done = true;
                  return true;
              };
              throw new Error("Failed pattern match at Motsunabe (line 75, column 1 - line 75, column 32): " + [ w.constructor.name, v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_w, $copy_v);
          };
          return $tco_result;
      };
  };
  var better = function (w) {
      return function (k) {
          return function (x$prime) {
              return function (y$prime) {
                  var x = Data_Lazy.force(x$prime);
                  var $27 = fits(w - k | 0)(x);
                  if ($27) {
                      return x;
                  };
                  return Data_Lazy.force(y$prime);
              };
          };
      };
  };
  var be = function (w) {
      return function (k) {
          return function (v) {
              if (v instanceof Data_List_Types.Nil) {
                  return PNil.value;
              };
              if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof DNil) {
                  return be(w)(k)(v.value1);
              };
              if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof DAppend) {
                  return be(w)(k)(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1.value0), new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1.value1), v.value1)));
              };
              if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof DNest) {
                  return be(w)(k)(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0.value0 + v.value0.value1.value0 | 0, v.value0.value1.value1), v.value1));
              };
              if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof DText) {
                  return new PText(v.value0.value1.value0, be(w)(k + Data_String_CodePoints.length(v.value0.value1.value0) | 0)(v.value1));
              };
              if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof DLine) {
                  return new PLine(v.value0.value0, be(w)(v.value0.value0)(v.value1));
              };
              if (v instanceof Data_List_Types.Cons && v.value0.value1 instanceof DAlt) {
                  return better(w)(k)(Data_Lazy.defer(function (v1) {
                      return be(w)(k)(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1.value0), v.value1));
                  }))(Data_Lazy.defer(function (v1) {
                      return be(w)(k)(new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1.value1), v.value1));
                  }));
              };
              throw new Error("Failed pattern match at Motsunabe (line 57, column 1 - line 57, column 50): " + [ w.constructor.name, k.constructor.name, v.constructor.name ]);
          };
      };
  };
  var best = function (w) {
      return function (k) {
          return function (x) {
              return be(w)(k)(Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple(0, x)));
          };
      };
  };
  var prettyWithoutTrailing = function (w) {
      return function (x) {
          return postProcess(layout(best(w)(0)(x)));
      };
  };
  exports["DNest"] = DNest;
  exports["DText"] = DText;
  exports["DLine"] = DLine;
  exports["DAlt"] = DAlt;
  exports["prettyWithoutTrailing"] = prettyWithoutTrailing;
  exports["sgDoc"] = sgDoc;
  exports["mDoc"] = mDoc;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Simple.JSON.Utils"] = $PS["Simple.JSON.Utils"] || {};
  var exports = $PS["Simple.JSON.Utils"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Foreign = $PS["Foreign"];
  var Motsunabe = $PS["Motsunabe"];                
  var foreignErrorToDoc = function (v) {
      if (v instanceof Foreign.ForeignError) {
          return Motsunabe.DText.create("ForeignError: " + v.value0);
      };
      if (v instanceof Foreign.TypeMismatch) {
          var lines = Motsunabe.DNest.create(1)(Data_Semigroup.append(Motsunabe.sgDoc)(Motsunabe.DLine.value)(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("expected:"))(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DNest(1, Data_Semigroup.append(Motsunabe.sgDoc)(Motsunabe.DLine.value)(new Motsunabe.DText(v.value0))))(Data_Semigroup.append(Motsunabe.sgDoc)(Motsunabe.DLine.value)(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("actual:"))(new Motsunabe.DNest(1, Data_Semigroup.append(Motsunabe.sgDoc)(Motsunabe.DLine.value)(new Motsunabe.DText(v.value1)))))))));
          var line = Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText(" "))(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("expected: "))(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText(v.value0))(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText(", "))(Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("actual: "))(new Motsunabe.DText(v.value1))))));
          return Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("TypeMismatch:"))(new Motsunabe.DAlt(line, lines));
      };
      if (v instanceof Foreign.ErrorAtIndex) {
          var inner = Motsunabe.DNest.create(1)(Data_Semigroup.append(Motsunabe.sgDoc)(Motsunabe.DLine.value)(foreignErrorToDoc(v.value1)));
          return Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + ":")))(inner);
      };
      if (v instanceof Foreign.ErrorAtProperty) {
          var inner = Motsunabe.DNest.create(1)(Data_Semigroup.append(Motsunabe.sgDoc)(Motsunabe.DLine.value)(foreignErrorToDoc(v.value1)));
          return Data_Semigroup.append(Motsunabe.sgDoc)(new Motsunabe.DText("ErrorAtProperty \"" + (v.value0 + "\":")))(inner);
      };
      throw new Error("Failed pattern match at Simple.JSON.Utils (line 12, column 1 - line 12, column 41): " + [ v.constructor.name ]);
  };
  var printMultipleErrors = (function () {
      var $9 = Motsunabe.prettyWithoutTrailing(80);
      var $10 = Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Motsunabe.mDoc)(Motsunabe.DLine.value);
      var $11 = Data_Functor.map(Data_List_Types.functorNonEmptyList)(foreignErrorToDoc);
      return function ($12) {
          return $9($10($11($12)));
      };
  })();
  exports["printMultipleErrors"] = printMultipleErrors;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["UTF8"] = UTF8;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.readChunkImpl = function (Left) {
    return function (Right) {
      return function (chunk) {
        if (chunk instanceof Buffer) {
          return Right(chunk);
        } else if (typeof chunk === "string") {
          return Left(chunk);
        } else {
          throw new Error(
            "Node.Stream.readChunkImpl: Unrecognised " +
            "chunk type; expected String or Buffer, got: " +
            chunk);
        }
      };
    };
  };

  exports.onDataEitherImpl = function (readChunk) {
    return function (r) {
      return function (f) {
        return function () {
          r.on("data", function (data) {
            f(readChunk(data))();
          });
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var $foreign = $PS["Node.Buffer"];
  var Node_Encoding = $PS["Node.Encoding"];
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };
  exports["toString"] = toString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  var readChunk = $foreign.readChunkImpl(Data_Either.Left.create)(Data_Either.Right.create);
  var onDataEither = function (r) {
      return function (cb) {
          return $foreign.onDataEitherImpl(readChunk)(r)(cb);
      };
  };
  var onData = function (r) {
      return function (cb) {
          var fromEither = function (x) {
              if (x instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("Stream encoding should not be set");
              };
              if (x instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(x.value0);
              };
              throw new Error("Failed pattern match at Node.Stream (line 94, column 5 - line 98, column 17): " + [ x.constructor.name ]);
          };
          return onDataEither(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(fromEither));
      };
  };
  var onDataString = function (r) {
      return function (enc) {
          return function (cb) {
              return onData(r)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)(cb)(Node_Buffer.toString(enc)));
          };
      };
  };
  exports["onDataString"] = onDataString;
  exports["writeString"] = writeString;
  exports["end"] = $foreign.end;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Sunde"] = $PS["Sunde"] || {};
  var exports = $PS["Sunde"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Stream = $PS["Node.Stream"];                
  var spawn$prime = function (encoding) {
      return function (killSignal) {
          return function (v) {
              return function (options) {
                  return Effect_Aff.makeAff(function (cb) {
                      return function __do() {
                          var stdoutRef = Effect_Ref["new"]("")();
                          var stderrRef = Effect_Ref["new"]("")();
                          var process = Node_ChildProcess.spawn(v.cmd)(v.args)(options)();
                          (function () {
                              if (v.stdin instanceof Data_Maybe.Just) {
                                  var write = Node_ChildProcess.stdin(process);
                                  return Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(write)(Node_Encoding.UTF8.value)(v.stdin.value0)(Node_Stream.end(write)(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit)))))();
                              };
                              if (v.stdin instanceof Data_Maybe.Nothing) {
                                  return Data_Unit.unit;
                              };
                              throw new Error("Failed pattern match at Sunde (line 41, column 3 - line 46, column 25): " + [ v.stdin.constructor.name ]);
                          })();
                          Node_Stream.onDataString(Node_ChildProcess.stdout(process))(encoding)(function (string) {
                              return Effect_Ref.modify_(function (v1) {
                                  return v1 + string;
                              })(stdoutRef);
                          })();
                          Node_Stream.onDataString(Node_ChildProcess.stderr(process))(encoding)(function (string) {
                              return Effect_Ref.modify_(function (v1) {
                                  return v1 + string;
                              })(stderrRef);
                          })();
                          Node_ChildProcess.onError(process)(function ($12) {
                              return cb(Data_Either.Left.create(Node_ChildProcess.toStandardError($12)));
                          })();
                          Node_ChildProcess.onExit(process)(function (exit) {
                              return function __do() {
                                  var stdout = Effect_Ref.read(stdoutRef)();
                                  var stderr = Effect_Ref.read(stderrRef)();
                                  return cb(Control_Applicative.pure(Data_Either.applicativeEither)({
                                      stdout: stdout,
                                      stderr: stderr,
                                      exit: exit
                                  }))();
                              };
                          })();
                          return Effect_Aff.effectCanceler(Data_Functor["void"](Effect.functorEffect)(Node_ChildProcess.kill(killSignal)(process)));
                      };
                  });
              };
          };
      };
  };
  var spawn = spawn$prime(Node_Encoding.UTF8.value)(Data_Posix_Signal.SIGTERM.value);
  exports["spawn"] = spawn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Core"] = $PS["Core"] || {};
  var exports = $PS["Core"];
  var $foreign = $PS["Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Variant_Internal = $PS["Data.Variant.Internal"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Kishimen = $PS["Kishimen"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Simple_JSON = $PS["Simple.JSON"];
  var Simple_JSON_Utils = $PS["Simple.JSON.Utils"];
  var Sunde = $PS["Sunde"];
  var Remote = (function () {
      function Remote(value0) {
          this.value0 = value0;
      };
      Remote.create = function (value0) {
          return new Remote(value0);
      };
      return Remote;
  })();
  var Local = (function () {
      function Local(value0) {
          this.value0 = value0;
      };
      Local.create = function (value0) {
          return new Local(value0);
      };
      return Local;
  })();
  var SpagoRunError = (function () {
      function SpagoRunError(value0) {
          this.value0 = value0;
      };
      SpagoRunError.create = function (value0) {
          return new SpagoRunError(value0);
      };
      return SpagoRunError;
  })();
  var SpagoOutputDeformed = (function () {
      function SpagoOutputDeformed(value0) {
          this.value0 = value0;
      };
      SpagoOutputDeformed.create = function (value0) {
          return new SpagoOutputDeformed(value0);
      };
      return SpagoOutputDeformed;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var NixPrefetchGitFailed = (function () {
      function NixPrefetchGitFailed(value0) {
          this.value0 = value0;
      };
      NixPrefetchGitFailed.create = function (value0) {
          return new NixPrefetchGitFailed(value0);
      };
      return NixPrefetchGitFailed;
  })();
  var MissingRevOrRepoResult = (function () {
      function MissingRevOrRepoResult(value0) {
          this.value0 = value0;
      };
      MissingRevOrRepoResult.create = function (value0) {
          return new MissingRevOrRepoResult(value0);
      };
      return MissingRevOrRepoResult;
  })();
  var NixPrefetchGitOutputDeformed = (function () {
      function NixPrefetchGitOutputDeformed(value0) {
          this.value0 = value0;
      };
      NixPrefetchGitOutputDeformed.create = function (value0) {
          return new NixPrefetchGitOutputDeformed(value0);
      };
      return NixPrefetchGitOutputDeformed;
  })();
  var FileContentsCorrupted = (function () {
      function FileContentsCorrupted(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FileContentsCorrupted.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FileContentsCorrupted(value0, value1, value2);
              };
          };
      };
      return FileContentsCorrupted;
  })();
  var CantFetchLocal = (function () {
      function CantFetchLocal(value0) {
          this.value0 = value0;
      };
      CantFetchLocal.create = function (value0) {
          return new CantFetchLocal(value0);
      };
      return CantFetchLocal;
  })();
  var Fetched = (function () {
      function Fetched(value0) {
          this.value0 = value0;
      };
      Fetched.create = function (value0) {
          return new Fetched(value0);
      };
      return Fetched;
  })();
  var writeForeignVersion = Simple_JSON.writeForeignString;
  var writeForeignURL = Simple_JSON.writeForeignString;
  var writeForeignSHA = Simple_JSON.writeForeignString;
  var writeForeignRevision = Simple_JSON.writeForeignString;
  var writeForeignRepo = new Simple_JSON.WriteForeign(function (v) {
      if (v instanceof Remote) {
          return Simple_JSON.writeImpl(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
              return "contents";
          }))(Simple_JSON.writeForeignForeign)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
              return "tag";
          }))(Simple_JSON.writeForeignString)(Simple_JSON.nilWriteForeignFields)()()())()()()))({
              tag: "Remote",
              contents: Simple_JSON.writeImpl(writeForeignURL)(v.value0)
          });
      };
      if (v instanceof Local) {
          return Simple_JSON.writeImpl(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
              return "contents";
          }))(Simple_JSON.writeForeignForeign)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
              return "tag";
          }))(Simple_JSON.writeForeignString)(Simple_JSON.nilWriteForeignFields)()()())()()()))({
              tag: "Local",
              contents: Simple_JSON.writeImpl(Simple_JSON.writeForeignString)(v.value0)
          });
      };
      throw new Error("Failed pattern match at Core (line 141, column 1 - line 143, column 84): " + [ v.constructor.name ]);
  });
  var spagoPackagesNix = "spago-packages.nix";
  var showVersion = Data_Show.showString;
  var showURL = Data_Show.showString;     
  var runDhallToJSON = function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Sunde.spawn({
          cmd: "dhall-to-json",
          args: [  ],
          stdin: new Data_Maybe.Just(v)
      })(Node_ChildProcess.defaultSpawnOptions))(function (result) {
          if (result.exit instanceof Node_ChildProcess.Normally && result.exit.value0 === 0) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result.stdout);
          };
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("error running dhall-to-json:"))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)(Data_Show.show(Node_ChildProcess.showExit)(result.exit)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)(result.stderr))(function () {
                      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(result.stderr));
                  });
              });
          });
      });
  };
  var runCommand = function (v) {
      return Effect_Aff.makeAff(function (cb) {
          return function __do() {
              var cp = Node_ChildProcess.spawn(v.cmd)(v.args)({
                  cwd: Node_ChildProcess.defaultSpawnOptions.cwd,
                  stdio: Node_ChildProcess.inherit,
                  env: Node_ChildProcess.defaultSpawnOptions.env,
                  detached: Node_ChildProcess.defaultSpawnOptions.detached,
                  uid: Node_ChildProcess.defaultSpawnOptions.uid,
                  gid: Node_ChildProcess.defaultSpawnOptions.gid
              })();
              Node_ChildProcess.onExit(cp)(function (ex) {
                  return cb(new Data_Either.Right(ex));
              })();
              Node_ChildProcess.onError(cp)(function (err) {
                  return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(Node_ChildProcess.toStandardError(err));
              })();
              return Data_Monoid.mempty(Effect.monoidEffect(Effect_Aff.monoidCanceler))();
          };
      });
  };
  var readForeignVersion = Simple_JSON.readString;
  var readForeignURL = Simple_JSON.readString;
  var readForeignSHA = Simple_JSON.readString;
  var readForeignRevision = Simple_JSON.readString;
  var readForeignRepo = new Simple_JSON.ReadForeign(function (f) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Simple_JSON.readImpl(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "contents";
      }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "tag";
      }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)()())()()))(f))(function (v) {
          if (v.tag === "Remote") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Remote(v.contents));
          };
          if (v.tag === "Local") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(new Local(v.contents));
          };
          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Foreign.ForeignError.create("Unknown Repo type: " + v.tag)));
      });
  });
  var mkJSONError = function ($92) {
      return JSONError.create(Simple_JSON_Utils.printMultipleErrors($92));
  };
  var readPackage = (function () {
      var $93 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(mkJSONError);
      var $94 = Simple_JSON.readJSON(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "packageName";
      }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "repo";
      }))(readForeignRepo)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "version";
      }))(readForeignVersion)(Simple_JSON.readFieldsNil)()())()())()()));
      return function ($95) {
          return $93($94($95));
      };
  })();
  var genericRepo = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Remote) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof Local) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Core (line 162, column 1 - line 162, column 46): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Remote(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new Local(x.value0);
      };
      throw new Error("Failed pattern match at Core (line 162, column 1 - line 162, column 46): " + [ x.constructor.name ]);
  });
  var showRepo = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericRepo)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(showURL))(new Data_Symbol.IsSymbol(function () {
      return "Remote";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "Local";
  })))));
  var genericMyError = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SpagoRunError) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof SpagoOutputDeformed) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof JSONError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof NixPrefetchGitFailed) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof MissingRevOrRepoResult) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
      };
      if (x instanceof NixPrefetchGitOutputDeformed) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
      };
      if (x instanceof FileContentsCorrupted) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2))))))));
      };
      throw new Error("Failed pattern match at Core (line 120, column 1 - line 120, column 52): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new SpagoRunError(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new SpagoOutputDeformed(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new JSONError(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new NixPrefetchGitFailed(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new MissingRevOrRepoResult(x.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return new NixPrefetchGitOutputDeformed(x.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
          return new FileContentsCorrupted(x.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value1.value1);
      };
      throw new Error("Failed pattern match at Core (line 120, column 1 - line 120, column 52): " + [ x.constructor.name ]);
  });
  var showMyError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericMyError)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "SpagoRunError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "SpagoOutputDeformed";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "JSONError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "NixPrefetchGitFailed";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "MissingRevOrRepoResult";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "NixPrefetchGitOutputDeformed";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "packageName";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "repo";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "version";
  }))(Data_Show.showRecordFieldsNil)(showVersion))(showRepo))(Data_Show.showString))))(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "FileContentsCorrupted";
  }))))))))));
  var genericFetchResult = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof CantFetchLocal) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof Fetched) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Core (line 165, column 1 - line 165, column 60): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new CantFetchLocal(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new Fetched(x.value0);
      };
      throw new Error("Failed pattern match at Core (line 165, column 1 - line 165, column 60): " + [ x.constructor.name ]);
  });
  var readForeignFetchResult = new Simple_JSON.ReadForeign((function () {
      var $96 = Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Kishimen.variantToGenericSum(genericFetchResult)(Kishimen.genericSumToVariantSum(Kishimen.genericSumToVariantConstructor(new Data_Symbol.IsSymbol(function () {
          return "CantFetchLocal";
      }))()(Kishimen.genericSumToVariantArgArguments))(Kishimen.genericSumToVariantConstructor(new Data_Symbol.IsSymbol(function () {
          return "Fetched";
      }))()(Kishimen.genericSumToVariantArgArguments))()()()()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
          return "CantFetchLocal";
      })))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
          return "Fetched";
      })))));
      var $97 = Simple_JSON.readImpl(Simple_JSON.readForeignVariant()(Simple_JSON.readVariantCons(new Data_Symbol.IsSymbol(function () {
          return "CantFetchLocal";
      }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "packageName";
      }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "repo";
      }))(readForeignRepo)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "version";
      }))(readForeignVersion)(Simple_JSON.readFieldsNil)()())()())()()))()(Simple_JSON.readVariantCons(new Data_Symbol.IsSymbol(function () {
          return "Fetched";
      }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "package";
      }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "packageName";
      }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "repo";
      }))(readForeignRepo)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "version";
      }))(readForeignVersion)(Simple_JSON.readFieldsNil)()())()())()()))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "result";
      }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "rev";
      }))(readForeignRevision)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "sha256";
      }))(readForeignSHA)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "url";
      }))(readForeignURL)(Simple_JSON.readFieldsNil)()())()())()()))(Simple_JSON.readFieldsNil)()())()()))()(Simple_JSON.readVariantNil))));
      return function ($98) {
          return $96($97($98));
      };
  })()); 
  var writeForeignFetchResult = new Simple_JSON.WriteForeign((function () {
      var $99 = Simple_JSON.writeImpl(Simple_JSON.writeForeignVariant()(Simple_JSON.consWriteForeignVariant(new Data_Symbol.IsSymbol(function () {
          return "CantFetchLocal";
      }))(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "packageName";
      }))(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "repo";
      }))(writeForeignRepo)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "version";
      }))(writeForeignVersion)(Simple_JSON.nilWriteForeignFields)()()())()()())()()()))()(Simple_JSON.consWriteForeignVariant(new Data_Symbol.IsSymbol(function () {
          return "Fetched";
      }))(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "package";
      }))(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "packageName";
      }))(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "repo";
      }))(writeForeignRepo)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "version";
      }))(writeForeignVersion)(Simple_JSON.nilWriteForeignFields)()()())()()())()()()))(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "result";
      }))(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "rev";
      }))(writeForeignRevision)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "sha256";
      }))(writeForeignSHA)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "url";
      }))(writeForeignURL)(Simple_JSON.nilWriteForeignFields)()()())()()())()()()))(Simple_JSON.nilWriteForeignFields)()()())()()()))()(Simple_JSON.nilWriteForeignVariant))));
      var $100 = Kishimen.genericSumToVariant(genericFetchResult)(Kishimen.genericSumToVariantSum(Kishimen.genericSumToVariantConstructor(new Data_Symbol.IsSymbol(function () {
          return "CantFetchLocal";
      }))()(Kishimen.genericSumToVariantArgArguments))(Kishimen.genericSumToVariantConstructor(new Data_Symbol.IsSymbol(function () {
          return "Fetched";
      }))()(Kishimen.genericSumToVariantArgArguments))()()()()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
          return "CantFetchLocal";
      })))()(Data_Variant_Internal.variantTagsCons(Data_Variant_Internal.variantTagsNil)(new Data_Symbol.IsSymbol(function () {
          return "Fetched";
      }))));
      return function ($101) {
          return $99($100($101));
      };
  })());
  var exit = (function () {
      var $102 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      return function ($103) {
          return $102($foreign["_exit"]($103));
      };
  })();
  var eqSHA = Data_Eq.eqString;
  var buildScript = function (dictFoldable) {
      return function (v) {
          var args = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ spagoPackagesNix, "-A", v.attr, "-o", v.path ])(Data_Array.fromFoldable(dictFoldable)(v.extraArgs));
          return runCommand({
              cmd: "nix-build",
              args: args
          });
      };
  };
  exports["spagoPackagesNix"] = spagoPackagesNix;
  exports["runDhallToJSON"] = runDhallToJSON;
  exports["runCommand"] = runCommand;
  exports["buildScript"] = buildScript;
  exports["exit"] = exit;
  exports["readPackage"] = readPackage;
  exports["SpagoRunError"] = SpagoRunError;
  exports["NixPrefetchGitFailed"] = NixPrefetchGitFailed;
  exports["MissingRevOrRepoResult"] = MissingRevOrRepoResult;
  exports["NixPrefetchGitOutputDeformed"] = NixPrefetchGitOutputDeformed;
  exports["FileContentsCorrupted"] = FileContentsCorrupted;
  exports["Remote"] = Remote;
  exports["Local"] = Local;
  exports["CantFetchLocal"] = CantFetchLocal;
  exports["Fetched"] = Fetched;
  exports["showMyError"] = showMyError;
  exports["readForeignURL"] = readForeignURL;
  exports["showVersion"] = showVersion;
  exports["readForeignRevision"] = readForeignRevision;
  exports["eqSHA"] = eqSHA;
  exports["readForeignSHA"] = readForeignSHA;
  exports["showRepo"] = showRepo;
  exports["readForeignFetchResult"] = readForeignFetchResult;
  exports["writeForeignFetchResult"] = writeForeignFetchResult;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];         
  var unsafeFromArray = Unsafe_Coerce.unsafeCoerce;
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var fromArray = function (xs) {
      if (Data_Array.length(xs) > 0) {
          return new Data_Maybe.Just(unsafeFromArray(xs));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Array.NonEmpty (line 134, column 1 - line 134, column 58): " + [ xs.constructor.name ]);
  };
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };                                     
  var uncons = adaptMaybe(Data_Array.uncons);
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  exports["fromArray"] = fromArray;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Memoize"] = $PS["Data.Function.Memoize"] || {};
  var exports = $PS["Data.Function.Memoize"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Tuple = $PS["Data.Tuple"];              
  var NatTrie = (function () {
      function NatTrie(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NatTrie.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NatTrie(value0, value1, value2);
              };
          };
      };
      return NatTrie;
  })();
  var Tabulate = function (tabulate) {
      this.tabulate = tabulate;
  }; 
  var tabulateNat = new Tabulate((function () {
      var tabulateImpl = function (f) {
          var walk = function (v) {
              return function (v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      return v1.value0;
                  };
                  if (v instanceof Data_List_Types.Cons && !v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                  };
                  if (v instanceof Data_List_Types.Cons && v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.Function.Memoize (line 137, column 11 - line 137, column 64): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var build = function (n) {
              return new NatTrie(Data_Lazy.defer(function (v) {
                  return f(n);
              }), Data_Lazy.defer(function (v) {
                  return build(n * 2 | 0);
              }), Data_Lazy.defer(function (v) {
                  return build((n * 2 | 0) + 1 | 0);
              }));
          };
          var trie = build(0);
          var bits = (function () {
              var bits$prime = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                          $copy_v = v >>> 1;
                          return;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return bits$prime(Data_List_Types.Nil.value);
          })();
          var go = function (n) {
              return walk(bits(n))(trie);
          };
          return go;
      };
      return tabulateImpl;
  })());
  var tabulate = function (dict) {
      return dict.tabulate;
  };
  var tabulateTuple = function (dictTabulate) {
      return function (dictTabulate1) {
          return new Tabulate(function (f) {
              var f$prime = tabulate(dictTabulate)(function (a) {
                  return tabulate(dictTabulate1)(function (b) {
                      return f(new Data_Tuple.Tuple(a, b));
                  });
              });
              return function (v) {
                  return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (g) {
                      return g(v.value1);
                  });
              };
          });
      };
  }; 
  var memoize = function (dictTabulate) {
      return function (f) {
          var f1 = tabulate(dictTabulate)(f);
          return function ($105) {
              return Data_Lazy.force(f1($105));
          };
      };
  };
  var memoize2 = function (dictTabulate) {
      return function (dictTabulate1) {
          return function (f) {
              var f1 = memoize(tabulateTuple(dictTabulate)(dictTabulate1))(Data_Tuple.uncurry(f));
              return Data_Tuple.curry(f1);
          };
      };
  };
  exports["memoize2"] = memoize2;
  exports["tabulateNat"] = tabulateNat;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                              
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Validation.Semigroup"] = $PS["Data.Validation.Semigroup"] || {};
  var exports = $PS["Data.Validation.Semigroup"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var V = function (x) {
      return x;
  };
  var toEither = function (v) {
      return v;
  };
  var functorV = Data_Either.functorEither;    
  var applyV = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              if (v instanceof Data_Either.Left) {
                  return new Data_Either.Left(v.value0);
              };
              if (v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v1.value0);
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Validation.Semigroup (line 88, column 1 - line 92, column 54): " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var applicativeV = function (dictSemigroup) {
      return new Control_Applicative.Applicative(function () {
          return applyV(dictSemigroup);
      }, function ($70) {
          return V(Data_Either.Right.create($70));
      });
  };
  exports["V"] = V;
  exports["toEither"] = toEither;
  exports["applicativeV"] = applicativeV;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["ExitCodes"] = $PS["ExitCodes"] || {};
  var exports = $PS["ExitCodes"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var MisuseOfShellBuiltins = (function () {
      function MisuseOfShellBuiltins() {

      };
      MisuseOfShellBuiltins.value = new MisuseOfShellBuiltins();
      return MisuseOfShellBuiltins;
  })();
  var CLIUsageError = (function () {
      function CLIUsageError() {

      };
      CLIUsageError.value = new CLIUsageError();
      return CLIUsageError;
  })();
  var DataFormatError = (function () {
      function DataFormatError() {

      };
      DataFormatError.value = new DataFormatError();
      return DataFormatError;
  })();
  var CannotOpenInput = (function () {
      function CannotOpenInput() {

      };
      CannotOpenInput.value = new CannotOpenInput();
      return CannotOpenInput;
  })();
  var AddresseeUnknown = (function () {
      function AddresseeUnknown() {

      };
      AddresseeUnknown.value = new AddresseeUnknown();
      return AddresseeUnknown;
  })();
  var HostNameUnknown = (function () {
      function HostNameUnknown() {

      };
      HostNameUnknown.value = new HostNameUnknown();
      return HostNameUnknown;
  })();
  var ServiceUnavailable = (function () {
      function ServiceUnavailable() {

      };
      ServiceUnavailable.value = new ServiceUnavailable();
      return ServiceUnavailable;
  })();
  var InternalSoftwareError = (function () {
      function InternalSoftwareError() {

      };
      InternalSoftwareError.value = new InternalSoftwareError();
      return InternalSoftwareError;
  })();
  var SystemError = (function () {
      function SystemError() {

      };
      SystemError.value = new SystemError();
      return SystemError;
  })();
  var CriticalOSFileMissing = (function () {
      function CriticalOSFileMissing() {

      };
      CriticalOSFileMissing.value = new CriticalOSFileMissing();
      return CriticalOSFileMissing;
  })();
  var CannotCreateOutputFile = (function () {
      function CannotCreateOutputFile() {

      };
      CannotCreateOutputFile.value = new CannotCreateOutputFile();
      return CannotCreateOutputFile;
  })();
  var IOError = (function () {
      function IOError() {

      };
      IOError.value = new IOError();
      return IOError;
  })();
  var TemporaryFailure = (function () {
      function TemporaryFailure() {

      };
      TemporaryFailure.value = new TemporaryFailure();
      return TemporaryFailure;
  })();
  var RemoteError = (function () {
      function RemoteError() {

      };
      RemoteError.value = new RemoteError();
      return RemoteError;
  })();
  var PermissionDenied = (function () {
      function PermissionDenied() {

      };
      PermissionDenied.value = new PermissionDenied();
      return PermissionDenied;
  })();
  var ConfigurationError = (function () {
      function ConfigurationError() {

      };
      ConfigurationError.value = new ConfigurationError();
      return ConfigurationError;
  })();
  var CannotExecute = (function () {
      function CannotExecute() {

      };
      CannotExecute.value = new CannotExecute();
      return CannotExecute;
  })();
  var CommandNotFound = (function () {
      function CommandNotFound() {

      };
      CommandNotFound.value = new CommandNotFound();
      return CommandNotFound;
  })();
  var InvalidExitArgument = (function () {
      function InvalidExitArgument() {

      };
      InvalidExitArgument.value = new InvalidExitArgument();
      return InvalidExitArgument;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var eqExitCode = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Success && y instanceof Success) {
              return true;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return true;
          };
          if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
              return true;
          };
          if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
              return true;
          };
          if (x instanceof DataFormatError && y instanceof DataFormatError) {
              return true;
          };
          if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
              return true;
          };
          if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
              return true;
          };
          if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
              return true;
          };
          if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
              return true;
          };
          if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
              return true;
          };
          if (x instanceof SystemError && y instanceof SystemError) {
              return true;
          };
          if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
              return true;
          };
          if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
              return true;
          };
          if (x instanceof IOError && y instanceof IOError) {
              return true;
          };
          if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
              return true;
          };
          if (x instanceof RemoteError && y instanceof RemoteError) {
              return true;
          };
          if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
              return true;
          };
          if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
              return true;
          };
          if (x instanceof CannotExecute && y instanceof CannotExecute) {
              return true;
          };
          if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
              return true;
          };
          if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
              return true;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return true;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return true;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return true;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return true;
          };
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return true;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return true;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return true;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return true;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return true;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return true;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return true;
          };
          return false;
      };
  });
  var ordExitCode = new Data_Ord.Ord(function () {
      return eqExitCode;
  }, function (x) {
      return function (y) {
          if (x instanceof Success && y instanceof Success) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Success) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Success) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof $$Error && y instanceof $$Error) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof $$Error) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof $$Error) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof MisuseOfShellBuiltins && y instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof MisuseOfShellBuiltins) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CLIUsageError && y instanceof CLIUsageError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CLIUsageError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CLIUsageError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof DataFormatError && y instanceof DataFormatError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof DataFormatError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof DataFormatError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotOpenInput && y instanceof CannotOpenInput) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotOpenInput) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotOpenInput) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AddresseeUnknown && y instanceof AddresseeUnknown) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof AddresseeUnknown) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AddresseeUnknown) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof HostNameUnknown && y instanceof HostNameUnknown) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof HostNameUnknown) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof HostNameUnknown) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ServiceUnavailable && y instanceof ServiceUnavailable) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ServiceUnavailable) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ServiceUnavailable) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InternalSoftwareError && y instanceof InternalSoftwareError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InternalSoftwareError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InternalSoftwareError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SystemError && y instanceof SystemError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SystemError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SystemError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CriticalOSFileMissing && y instanceof CriticalOSFileMissing) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CriticalOSFileMissing) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CriticalOSFileMissing) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotCreateOutputFile && y instanceof CannotCreateOutputFile) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotCreateOutputFile) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotCreateOutputFile) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof IOError && y instanceof IOError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof IOError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof IOError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof TemporaryFailure && y instanceof TemporaryFailure) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof TemporaryFailure) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof TemporaryFailure) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof RemoteError && y instanceof RemoteError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof RemoteError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof RemoteError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PermissionDenied && y instanceof PermissionDenied) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PermissionDenied) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PermissionDenied) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ConfigurationError && y instanceof ConfigurationError) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ConfigurationError) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ConfigurationError) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CannotExecute && y instanceof CannotExecute) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CannotExecute) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CannotExecute) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof CommandNotFound && y instanceof CommandNotFound) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof CommandNotFound) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof CommandNotFound) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof InvalidExitArgument && y instanceof InvalidExitArgument) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof InvalidExitArgument) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof InvalidExitArgument) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGHUP && y instanceof SIGHUP) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGHUP) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGHUP) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGINT && y instanceof SIGINT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGINT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGINT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGQUIT && y instanceof SIGQUIT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGQUIT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGQUIT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGILL && y instanceof SIGILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGABRT && y instanceof SIGABRT) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGABRT) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGABRT) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGFPE && y instanceof SIGFPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGFPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGFPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGKILL && y instanceof SIGKILL) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGKILL) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGKILL) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGSEGV && y instanceof SIGSEGV) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGSEGV) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGSEGV) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGPIPE && y instanceof SIGPIPE) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGPIPE) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGPIPE) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGALRM && y instanceof SIGALRM) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof SIGALRM) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof SIGALRM) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof SIGTERM && y instanceof SIGTERM) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at ExitCodes (line 47, column 1 - line 47, column 44): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var enumExitCode = new Data_Enum.Enum(function () {
      return ordExitCode;
  }, function (v) {
      if (v instanceof Success) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof $$Error) {
          return new Data_Maybe.Just(Success.value);
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v instanceof CLIUsageError) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v instanceof DataFormatError) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v instanceof CannotOpenInput) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v instanceof AddresseeUnknown) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v instanceof HostNameUnknown) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v instanceof ServiceUnavailable) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v instanceof InternalSoftwareError) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v instanceof SystemError) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v instanceof CriticalOSFileMissing) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v instanceof CannotCreateOutputFile) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v instanceof IOError) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v instanceof TemporaryFailure) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v instanceof RemoteError) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v instanceof PermissionDenied) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v instanceof ConfigurationError) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v instanceof CannotExecute) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v instanceof CommandNotFound) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v instanceof InvalidExitArgument) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v instanceof SIGHUP) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v instanceof SIGINT) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v instanceof SIGQUIT) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v instanceof SIGILL) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v instanceof SIGABRT) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v instanceof SIGFPE) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v instanceof SIGKILL) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v instanceof SIGSEGV) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v instanceof SIGPIPE) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v instanceof SIGALRM) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v instanceof SIGTERM) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Success) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v instanceof $$Error) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v instanceof CLIUsageError) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v instanceof DataFormatError) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v instanceof CannotOpenInput) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v instanceof AddresseeUnknown) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v instanceof HostNameUnknown) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v instanceof ServiceUnavailable) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v instanceof InternalSoftwareError) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v instanceof SystemError) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v instanceof CriticalOSFileMissing) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v instanceof CannotCreateOutputFile) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v instanceof IOError) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v instanceof TemporaryFailure) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v instanceof RemoteError) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v instanceof PermissionDenied) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v instanceof ConfigurationError) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v instanceof CannotExecute) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v instanceof CommandNotFound) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v instanceof InvalidExitArgument) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v instanceof SIGHUP) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v instanceof SIGINT) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v instanceof SIGQUIT) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v instanceof SIGILL) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v instanceof SIGABRT) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v instanceof SIGFPE) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v instanceof SIGKILL) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v instanceof SIGSEGV) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v instanceof SIGPIPE) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (v instanceof SIGALRM) {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (v instanceof SIGTERM) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at ExitCodes (line 87, column 1 - line 151, column 30): " + [ v.constructor.name ]);
  });
  var boundedExitCode = new Data_Bounded.Bounded(function () {
      return ordExitCode;
  }, Success.value, SIGTERM.value);
  var boundedEnumExitCode = new Data_Enum.BoundedEnum(function () {
      return boundedExitCode;
  }, function () {
      return enumExitCode;
  }, 32, function (v) {
      if (v instanceof Success) {
          return 0;
      };
      if (v instanceof $$Error) {
          return 1;
      };
      if (v instanceof MisuseOfShellBuiltins) {
          return 2;
      };
      if (v instanceof CLIUsageError) {
          return 64;
      };
      if (v instanceof DataFormatError) {
          return 65;
      };
      if (v instanceof CannotOpenInput) {
          return 66;
      };
      if (v instanceof AddresseeUnknown) {
          return 67;
      };
      if (v instanceof HostNameUnknown) {
          return 68;
      };
      if (v instanceof ServiceUnavailable) {
          return 69;
      };
      if (v instanceof InternalSoftwareError) {
          return 70;
      };
      if (v instanceof SystemError) {
          return 71;
      };
      if (v instanceof CriticalOSFileMissing) {
          return 72;
      };
      if (v instanceof CannotCreateOutputFile) {
          return 73;
      };
      if (v instanceof IOError) {
          return 74;
      };
      if (v instanceof TemporaryFailure) {
          return 75;
      };
      if (v instanceof RemoteError) {
          return 76;
      };
      if (v instanceof PermissionDenied) {
          return 77;
      };
      if (v instanceof ConfigurationError) {
          return 78;
      };
      if (v instanceof CannotExecute) {
          return 126;
      };
      if (v instanceof CommandNotFound) {
          return 127;
      };
      if (v instanceof InvalidExitArgument) {
          return 128;
      };
      if (v instanceof SIGHUP) {
          return 128 + 1 | 0;
      };
      if (v instanceof SIGINT) {
          return 128 + 2 | 0;
      };
      if (v instanceof SIGQUIT) {
          return 128 + 3 | 0;
      };
      if (v instanceof SIGILL) {
          return 128 + 4 | 0;
      };
      if (v instanceof SIGABRT) {
          return 128 + 6 | 0;
      };
      if (v instanceof SIGFPE) {
          return 128 + 8 | 0;
      };
      if (v instanceof SIGKILL) {
          return 128 + 9 | 0;
      };
      if (v instanceof SIGSEGV) {
          return 128 + 11 | 0;
      };
      if (v instanceof SIGPIPE) {
          return 128 + 13 | 0;
      };
      if (v instanceof SIGALRM) {
          return 128 + 14 | 0;
      };
      if (v instanceof SIGTERM) {
          return 128 + 15 | 0;
      };
      throw new Error("Failed pattern match at ExitCodes (line 153, column 1 - line 219, column 30): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Success.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just($$Error.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(MisuseOfShellBuiltins.value);
      };
      if (v === 64) {
          return new Data_Maybe.Just(CLIUsageError.value);
      };
      if (v === 65) {
          return new Data_Maybe.Just(DataFormatError.value);
      };
      if (v === 66) {
          return new Data_Maybe.Just(CannotOpenInput.value);
      };
      if (v === 67) {
          return new Data_Maybe.Just(AddresseeUnknown.value);
      };
      if (v === 68) {
          return new Data_Maybe.Just(HostNameUnknown.value);
      };
      if (v === 69) {
          return new Data_Maybe.Just(ServiceUnavailable.value);
      };
      if (v === 70) {
          return new Data_Maybe.Just(InternalSoftwareError.value);
      };
      if (v === 71) {
          return new Data_Maybe.Just(SystemError.value);
      };
      if (v === 72) {
          return new Data_Maybe.Just(CriticalOSFileMissing.value);
      };
      if (v === 73) {
          return new Data_Maybe.Just(CannotCreateOutputFile.value);
      };
      if (v === 74) {
          return new Data_Maybe.Just(IOError.value);
      };
      if (v === 75) {
          return new Data_Maybe.Just(TemporaryFailure.value);
      };
      if (v === 76) {
          return new Data_Maybe.Just(RemoteError.value);
      };
      if (v === 77) {
          return new Data_Maybe.Just(PermissionDenied.value);
      };
      if (v === 78) {
          return new Data_Maybe.Just(ConfigurationError.value);
      };
      if (v === 126) {
          return new Data_Maybe.Just(CannotExecute.value);
      };
      if (v === 127) {
          return new Data_Maybe.Just(CommandNotFound.value);
      };
      if (v === 128) {
          return new Data_Maybe.Just(InvalidExitArgument.value);
      };
      if (v === 129) {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (v === 130) {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (v === 131) {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (v === 132) {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (v === 134) {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (v === 136) {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (v === 137) {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (v === 139) {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (v === 141) {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (v === 142) {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (v === 143) {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Success"] = Success;
  exports["Error"] = $$Error;
  exports["boundedEnumExitCode"] = boundedEnumExitCode;
})(PS);
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Perms"] = $PS["Node.FS.Perms"] || {};
  var exports = $PS["Node.FS.Perms"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var semiringPerm = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return {
              r: v.r || v1.r,
              w: v.w || v1.w,
              x: v.x || v1.x
          };
      };
  }, function (v) {
      return function (v1) {
          return {
              r: v.r && v1.r,
              w: v.w && v1.w,
              x: v.x && v1.x
          };
      };
  }, {
      r: true,
      w: true,
      x: true
  }, {
      r: false,
      w: false,
      x: false
  });
  var permToInt = function (v) {
      return ((function () {
          if (v.r) {
              return 4;
          };
          return 0;
      })() + (function () {
          if (v.w) {
              return 2;
          };
          return 0;
      })() | 0) + (function () {
          if (v.x) {
              return 1;
          };
          return 0;
      })() | 0;
  };
  var permToString = (function () {
      var $97 = Data_Show.show(Data_Show.showInt);
      return function ($98) {
          return $97(permToInt($98));
      };
  })();
  var permsToString = function (v) {
      return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
  };                                          
  var mkPerms = function (u) {
      return function (g) {
          return function (o) {
              return {
                  u: u,
                  g: g,
                  o: o
              };
          };
      };
  }; 
  var all = Data_Semiring.one(semiringPerm);
  exports["all"] = all;
  exports["mkPerms"] = mkPerms;
  exports["permsToString"] = permsToString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];
  var Node_FS_Perms = $PS["Node.FS.Perms"];                
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;
  var mkdir$prime = function (file) {
      return function (perms) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
              });
          };
      };
  };
  var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  var realpath = function (path) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.realpath(path, {}, handleCallback(cb));
          });
      };
  };
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };
  var exists = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.exists(file, function (b) {
                  return Effect_Unsafe.unsafePerformEffect(cb(b));
              });
          });
      };
  };
  exports["realpath"] = realpath;
  exports["mkdir"] = mkdir;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
  exports["exists"] = exists;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };
  var toAff1 = function (f) {
      return function (a) {
          return toAff(f(a));
      };
  };                                        
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                              
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };                                        
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);
  var realpath = toAff1(Node_FS_Async.realpath);
  var readTextFile = toAff2(Node_FS_Async.readTextFile);
  var mkdir = toAff1(Node_FS_Async.mkdir);      
  var exists = function (file) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)((function () {
              var $0 = Control_Applicative.pure(Data_Either.applicativeEither);
              return function ($1) {
                  return k($0($1));
              };
          })()))(Effect_Aff.nonCanceler);
      });
  };
  exports["realpath"] = realpath;
  exports["mkdir"] = mkdir;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
  exports["exists"] = exists;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Generate"] = $PS["Generate"] || {};
  var exports = $PS["Generate"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Core = $PS["Core"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Validation_Semigroup = $PS["Data.Validation.Semigroup"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Simple_JSON = $PS["Simple.JSON"];
  var Simple_JSON_Utils = $PS["Simple.JSON.Utils"];
  var Sunde = $PS["Sunde"];                
  var template = "# This file was generated by Spago2Nix\x0a\x0a{ pkgs ? import <nixpkgs> {} }:\x0a\x0alet\x0a  inputs = {\x0aINPUTS\x0a  };\x0a\x0a  cpPackage = pkg:\x0a    let\x0a      target = \".spago/${pkg.name}/${pkg.version}\";\x0a    in ''\x0a      if [ ! -e ${target} ]; then\x0a        echo \"Installing ${target}.\"\x0a        mkdir -p ${target}\x0a        cp --no-preserve=mode,ownership,timestamp -r ${toString pkg.outPath}/* ${target}\x0a      else\x0a        echo \"${target} already exists. Skipping.\"\x0a      fi\x0a    '';\x0a\x0a  getGlob = pkg: ''\".spago/${pkg.name}/${pkg.version}/src/**/*.purs\"'';\x0a\x0a  getStoreGlob = pkg: ''\"${pkg.outPath}/src/**/*.purs\"'';\x0a\x0ain {\x0a  inherit inputs;\x0a\x0a  installSpagoStyle = pkgs.writeShellScriptBin \"install-spago-style\" ''\x0a      set -e\x0a      echo installing dependencies...\x0a      ${builtins.toString (builtins.map cpPackage (builtins.attrValues inputs))}\x0a      echo \"echo done.\"\x0a  '';\x0a\x0a  buildSpagoStyle = pkgs.writeShellScriptBin \"build-spago-style\" ''\x0a      set -e\x0a      echo building project...\x0a      purs compile ${builtins.toString (builtins.map getGlob (builtins.attrValues inputs))} \"$@\"\x0a      echo done.\x0a  '';\x0a\x0a  buildFromNixStore = pkgs.writeShellScriptBin \"build-from-store\" ''\x0a      set -e\x0a      echo building project using sources from nix store...\x0a      purs compile ${builtins.toString (\x0a        builtins.map getStoreGlob (builtins.attrValues inputs))} \"$@\"\x0a      echo done.\x0a  '';\x0a\x0a  mkBuildProjectOutput =\x0a    { src, purs }:\x0a\x0a    pkgs.stdenv.mkDerivation {\x0a      name = \"build-project-output\";\x0a      src = src;\x0a\x0a      buildInputs = [ purs ];\x0a\x0a      installPhase = ''\x0a        mkdir -p $out\x0a        purs compile \"$src/**/*.purs\" ${builtins.toString\x0a          (builtins.map\x0a            (x: ''\"${x.outPath}/src/**/*.purs\"'')\x0a            (builtins.attrValues inputs))}\x0a        mv output $out\x0a      '';\x0a    };\x0a}\x0a";
  var spagoListPackages = (function () {
      var words = (function () {
          var $62 = Data_String_Common.split("\x0a");
          return function ($63) {
              return $62(Data_String_Common.trim($63));
          };
      })();
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("getting packages.."))(function () {
          return Control_Bind.bind(Effect_Aff.bindAff)(Sunde.spawn({
              cmd: "spago",
              args: [ "ls", "deps", "--json", "--transitive" ],
              stdin: Data_Maybe.Nothing.value
          })(Node_ChildProcess.defaultSpawnOptions))(function (output) {
              if (output.exit instanceof Node_ChildProcess.Normally && output.exit.value0 === 0) {
                  var lines = words(output.stdout);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("got " + (Data_Show.show(Data_Show.showInt)(Data_Array.length(lines)) + " packages from spago ls deps.")))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Core.readPackage)(lines));
                  });
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Failed to list packages:"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)(output.stderr))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create(new Core.SpagoRunError(Data_Show.show(Node_ChildProcess.showExit)(output.exit))));
                  });
              });
          });
      });
  })();
  var replace = function (v) {
      return Data_String_Common.replaceAll(v.from)(v.to);
  };
  var printResult = function (v) {
      if (v instanceof Core.CantFetchLocal) {
          return replace({
              from: "PKGNAME",
              to: v.value0.packageName
          })(replace({
              from: "PATH",
              to: Data_Show.show(Core.showRepo)(v.value0.repo)
          })("\x0a  # PKGNAME is a Local package in PATH\x0a"));
      };
      if (v instanceof Core.Fetched) {
          return replace({
              from: "PKGNAME",
              to: v["value0"]["package"].packageName
          })(replace({
              from: "VERSION",
              to: v["value0"]["package"].version
          })(replace({
              from: "URL",
              to: v.value0.result.url
          })(replace({
              from: "REV",
              to: v.value0.result.rev
          })(replace({
              from: "SHA256",
              to: v.value0.result.sha256
          })("\x0a    \"PKGNAME\" = pkgs.stdenv.mkDerivation {\x0a        name = \"PKGNAME\";\x0a        version = \"VERSION\";\x0a        src = pkgs.fetchgit {\x0a          url = \"URL\";\x0a          rev = \"REV\";\x0a          sha256 = \"SHA256\";\x0a        };\x0a        phases = \"installPhase\";\x0a        installPhase = \"ln -s $src $out\";\x0a      };\x0a")))));
      };
      throw new Error("Failed pattern match at Generate (line 194, column 1 - line 194, column 37): " + [ v.constructor.name ]);
  };
  var printResults = function (xs) {
      var inputs = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(printResult)(xs);
      return replace({
          from: "INPUTS",
          to: inputs
      })(template);
  };
  var mkPrefetchPath = function (cacheDir) {
      return function (v) {
          return cacheDir + ("/" + (v.packageName + ("@" + (v.version + ".json"))));
      };
  };
  var ensureSetup = function (cacheDir) {
      return Control_Alt.alt(Effect_Aff.altAff)(Node_FS_Aff.mkdir(cacheDir))(Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit));
  };
  var concatMapM = function (dictMonad) {
      return function (f) {
          return function (xs) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Array.concat)(Data_Traversable.traverse(Data_Traversable.traversableArray)(dictMonad.Applicative0())(f)(xs));
          };
      };
  };
  var chunk = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return [  ];
          };
          if (v < 1) {
              return [ v1 ];
          };
          if (Data_Boolean.otherwise) {
              var chunk$prime = function ($copy_acc) {
                  return function ($copy_v2) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v2) {
                          if (v2.length === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          $tco_var_acc = Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc)([ Data_Array.take(v)(v2) ]);
                          $copy_v2 = Data_Array.drop(v)(v2);
                          return;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              return chunk$prime([  ])(v1);
          };
          throw new Error("Failed pattern match at Generate (line 231, column 1 - line 231, column 53): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var brokenRepoSHA = "0sjjj9z1dhilhpc8pq4154czrb79z9cm044jvn75kxcjv6v5l2m5";
  var fetchPackage = function (v) {
      if (v.repo instanceof Core.Local) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Applicative.pure(Data_Either.applicativeEither)(new Core.CantFetchLocal(v)));
      };
      if (v.repo instanceof Core.Remote) {
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Effect_Aff.monadAff)(Sunde.spawn({
              cmd: "nix-prefetch-git",
              args: [ v.repo.value0, "--rev", v.version, "--quiet" ],
              stdin: Data_Maybe.Nothing.value
          })(Node_ChildProcess.defaultSpawnOptions)))(function (output) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))((function () {
                  if (output.exit instanceof Node_ChildProcess.Normally && output.exit.value0 === 0) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(output.stdout);
                  };
                  return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Core.NixPrefetchGitFailed(Data_Show.show(Node_ChildProcess.showExit)(output.exit)));
              })())(function (json) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))((function () {
                      var v1 = Simple_JSON.readJSON(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                          return "rev";
                      }))(Core.readForeignRevision)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                          return "sha256";
                      }))(Core.readForeignSHA)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                          return "url";
                      }))(Core.readForeignURL)(Simple_JSON.readFieldsNil)()())()())()()))(json);
                      if (v1 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(v1.value0);
                      };
                      if (v1 instanceof Data_Either.Left) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Core.NixPrefetchGitOutputDeformed(Simple_JSON_Utils.printMultipleErrors(v1.value0)));
                      };
                      throw new Error("Failed pattern match at Generate (line 81, column 37 - line 83, column 88): " + [ v1.constructor.name ]);
                  })())(function (v1) {
                      var $45 = Data_Eq.eq(Core.eqSHA)(v1.sha256)(brokenRepoSHA);
                      if ($45) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Core.MissingRevOrRepoResult(Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "packageName";
                          }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "repo";
                          }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "version";
                          }))(Data_Show.showRecordFieldsNil)(Core.showVersion))(Core.showRepo))(Data_Show.showString)))(v)));
                      };
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(new Core.Fetched({
                          "package": v,
                          result: v1
                      }));
                  });
              });
          }));
      };
      throw new Error("Failed pattern match at Generate (line 66, column 1 - line 66, column 60): " + [ v.constructor.name ]);
  };
  var ensureFetchPackage = function (cacheDir) {
      return function (p) {
          var path = mkPrefetchPath(cacheDir)(p);
          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(path))(function (exists) {
              if (exists) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("already prefetched " + p.packageName))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(path))(function (contents) {
                          var v = Simple_JSON.readJSON(Core.readForeignFetchResult)(contents);
                          if (v instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(v.value0));
                          };
                          if (v instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.Left.create(new Core.FileContentsCorrupted(p, path, Simple_JSON_Utils.printMultipleErrors(v.value0))));
                          };
                          throw new Error("Failed pattern match at Generate (line 96, column 7 - line 98, column 85): " + [ v.constructor.name ]);
                      });
                  });
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("fetching " + p.packageName))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(fetchPackage(p))(function (result) {
                      if (result instanceof Data_Either.Left) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(result.value0));
                      };
                      if (result instanceof Data_Either.Right) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(path)(Simple_JSON.writeJSON(Core.writeForeignFetchResult)(result.value0)))(function () {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(result);
                          });
                      };
                      throw new Error("Failed pattern match at Generate (line 102, column 7 - line 106, column 22): " + [ result.constructor.name ]);
                  });
              });
          });
      };
  };
  var generate = function (cacheDir) {
      return function (maxProcs) {
          var toResult = function (xs) {
              return Data_Validation_Semigroup.toEither(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Validation_Semigroup.applicativeV(Data_Semigroup.semigroupArray))(Data_Validation_Semigroup.V)(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Control_Applicative.pure(Control_Applicative.applicativeArray)))(xs)));
          };
          var exitOnError = function (aff) {
              return Control_Bind.bind(Effect_Aff.bindAff)(aff)(function (result) {
                  if (result instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(result.value0);
                  };
                  if (result instanceof Data_Either.Left) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)(Data_Show.show(Core.showMyError)(result.value0)))(function () {
                          return Core.exit(1);
                      });
                  };
                  throw new Error("Failed pattern match at Generate (line 261, column 7 - line 265, column 17): " + [ result.constructor.name ]);
              });
          };
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(ensureSetup(cacheDir))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(exitOnError(spagoListPackages))(function (packages) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(toResult)(concatMapM(Effect_Aff.monadAff)(Control_Parallel.parTraverse(Effect_Aff.parallelAff)(Data_Traversable.traversableArray)(ensureFetchPackage(cacheDir)))(chunk(maxProcs)(packages))))(function (fetches) {
                      if (fetches instanceof Data_Either.Left) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("errors from fetching packages:"))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.traverse_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)((function () {
                                  var $64 = Effect_Class_Console.error(Effect_Aff.monadEffectAff);
                                  var $65 = Data_Show.show(Core.showMyError);
                                  return function ($66) {
                                      return $64($65($66));
                                  };
                              })())(fetches.value0))(function () {
                                  return Core.exit(1);
                              });
                          });
                      };
                      if (fetches instanceof Data_Either.Right) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(Core.spagoPackagesNix)(printResults(fetches.value0)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("wrote " + Core.spagoPackagesNix))(function () {
                                  return Core.exit(0);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Generate (line 244, column 3 - line 252, column 13): " + [ fetches.constructor.name ]);
                  });
              });
          });
      };
  };
  exports["generate"] = generate;
})(PS);
(function(exports) {
  exports.argv = process.argv;
})(PS["Main"] = PS["Main"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Types"] = $PS["Options.Applicative.Types"] || {};
  var exports = $PS["Options.Applicative.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];                                                  
  var ParserFailure = function (x) {
      return x;
  };
  var Internal = (function () {
      function Internal() {

      };
      Internal.value = new Internal();
      return Internal;
  })();
  var Hidden = (function () {
      function Hidden() {

      };
      Hidden.value = new Hidden();
      return Hidden;
  })();
  var Visible = (function () {
      function Visible() {

      };
      Visible.value = new Visible();
      return Visible;
  })();
  var Leaf = (function () {
      function Leaf(value0) {
          this.value0 = value0;
      };
      Leaf.create = function (value0) {
          return new Leaf(value0);
      };
      return Leaf;
  })();
  var MultNode = (function () {
      function MultNode(value0) {
          this.value0 = value0;
      };
      MultNode.create = function (value0) {
          return new MultNode(value0);
      };
      return MultNode;
  })();
  var AltNode = (function () {
      function AltNode(value0) {
          this.value0 = value0;
      };
      AltNode.create = function (value0) {
          return new AltNode(value0);
      };
      return AltNode;
  })();
  var OptProperties = function (x) {
      return x;
  };
  var OptShort = (function () {
      function OptShort(value0) {
          this.value0 = value0;
      };
      OptShort.create = function (value0) {
          return new OptShort(value0);
      };
      return OptShort;
  })();
  var OptLong = (function () {
      function OptLong(value0) {
          this.value0 = value0;
      };
      OptLong.create = function (value0) {
          return new OptLong(value0);
      };
      return OptLong;
  })();
  var OptHelpInfo = function (x) {
      return x;
  };
  var CmdStart = (function () {
      function CmdStart() {

      };
      CmdStart.value = new CmdStart();
      return CmdStart;
  })();
  var CmdCont = (function () {
      function CmdCont() {

      };
      CmdCont.value = new CmdCont();
      return CmdCont;
  })();
  var CompletionResult = function (x) {
      return x;
  };
  var Success = (function () {
      function Success(value0) {
          this.value0 = value0;
      };
      Success.create = function (value0) {
          return new Success(value0);
      };
      return Success;
  })();
  var Failure = (function () {
      function Failure(value0) {
          this.value0 = value0;
      };
      Failure.create = function (value0) {
          return new Failure(value0);
      };
      return Failure;
  })();
  var CompletionInvoked = (function () {
      function CompletionInvoked(value0) {
          this.value0 = value0;
      };
      CompletionInvoked.create = function (value0) {
          return new CompletionInvoked(value0);
      };
      return CompletionInvoked;
  })();
  var Completer = function (x) {
      return x;
  };
  var Backtrack = (function () {
      function Backtrack() {

      };
      Backtrack.value = new Backtrack();
      return Backtrack;
  })();
  var NoBacktrack = (function () {
      function NoBacktrack() {

      };
      NoBacktrack.value = new NoBacktrack();
      return NoBacktrack;
  })();
  var SubparserInline = (function () {
      function SubparserInline() {

      };
      SubparserInline.value = new SubparserInline();
      return SubparserInline;
  })();
  var ParserPrefs = function (x) {
      return x;
  };
  var Intersperse = (function () {
      function Intersperse() {

      };
      Intersperse.value = new Intersperse();
      return Intersperse;
  })();
  var NoIntersperse = (function () {
      function NoIntersperse() {

      };
      NoIntersperse.value = new NoIntersperse();
      return NoIntersperse;
  })();
  var AllPositionals = (function () {
      function AllPositionals() {

      };
      AllPositionals.value = new AllPositionals();
      return AllPositionals;
  })();
  var ForwardOptions = (function () {
      function ForwardOptions() {

      };
      ForwardOptions.value = new ForwardOptions();
      return ForwardOptions;
  })();
  var ParserInfo = function (x) {
      return x;
  };
  var NilP = (function () {
      function NilP(value0) {
          this.value0 = value0;
      };
      NilP.create = function (value0) {
          return new NilP(value0);
      };
      return NilP;
  })();
  var OptP = (function () {
      function OptP(value0) {
          this.value0 = value0;
      };
      OptP.create = function (value0) {
          return new OptP(value0);
      };
      return OptP;
  })();
  var MultP = (function () {
      function MultP(value0) {
          this.value0 = value0;
      };
      MultP.create = function (value0) {
          return new MultP(value0);
      };
      return MultP;
  })();
  var AltP = (function () {
      function AltP(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AltP.create = function (value0) {
          return function (value1) {
              return new AltP(value0, value1);
          };
      };
      return AltP;
  })();
  var BindP = (function () {
      function BindP(value0) {
          this.value0 = value0;
      };
      BindP.create = function (value0) {
          return new BindP(value0);
      };
      return BindP;
  })();
  var Option = function (x) {
      return x;
  };
  var OptReader = (function () {
      function OptReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OptReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OptReader(value0, value1, value2);
              };
          };
      };
      return OptReader;
  })();
  var FlagReader = (function () {
      function FlagReader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlagReader.create = function (value0) {
          return function (value1) {
              return new FlagReader(value0, value1);
          };
      };
      return FlagReader;
  })();
  var ArgReader = (function () {
      function ArgReader(value0) {
          this.value0 = value0;
      };
      ArgReader.create = function (value0) {
          return new ArgReader(value0);
      };
      return ArgReader;
  })();
  var CmdReader = (function () {
      function CmdReader(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CmdReader.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CmdReader(value0, value1, value2);
              };
          };
      };
      return CmdReader;
  })();
  var CReader = function (x) {
      return x;
  };
  var ReadM = function (x) {
      return x;
  };
  var ErrorMsg = (function () {
      function ErrorMsg(value0) {
          this.value0 = value0;
      };
      ErrorMsg.create = function (value0) {
          return new ErrorMsg(value0);
      };
      return ErrorMsg;
  })();
  var InfoMsg = (function () {
      function InfoMsg(value0) {
          this.value0 = value0;
      };
      InfoMsg.create = function (value0) {
          return new InfoMsg(value0);
      };
      return InfoMsg;
  })();
  var ShowHelpText = (function () {
      function ShowHelpText() {

      };
      ShowHelpText.value = new ShowHelpText();
      return ShowHelpText;
  })();
  var UnknownError = (function () {
      function UnknownError() {

      };
      UnknownError.value = new UnknownError();
      return UnknownError;
  })();
  var MissingError = (function () {
      function MissingError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MissingError.create = function (value0) {
          return function (value1) {
              return new MissingError(value0, value1);
          };
      };
      return MissingError;
  })();
  var ExpectsArgError = (function () {
      function ExpectsArgError(value0) {
          this.value0 = value0;
      };
      ExpectsArgError.create = function (value0) {
          return new ExpectsArgError(value0);
      };
      return ExpectsArgError;
  })();
  var UnexpectedError = (function () {
      function UnexpectedError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UnexpectedError.create = function (value0) {
          return function (value1) {
              return new UnexpectedError(value0, value1);
          };
      };
      return UnexpectedError;
  })();
  var SomeParser = (function () {
      function SomeParser(value0) {
          this.value0 = value0;
      };
      SomeParser.create = function (value0) {
          return new SomeParser(value0);
      };
      return SomeParser;
  })();
  var MultPE = (function () {
      function MultPE(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MultPE.create = function (value0) {
          return function (value1) {
              return new MultPE(value0, value1);
          };
      };
      return MultPE;
  })();
  var Context = (function () {
      function Context(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Context.create = function (value0) {
          return function (value1) {
              return new Context(value0, value1);
          };
      };
      return Context;
  })();
  var ParserM = function (x) {
      return x;
  };
  var readerAsk = Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity)));
  var readerAbort = (function () {
      var $278 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Control_Monad_Except_Trans.monadExceptT(Data_Identity.monadIdentity));
      var $279 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($280) {
          return ReadM($278($279($280)));
      };
  })();
  var readerError = function ($281) {
      return readerAbort(ErrorMsg.create($281));
  };
  var readMNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ReadM);
  var readMFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity)))(f)(v);
      };
  });
  var readMApply = new Control_Apply.Apply(function () {
      return readMFunctor;
  }, function (v) {
      return function (v1) {
          return ReadM(Control_Apply.apply(Control_Monad_Reader_Trans.applyReaderT(Control_Monad_Except_Trans.applyExceptT(Data_Identity.monadIdentity)))(v)(v1));
      };
  });
  var readMBind = new Control_Bind.Bind(function () {
      return readMApply;
  }, function (v) {
      return function (f) {
          return ReadM(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity)))(v)((function () {
              var $282 = Data_Newtype.un(readMNewtype)(ReadM);
              return function ($283) {
                  return $282(f($283));
              };
          })()));
      };
  });
  var readMApplicative = new Control_Applicative.Applicative(function () {
      return readMApply;
  }, (function () {
      var $284 = Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
      return function ($285) {
          return ReadM($284($285));
      };
  })());
  var parserPrefsNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserPrefs);
  var parserMMonadRec = Control_Monad_Free.freeMonadRec;
  var parserMBind = Control_Monad_Free.freeBind;  
  var parserMApplicative = Control_Monad_Free.freeApplicative;
  var parserInfoNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserInfo);
  var parseErrorSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof UnknownError) {
              return v;
          };
          return v1;
      };
  });
  var parseErrorMonoid = new Data_Monoid.Monoid(function () {
      return parseErrorSemigroup;
  }, UnknownError.value);
  var optionNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Option);
  var optVisibilityEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Internal && y instanceof Internal) {
              return true;
          };
          if (x instanceof Hidden && y instanceof Hidden) {
              return true;
          };
          if (x instanceof Visible && y instanceof Visible) {
              return true;
          };
          return false;
      };
  });
  var optVisibilityOrd = new Data_Ord.Ord(function () {
      return optVisibilityEq;
  }, function (x) {
      return function (y) {
          if (x instanceof Internal && y instanceof Internal) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Internal) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Internal) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Hidden && y instanceof Hidden) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof Hidden) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Hidden) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Visible && y instanceof Visible) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 166, column 1 - line 166, column 54): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var optPropertiesNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptProperties);
  var optShowDefault = (function () {
      var $286 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $287 = Data_Newtype.un(optionNewtype)(Option);
      return function ($288) {
          return (function (v) {
              return v.propShowDefault;
          })($286((function (v) {
              return v.optProps;
          })($287($288))));
      };
  })();
  var optVisibility = (function () {
      var $289 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $290 = Data_Newtype.un(optionNewtype)(Option);
      return function ($291) {
          return (function (v) {
              return v.propVisibility;
          })($289((function (v) {
              return v.optProps;
          })($290($291))));
      };
  })();  
  var optNameEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof OptShort && y instanceof OptShort) {
              return x.value0 === y.value0;
          };
          if (x instanceof OptLong && y instanceof OptLong) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var optNameOrd = new Data_Ord.Ord(function () {
      return optNameEq;
  }, function (x) {
      return function (y) {
          if (x instanceof OptShort && y instanceof OptShort) {
              return Data_Ord.compare(Data_Ord.ordChar)(x.value0)(y.value0);
          };
          if (x instanceof OptShort) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof OptShort) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof OptLong && y instanceof OptLong) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 154, column 1 - line 154, column 42): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var optMetaVar = (function () {
      var $292 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $293 = Data_Newtype.un(optionNewtype)(Option);
      return function ($294) {
          return (function (v) {
              return v.propMetaVar;
          })($292((function (v) {
              return v.optProps;
          })($293($294))));
      };
  })();
  var optHelp = (function () {
      var $295 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $296 = Data_Newtype.un(optionNewtype)(Option);
      return function ($297) {
          return (function (v) {
              return v.propHelp;
          })($295((function (v) {
              return v.optProps;
          })($296($297))));
      };
  })();
  var optDescMod = (function () {
      var $298 = Data_Newtype.un(optPropertiesNewtype)(OptProperties);
      var $299 = Data_Newtype.un(optionNewtype)(Option);
      return function ($300) {
          return (function (v) {
              return v.propDescMod;
          })($298((function (v) {
              return v.optProps;
          })($299($300))));
      };
  })();
  var oneM = function ($301) {
      return ParserM(Control_Monad_Free.liftF($301));
  };
  var newtypeParserFailure = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserFailure);
  var newtypeOptHelpInfo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptHelpInfo);
  var newtypeCompletionResult = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CompletionResult);
  var newtypeCompleter = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Completer);
  var newtypeCReader = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CReader);
  var fromM = function (v) {
      return new BindP(v);
  };
  var completerSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Completer(function (s) {
              return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(v(s)))(v1(s));
          });
      };
  });
  var completerMonoid = new Data_Monoid.Monoid(function () {
      return completerSemigroup;
  }, Completer(function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
  }));
  var cReaderFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over(newtypeCReader)(newtypeCReader)(CReader)(function (r) {
          return {
              crReader: Data_Functor.map(readMFunctor)(f)(r.crReader),
              crCompleter: r.crCompleter
          };
      });
  });
  var parserInfoFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over(parserInfoNewtype)(parserInfoNewtype)(ParserInfo)(function (i) {
          return {
              infoParser: Data_Functor.map(parserFunctor)(f)(i.infoParser),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      });
  });
  var parserFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof NilP) {
              return new NilP(Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value0));
          };
          if (v instanceof OptP) {
              return new OptP(Data_Functor.map(optionFunctor)(f)(v.value0));
          };
          if (v instanceof MultP) {
              return Data_Exists.runExists(function (v1) {
                  return MultP.create(Data_Exists.mkExists(new MultPE(Data_Functor.map(parserFunctor)(function (v2) {
                      return function ($302) {
                          return f(v2($302));
                      };
                  })(v1.value0), v1.value1)));
              })(v.value0);
          };
          if (v instanceof AltP) {
              return new AltP(Data_Functor.map(parserFunctor)(f)(v.value0), Data_Functor.map(parserFunctor)(f)(v.value1));
          };
          if (v instanceof BindP) {
              return BindP.create(Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 331, column 1 - line 336, column 36): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var optionFunctor = new Data_Functor.Functor(function (f) {
      return Data_Newtype.over(optionNewtype)(optionNewtype)(Option)(function (o) {
          return {
              optMain: Data_Functor.map(optReaderFunctor)(f)(o.optMain),
              optProps: o.optProps
          };
      });
  });
  var optReaderFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof OptReader) {
              return new OptReader(v.value0, Data_Functor.map(cReaderFunctor)(f)(v.value1), v.value2);
          };
          if (v instanceof FlagReader) {
              return new FlagReader(v.value0, f(v.value1));
          };
          if (v instanceof ArgReader) {
              return new ArgReader(Data_Functor.map(cReaderFunctor)(f)(v.value0));
          };
          if (v instanceof CmdReader) {
              return new CmdReader(v.value0, v.value1, (function () {
                  var $303 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(parserInfoFunctor)(f));
                  return function ($304) {
                      return $303(v.value2($304));
                  };
              })());
          };
          throw new Error("Failed pattern match at Options.Applicative.Types (line 278, column 1 - line 282, column 68): " + [ f.constructor.name, v.constructor.name ]);
      };
  });
  var parserAlt = new Control_Alt.Alt(function () {
      return parserFunctor;
  }, AltP.create);
  var parserPlus = new Control_Plus.Plus(function () {
      return parserAlt;
  }, new NilP(Data_Maybe.Nothing.value));
  var parserApply = new Control_Apply.Apply(function () {
      return parserFunctor;
  }, function (a) {
      return function (b) {
          return new MultP(Data_Exists.mkExists(new MultPE(a, b)));
      };
  });
  var parserApplicative = new Control_Applicative.Applicative(function () {
      return parserApply;
  }, function ($305) {
      return NilP.create(Data_Maybe.Just.create($305));
  });
  var manyM = function (p) {
      var go = function (acc) {
          return Control_Bind.bind(parserMBind)(oneM(Control_Alt.alt(parserAlt)(Data_Functor.map(parserFunctor)(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(parserApplicative)(new Control_Monad_Rec_Class.Done(Data_Unit.unit)))))(function (aa) {
              return Control_Applicative.pure(parserMApplicative)(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v) {
                  return new Data_List_Types.Cons(v, acc);
              })(function (v) {
                  return Data_List.reverse(acc);
              })(aa));
          });
      };
      return Control_Monad_Rec_Class.tailRecM(parserMMonadRec)(go)(Data_List_Types.Nil.value);
  };
  var many = function ($306) {
      return fromM(manyM($306));
  };       
  var argPolicyEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Intersperse && y instanceof Intersperse) {
              return true;
          };
          if (x instanceof NoIntersperse && y instanceof NoIntersperse) {
              return true;
          };
          if (x instanceof AllPositionals && y instanceof AllPositionals) {
              return true;
          };
          if (x instanceof ForwardOptions && y instanceof ForwardOptions) {
              return true;
          };
          return false;
      };
  });
  exports["ErrorMsg"] = ErrorMsg;
  exports["InfoMsg"] = InfoMsg;
  exports["ShowHelpText"] = ShowHelpText;
  exports["UnknownError"] = UnknownError;
  exports["MissingError"] = MissingError;
  exports["ExpectsArgError"] = ExpectsArgError;
  exports["UnexpectedError"] = UnexpectedError;
  exports["ParserInfo"] = ParserInfo;
  exports["ParserPrefs"] = ParserPrefs;
  exports["Option"] = Option;
  exports["OptShort"] = OptShort;
  exports["OptLong"] = OptLong;
  exports["OptReader"] = OptReader;
  exports["FlagReader"] = FlagReader;
  exports["ArgReader"] = ArgReader;
  exports["CmdReader"] = CmdReader;
  exports["OptProperties"] = OptProperties;
  exports["Internal"] = Internal;
  exports["Hidden"] = Hidden;
  exports["Visible"] = Visible;
  exports["Backtrack"] = Backtrack;
  exports["NoBacktrack"] = NoBacktrack;
  exports["SubparserInline"] = SubparserInline;
  exports["ReadM"] = ReadM;
  exports["readerAsk"] = readerAsk;
  exports["readerAbort"] = readerAbort;
  exports["readerError"] = readerError;
  exports["CReader"] = CReader;
  exports["NilP"] = NilP;
  exports["OptP"] = OptP;
  exports["MultP"] = MultP;
  exports["AltP"] = AltP;
  exports["BindP"] = BindP;
  exports["Completer"] = Completer;
  exports["CompletionResult"] = CompletionResult;
  exports["ParserFailure"] = ParserFailure;
  exports["Success"] = Success;
  exports["Failure"] = Failure;
  exports["CompletionInvoked"] = CompletionInvoked;
  exports["Intersperse"] = Intersperse;
  exports["NoIntersperse"] = NoIntersperse;
  exports["AllPositionals"] = AllPositionals;
  exports["ForwardOptions"] = ForwardOptions;
  exports["OptHelpInfo"] = OptHelpInfo;
  exports["Leaf"] = Leaf;
  exports["MultNode"] = MultNode;
  exports["AltNode"] = AltNode;
  exports["SomeParser"] = SomeParser;
  exports["Context"] = Context;
  exports["CmdStart"] = CmdStart;
  exports["CmdCont"] = CmdCont;
  exports["optVisibility"] = optVisibility;
  exports["optMetaVar"] = optMetaVar;
  exports["optHelp"] = optHelp;
  exports["optShowDefault"] = optShowDefault;
  exports["optDescMod"] = optDescMod;
  exports["many"] = many;
  exports["parseErrorMonoid"] = parseErrorMonoid;
  exports["parseErrorSemigroup"] = parseErrorSemigroup;
  exports["parserInfoNewtype"] = parserInfoNewtype;
  exports["parserPrefsNewtype"] = parserPrefsNewtype;
  exports["optNameEq"] = optNameEq;
  exports["optNameOrd"] = optNameOrd;
  exports["optVisibilityEq"] = optVisibilityEq;
  exports["optVisibilityOrd"] = optVisibilityOrd;
  exports["optPropertiesNewtype"] = optPropertiesNewtype;
  exports["optionNewtype"] = optionNewtype;
  exports["readMNewtype"] = readMNewtype;
  exports["readMApplicative"] = readMApplicative;
  exports["readMBind"] = readMBind;
  exports["newtypeCReader"] = newtypeCReader;
  exports["parserFunctor"] = parserFunctor;
  exports["parserApply"] = parserApply;
  exports["parserApplicative"] = parserApplicative;
  exports["parserAlt"] = parserAlt;
  exports["parserPlus"] = parserPlus;
  exports["newtypeCompleter"] = newtypeCompleter;
  exports["completerMonoid"] = completerMonoid;
  exports["newtypeCompletionResult"] = newtypeCompletionResult;
  exports["newtypeParserFailure"] = newtypeParserFailure;
  exports["argPolicyEq"] = argPolicyEq;
  exports["newtypeOptHelpInfo"] = newtypeOptHelpInfo;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Internal"] = $PS["Options.Applicative.Internal"] || {};
  var exports = $PS["Options.Applicative.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader = $PS["Control.Monad.Reader"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_MonadPlus = $PS["Control.MonadPlus"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var TNil = (function () {
      function TNil() {

      };
      TNil.value = new TNil();
      return TNil;
  })();
  var TCons = (function () {
      function TCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TCons.create = function (value0) {
          return function (value1) {
              return new TCons(value0, value1);
          };
      };
      return TCons;
  })();
  var P = function (x) {
      return x;
  };
  var ListT = function (x) {
      return x;
  };
  var NondetT = function (x) {
      return x;
  };
  var ComplParser = (function () {
      function ComplParser(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ComplParser.create = function (value0) {
          return function (value1) {
              return new ComplParser(value0, value1);
          };
      };
      return ComplParser;
  })();
  var ComplOption = (function () {
      function ComplOption(value0) {
          this.value0 = value0;
      };
      ComplOption.create = function (value0) {
          return new ComplOption(value0);
      };
      return ComplOption;
  })();
  var ComplResult = (function () {
      function ComplResult(value0) {
          this.value0 = value0;
      };
      ComplResult.create = function (value0) {
          return new ComplResult(value0);
      };
      return ComplResult;
  })();
  var Completion = function (x) {
      return x;
  };
  var MonadP = function (MonadPlus0, enterContext, errorP, exitContext, exitP, getPrefs, missingArgP) {
      this.MonadPlus0 = MonadPlus0;
      this.enterContext = enterContext;
      this.errorP = errorP;
      this.exitContext = exitContext;
      this.exitP = exitP;
      this.getPrefs = getPrefs;
      this.missingArgP = missingArgP;
  };
  var withReadM = function (f) {
      var f$prime = function (v) {
          if (v instanceof Options_Applicative_Types.ErrorMsg) {
              return new Options_Applicative_Types.ErrorMsg(f(v.value0));
          };
          return v;
      };
      var $138 = Control_Monad_Reader_Trans.mapReaderT(Control_Monad_Except.withExcept(f$prime));
      var $139 = Data_Newtype.un(Options_Applicative_Types.readMNewtype)(Options_Applicative_Types.ReadM);
      return function ($140) {
          return Options_Applicative_Types.ReadM($138($139($140)));
      };
  };
  var stepListT = function (v) {
      return v;
  };
  var runP = function (v) {
      return Control_Monad_Reader.runReader(Data_Function.flip(Control_Monad_State_Trans.runStateT)([  ])(Control_Monad_Except_Trans.runExceptT(v)));
  };
  var runNondetT = function (v) {
      return v;
  };
  var runListT = function (dictMonad) {
      return function (xs) {
          return Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
              if (s instanceof TNil) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
              };
              if (s instanceof TCons) {
                  return Control_Monad.liftM1(dictMonad)(Data_List_Types.Cons.create(s.value0))(runListT(dictMonad)(s.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 215, column 3 - line 217, column 53): " + [ s.constructor.name ]);
          });
      };
  };
  var runCompletion = function (v) {
      return function (prefs) {
          var v1 = Control_Monad_Reader_Trans.runReaderT(Control_Monad_Except_Trans.runExceptT(v))(prefs);
          if (v1 instanceof ComplResult) {
              return Data_Maybe.Nothing.value;
          };
          if (v1 instanceof ComplParser) {
              return Data_Maybe.Just.create(new Data_Either.Left(new Data_Tuple.Tuple(v1.value0, v1.value1)));
          };
          if (v1 instanceof ComplOption) {
              return Data_Maybe.Just.create(new Data_Either.Right(v1.value0));
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 185, column 38 - line 188, column 42): " + [ v1.constructor.name ]);
      };
  };
  var pFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return P(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Data_Identity.functorIdentity))))(f)(v));
      };
  });
  var pApply = new Control_Apply.Apply(function () {
      return pFunctor;
  }, function (v) {
      return function (v1) {
          return P(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
      };
  });
  var pBind = new Control_Bind.Bind(function () {
      return pApply;
  }, function (v) {
      return function (k) {
          return P(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(function (a) {
              var v1 = k(a);
              return v1;
          }));
      };
  });
  var pApplicative = new Control_Applicative.Applicative(function () {
      return pApply;
  }, function (a) {
      return P(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(a));
  });
  var pMonad = new Control_Monad.Monad(function () {
      return pApplicative;
  }, function () {
      return pBind;
  });
  var pAlt = new Control_Alt.Alt(function () {
      return pFunctor;
  }, function (v) {
      return function (v1) {
          return P(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(v)(v1));
      };
  });
  var pPlus = new Control_Plus.Plus(function () {
      return pAlt;
  }, Control_Plus.empty(Control_Monad_Except_Trans.plusExceptT(Options_Applicative_Types.parseErrorMonoid)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
  var pAlternative = new Control_Alternative.Alternative(function () {
      return pApplicative;
  }, function () {
      return pPlus;
  });
  var pMonadZero = new Control_MonadZero.MonadZero(function () {
      return pAlternative;
  }, function () {
      return pMonad;
  });
  var pMonadPlus = new Control_MonadPlus.MonadPlus(function () {
      return pMonadZero;
  });
  var missingArgP = function (dict) {
      return dict.missingArgP;
  };
  var hoistMaybe = function (dictMonadPlus) {
      return Data_Maybe.maybe(Control_Plus.empty(((dictMonadPlus.MonadZero0()).Alternative1()).Plus1()))(Control_Applicative.pure(((dictMonadPlus.MonadZero0()).Alternative1()).Applicative0()));
  };
  var getPrefs = function (dict) {
      return dict.getPrefs;
  };
  var exitP = function (dict) {
      return dict.exitP;
  };
  var exitContext = function (dict) {
      return dict.exitContext;
  };
  var errorP = function (dict) {
      return dict.errorP;
  };
  var hoistEither = function (dictMonadP) {
      return Data_Either.either(errorP(dictMonadP))(Control_Applicative.pure((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()));
  };
  var runReadM = function (dictMonadP) {
      return function (v) {
          return function (s) {
              return hoistEither(dictMonadP)(Control_Monad_Except.runExcept(Control_Monad_Reader_Trans.runReaderT(v)(s)));
          };
      };
  };
  var pMonadP = new MonadP(function () {
      return pMonadPlus;
  }, function (name) {
      return function (pinfo) {
          return P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.cons(new Options_Applicative_Types.Context(name, Data_Exists.mkExists(pinfo))))));
      };
  }, (function () {
      var $141 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))));
      return function ($142) {
          return P($141($142));
      };
  })(), P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Data_Array.drop(1)))), function (i) {
      return function (v) {
          return function (p) {
              var $143 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))))(Options_Applicative_Types.MissingError.create(i)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)))))(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))));
              return function ($144) {
                  return P($143($144));
              };
          };
      };
  }, P(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity)))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Data_Identity.monadIdentity))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Data_Identity.monadIdentity))))), function (e) {
      return function (v) {
          return errorP(pMonadP)(e);
      };
  });
  var enterContext = function (dict) {
      return dict.enterContext;
  };
  var contextNames = function (ns) {
      var go = function (v) {
          return v.value0;
      };
      return Data_Array.reverse(Data_Functor.map(Data_Functor.functorArray)(go)(ns));
  };
  var complResultMonad = new Control_Monad.Monad(function () {
      return complResultApplicative;
  }, function () {
      return complResultBind;
  });
  var complResultFunctor = new Data_Functor.Functor(Control_Monad.liftM1(complResultMonad));
  var complResultBind = new Control_Bind.Bind(function () {
      return complResultApply;
  }, function (m) {
      return function (f) {
          if (m instanceof ComplResult) {
              return f(m.value0);
          };
          if (m instanceof ComplParser) {
              return new ComplParser(m.value0, m.value1);
          };
          if (m instanceof ComplOption) {
              return new ComplOption(m.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Internal (line 143, column 14 - line 146, column 35): " + [ m.constructor.name ]);
      };
  });
  var complResultApply = new Control_Apply.Apply(function () {
      return complResultFunctor;
  }, Control_Monad.ap(complResultMonad));
  var complResultApplicative = new Control_Applicative.Applicative(function () {
      return complResultApply;
  }, ComplResult.create);
  var completionFunctor = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Completion(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(complResultFunctor)))(f)(v));
      };
  });
  var completionAlt = new Control_Alt.Alt(function () {
      return completionFunctor;
  }, function (v) {
      return function (v1) {
          return Completion(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Options_Applicative_Types.parseErrorSemigroup)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
      };
  });
  var completionApply = new Control_Apply.Apply(function () {
      return completionFunctor;
  }, function (v) {
      return function (v1) {
          return Completion(Control_Apply.apply(Control_Monad_Except_Trans.applyExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(v1));
      };
  });
  var completionApplicative = new Control_Applicative.Applicative(function () {
      return completionApply;
  }, function (a) {
      return Completion(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(a));
  });
  var completionBind = new Control_Bind.Bind(function () {
      return completionApply;
  }, function (v) {
      return function (k) {
          return Completion(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)))(v)(function (a) {
              var v1 = k(a);
              return v1;
          }));
      };
  });
  var completionMonad = new Control_Monad.Monad(function () {
      return completionApplicative;
  }, function () {
      return completionBind;
  });
  var completionPlus = new Control_Plus.Plus(function () {
      return completionAlt;
  }, Control_Plus.empty(Control_Monad_Except_Trans.plusExceptT(Options_Applicative_Types.parseErrorMonoid)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))));
  var completionAlternative = new Control_Alternative.Alternative(function () {
      return completionApplicative;
  }, function () {
      return completionPlus;
  });
  var completionMonadZero = new Control_MonadZero.MonadZero(function () {
      return completionAlternative;
  }, function () {
      return completionMonad;
  });
  var completionMonadPlus = new Control_MonadPlus.MonadPlus(function () {
      return completionMonadZero;
  });
  var completionMonadP = new MonadP(function () {
      return completionMonadPlus;
  }, function (v) {
      return function (v1) {
          return Control_Applicative.pure(completionApplicative)(Data_Unit.unit);
      };
  }, (function () {
      var $145 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Reader_Trans.monadReaderT(complResultMonad)));
      return function ($146) {
          return Completion($145($146));
      };
  })(), Control_Applicative.pure(completionApplicative)(Data_Unit.unit), function (v) {
      return function (a) {
          return function (p) {
              return function (v1) {
                  return Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad)(new ComplParser(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p)), a))));
              };
          };
      };
  }, Completion(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(complResultMonad)))), function (v) {
      var $147 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Reader_Trans.monadReaderT(complResultMonad));
      var $148 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(complResultMonad);
      return function ($149) {
          return Completion($147($148(ComplOption.create($149))));
      };
  });
  var bimapTStep = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof TNil) {
                  return TNil.value;
              };
              if (v2 instanceof TCons) {
                  return new TCons(v(v2.value0), v1(v2.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Internal (line 201, column 1 - line 201, column 77): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var listTFunctor = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return ListT(Control_Monad.liftM1(dictMonad)(bimapTStep(f)(Data_Functor.map(listTFunctor(dictMonad))(f)))(stepListT(v)));
          };
      });
  };
  var listTAlt = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return listTFunctor(dictMonad);
      }, function (xs) {
          return function (ys) {
              return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                  if (s instanceof TNil) {
                      return stepListT(ys);
                  };
                  if (s instanceof TCons) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(s.value0, Control_Alt.alt(listTAlt(dictMonad))(s.value1)(ys)));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Internal (line 242, column 5 - line 244, column 49): " + [ s.constructor.name ]);
              }));
          };
      });
  };
  var listTPlus = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return listTAlt(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0())(TNil.value));
  };
  var hoistList = function (dictMonad) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
          return function (xt) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new TCons(x, xt));
          };
      })(Control_Plus.empty(listTPlus(dictMonad)));
  };
  var listTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $150 = Control_Monad.liftM1(dictMonad)(function (v) {
          return new TCons(v, Control_Plus.empty(listTPlus(dictMonad)));
      });
      return function ($151) {
          return ListT($150($151));
      };
  });
  var cut = function (dictMonad) {
      return NondetT(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(true)));
  };
  var nondetTMonadTrans = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      var $152 = Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad));
      var $153 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad);
      return function ($154) {
          return NondetT($152($153($154)));
      };
  });
  var listTMonad = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return listTApplicative(dictMonad);
      }, function () {
          return listTBind(dictMonad);
      });
  };
  var listTBind = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return listTApply(dictMonad);
      }, function (xs) {
          return function (f) {
              return ListT(Control_Bind.bind(dictMonad.Bind1())(stepListT(xs))(function (s) {
                  if (s instanceof TNil) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(TNil.value);
                  };
                  if (s instanceof TCons) {
                      return stepListT(Control_Alt.alt(listTAlt(dictMonad))(f(s.value0))(Control_Bind.bind(listTBind(dictMonad))(s.value1)(f)));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Internal (line 233, column 5 - line 235, column 53): " + [ s.constructor.name ]);
              }));
          };
      });
  };
  var listTApply = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return listTFunctor(dictMonad);
      }, Control_Monad.ap(listTMonad(dictMonad)));
  };
  var listTApplicative = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return listTApply(dictMonad);
      }, (function () {
          var $155 = hoistList(dictMonad);
          var $156 = Control_Applicative.pure(Control_Applicative.applicativeArray);
          return function ($157) {
              return $155($156($157));
          };
      })());
  };
  var listTAlternative = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return listTApplicative(dictMonad);
      }, function () {
          return listTPlus(dictMonad);
      });
  };
  var listTMonadZero = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return listTAlternative(dictMonad);
      }, function () {
          return listTMonad(dictMonad);
      });
  };
  var nondetTAltOp = function (dictMonad) {
      return function (m1) {
          return function (m2) {
              return NondetT(Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(runNondetT(m1))(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_Trans_Class.lift(listTMonadTrans)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (s) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_MonadZero.guard(listTMonadZero(Control_Monad_State_Trans.monadStateT(dictMonad)))(!s))(function () {
                      return runNondetT(m2);
                  });
              })));
          };
      };
  };
  var nondetTFunctor = function (dictMonad) {
      return new Data_Functor.Functor(function (f) {
          var $158 = Data_Functor.map(listTFunctor(Control_Monad_State_Trans.monadStateT(dictMonad)))(f);
          return function ($159) {
              return NondetT($158(runNondetT($159)));
          };
      });
  };
  var nondetTAlt = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return nondetTFunctor(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(listTAlt(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
          };
      });
  };
  var nondetTPlus = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return nondetTAlt(dictMonad);
      }, Control_Plus.empty(listTPlus(Control_Monad_State_Trans.monadStateT(dictMonad))));
  };
  var nondetTApply = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return nondetTFunctor(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(listTApply(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(v1);
          };
      });
  };
  var nondetTApplicative = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return nondetTApply(dictMonad);
      }, (function () {
          var $160 = Control_Applicative.pure(listTApplicative(Control_Monad_State_Trans.monadStateT(dictMonad)));
          return function ($161) {
              return NondetT($160($161));
          };
      })());
  };
  var nondetTBind = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return nondetTApply(dictMonad);
      }, function (v) {
          return function (f) {
              return NondetT(Control_Bind.bind(listTBind(Control_Monad_State_Trans.monadStateT(dictMonad)))(v)(function ($162) {
                  return runNondetT(f($162));
              }));
          };
      });
  };
  var takeListT = function (dictMonad) {
      return function (v) {
          if (v === 0) {
              return Data_Function["const"](Control_Plus.empty(listTPlus(dictMonad)));
          };
          var $163 = Control_Monad.liftM1(dictMonad)(bimapTStep(Control_Category.identity(Control_Category.categoryFn))(takeListT(dictMonad)(v - 1 | 0)));
          return function ($164) {
              return ListT($163(stepListT($164)));
          };
      };
  };
  var disamb = function (dictMonad) {
      return function (allow_amb) {
          return function (xs) {
              return Control_Bind.bind(dictMonad.Bind1())((function (v) {
                  return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(v)(false);
              })(runListT(Control_Monad_State_Trans.monadStateT(dictMonad))(takeListT(Control_Monad_State_Trans.monadStateT(dictMonad))((function () {
                  if (allow_amb) {
                      return 1;
                  };
                  return 2;
              })())(runNondetT(xs)))))(function (xs$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                      if (xs$prime instanceof Data_List_Types.Cons && xs$prime.value1 instanceof Data_List_Types.Nil) {
                          return new Data_Maybe.Just(xs$prime.value0);
                      };
                      return Data_Maybe.Nothing.value;
                  })());
              });
          };
      };
  };
  exports["enterContext"] = enterContext;
  exports["exitContext"] = exitContext;
  exports["getPrefs"] = getPrefs;
  exports["missingArgP"] = missingArgP;
  exports["errorP"] = errorP;
  exports["exitP"] = exitP;
  exports["hoistMaybe"] = hoistMaybe;
  exports["runReadM"] = runReadM;
  exports["withReadM"] = withReadM;
  exports["runP"] = runP;
  exports["runCompletion"] = runCompletion;
  exports["contextNames"] = contextNames;
  exports["cut"] = cut;
  exports["nondetTAltOp"] = nondetTAltOp;
  exports["disamb"] = disamb;
  exports["pMonadP"] = pMonadP;
  exports["completionMonadP"] = completionMonadP;
  exports["nondetTFunctor"] = nondetTFunctor;
  exports["nondetTApplicative"] = nondetTApplicative;
  exports["nondetTBind"] = nondetTBind;
  exports["nondetTAlt"] = nondetTAlt;
  exports["nondetTPlus"] = nondetTPlus;
  exports["nondetTMonadTrans"] = nondetTMonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Internal.Utils"] = $PS["Options.Applicative.Internal.Utils"] || {};
  var exports = $PS["Options.Applicative.Internal.Utils"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var whitespaceRegex = (function () {
      var v = Data_String_Regex.regex("\\s+")(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Partial_Unsafe.unsafeCrashWith("whitespaceRegex: `\\s+` seems to be invlaid, err: " + v.value0);
      };
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Options.Applicative.Internal.Utils (line 39, column 19 - line 41, column 15): " + [ v.constructor.name ]);
  })();
  var words = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Regex.split(whitespaceRegex)(v);
  };
  var unWords = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(" ");
  };
  var unLines = function (dictFoldable) {
      return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)("\x0a");
  };
  var startsWith = function (p) {
      return function (s) {
          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodePoints.indexOf(p)(s))(new Data_Maybe.Just(0));
      };
  };
  var lines = function (v) {
      if (v === "") {
          return [  ];
      };
      return Data_String_Common.split("\x0a")(v);
  };
  var apApplyFlipped = function (dictApply) {
      return Control_Apply.lift2(dictApply)(Data_Function.applyFlipped);
  };
  exports["unLines"] = unLines;
  exports["unWords"] = unWords;
  exports["lines"] = lines;
  exports["words"] = words;
  exports["startsWith"] = startsWith;
  exports["apApplyFlipped"] = apApplyFlipped;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Common"] = $PS["Options.Applicative.Common"] || {};
  var exports = $PS["Options.Applicative.Common"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free = $PS["Control.Monad.Free"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];                
  var OptWord = (function () {
      function OptWord(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OptWord.create = function (value0) {
          return function (value1) {
              return new OptWord(value0, value1);
          };
      };
      return OptWord;
  })();
  var simplify = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return new Options_Applicative_Types.Leaf(v.value0);
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          var remove_mult = function (v1) {
              if (v1 instanceof Options_Applicative_Types.MultNode) {
                  return v1.value0;
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($222) {
              return remove_mult(simplify($222));
          });
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.MultNode(v1);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var remove_alt = function (v1) {
              if (v1 instanceof Options_Applicative_Types.AltNode) {
                  return v1.value0;
              };
              if (v1 instanceof Options_Applicative_Types.MultNode && v1.value0.length === 0) {
                  return [  ];
              };
              return [ v1 ];
          };
          var v1 = Control_Bind.bind(Control_Bind.bindArray)(v.value0)(function ($223) {
              return remove_alt(simplify($223));
          });
          if (v1.length === 0) {
              return new Options_Applicative_Types.MultNode([  ]);
          };
          if (v1.length === 1) {
              return v1[0];
          };
          return new Options_Applicative_Types.AltNode(v1);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 279, column 1 - line 279, column 45): " + [ v.constructor.name ]);
  };
  var showOption = function (v) {
      if (v instanceof Options_Applicative_Types.OptLong) {
          return "--" + v.value0;
      };
      if (v instanceof Options_Applicative_Types.OptShort) {
          return Data_String_CodeUnits.fromCharArray([ "-", v.value0 ]);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 42, column 1 - line 42, column 32): " + [ v.constructor.name ]);
  };
  var parseWord = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Types.Cons && (v.value0 === "-" && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 === "-"))) {
              return Data_Maybe.Just.create((function () {
                  var v1 = (function () {
                      var v2 = Data_List.span(function (v3) {
                          return v3 !== "=";
                      })(v.value1.value1);
                      if (v2.rest instanceof Data_List_Types.Nil) {
                          return new Data_Tuple.Tuple(v.value1.value1, Data_Maybe.Nothing.value);
                      };
                      if (v2.rest instanceof Data_List_Types.Cons) {
                          return new Data_Tuple.Tuple(v2.init, new Data_Maybe.Just(v2.rest.value1));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 106, column 23 - line 108, column 70): " + [ v2.constructor.name ]);
                  })();
                  return new OptWord(new Options_Applicative_Types.OptLong(Data_String_CodeUnits.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)(v1.value0))), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                      var $224 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                      return function ($225) {
                          return Data_String_CodeUnits.fromCharArray($224($225));
                      };
                  })())(v1.value1));
              })());
          };
          if (v instanceof Data_List_Types.Cons && v.value0 === "-") {
              if (v.value1 instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v.value1 instanceof Data_List_Types.Cons) {
                  return Data_Maybe.Just.create((function () {
                      var arg = Data_Functor.voidRight(Data_Maybe.functorMaybe)(v.value1.value1)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(!Data_List["null"](v.value1.value1)));
                      return new OptWord(new Options_Applicative_Types.OptShort(v.value1.value0), Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $226 = Data_Array.fromFoldable(Data_List_Types.foldableList);
                          return function ($227) {
                              return Data_String_CodeUnits.fromCharArray($226($227));
                          };
                      })())(arg));
                  })());
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 110, column 25 - line 114, column 79): " + [ v.value1.constructor.name ]);
          };
          return Data_Maybe.Nothing.value;
      };
      var $228 = Data_List.fromFoldable(Data_Foldable.foldableArray);
      return function ($229) {
          return go($228(Data_String_CodeUnits.toCharArray($229)));
      };
  })();
  var parseError = function (dictMonadP) {
      return function (arg) {
          return function (p) {
              return Options_Applicative_Internal.errorP(dictMonadP)(Options_Applicative_Types.UnexpectedError.create(arg)(Options_Applicative_Types.SomeParser.create(Data_Exists.mkExists(p))));
          };
      };
  };
  var optionNames = function (v) {
      if (v instanceof Options_Applicative_Types.OptReader) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.FlagReader) {
          return v.value0;
      };
      return [  ];
  };
  var liftOpt = Options_Applicative_Types.OptP.create;
  var isOptionPrefix = function (v) {
      return function (v1) {
          if (v instanceof Options_Applicative_Types.OptShort && v1 instanceof Options_Applicative_Types.OptShort) {
              return v.value0 === v1.value0;
          };
          if (v instanceof Options_Applicative_Types.OptLong && v1 instanceof Options_Applicative_Types.OptLong) {
              return Options_Applicative_Internal_Utils.startsWith(v.value0)(v1.value0);
          };
          return false;
      };
  };
  var optMatches = function (dictMonadP) {
      return function (disambiguate) {
          return function (opt) {
              return function (v) {
                  var is_short = function (v1) {
                      if (v1 instanceof Options_Applicative_Types.OptShort) {
                          return true;
                      };
                      if (v1 instanceof Options_Applicative_Types.OptLong) {
                          return false;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 89, column 5 - line 89, column 33): " + [ v1.constructor.name ]);
                  };
                  var has_name = function (a) {
                      if (disambiguate) {
                          return Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isOptionPrefix(a));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Foldable.elem(Data_Foldable.foldableArray)(Options_Applicative_Types.optNameEq)(a);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 92, column 5 - line 94, column 27): " + [ a.constructor.name ]);
                  };
                  var errorFor = function (name) {
                      return function (msg) {
                          return "option " + (showOption(name) + (": " + msg));
                      };
                  };
                  if (opt instanceof Options_Applicative_Types.OptReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Data_Maybe.Just.create(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(function (args) {
                              var missing_arg = Options_Applicative_Internal.missingArgP(dictMonadP)(opt.value2(showOption(v.value0)))((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(opt.value1)).crCompleter);
                              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))((function () {
                                  var v1 = Data_Maybe.maybe(args)(function (v2) {
                                      return new Data_List_Types.Cons(v2, args);
                                  })(v.value1);
                                  if (v1 instanceof Data_List_Types.Nil) {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(missing_arg);
                                  };
                                  if (v1 instanceof Data_List_Types.Cons) {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(new Data_Tuple.Tuple(v1.value0, v1.value1));
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 67, column 27 - line 69, column 56): " + [ v1.constructor.name ]);
                              })())(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(v1.value1))(function () {
                                      return Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)(Options_Applicative_Internal.withReadM(errorFor(v.value0))((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(opt.value1)).crReader))(v1.value0));
                                  });
                              });
                          }));
                      });
                  };
                  if (opt instanceof Options_Applicative_Types.FlagReader) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(has_name(v.value0)(opt.value0)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(is_short(v.value0) || Data_Maybe.isNothing(v.value1)))(function () {
                              return Data_Maybe.Just.create(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(function (args) {
                                  var val$prime = Data_Functor.map(Data_Maybe.functorMaybe)(function ($230) {
                                      return (function (s) {
                                          return Data_Array.cons("-")(s);
                                      })(Data_String_CodeUnits.toCharArray($230));
                                  })(v.value1);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Data_Maybe.maybe(args)((function () {
                                      var $231 = Data_Function.flip(Data_List_Types.Cons.create)(args);
                                      return function ($232) {
                                          return $231(Data_String_CodeUnits.fromCharArray($232));
                                      };
                                  })())(val$prime)))(function () {
                                      return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(opt.value1);
                                  });
                              }));
                          });
                      });
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var isArg = function (v) {
      if (v instanceof Options_Applicative_Types.ArgReader) {
          return true;
      };
      return false;
  };
  var evalParser = function (v) {
      if (v instanceof Options_Applicative_Types.NilP) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.OptP) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Options_Applicative_Types.MultP) {
          return Data_Exists.runExists(function (v1) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(evalParser(v1.value0))(evalParser(v1.value1));
          })(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltP) {
          return Control_Alt.alt(Data_Maybe.altMaybe)(evalParser(v.value0))(evalParser(v.value1));
      };
      if (v instanceof Options_Applicative_Types.BindP) {
          return Control_Monad_Free["resume'"](function (p) {
              return function (k) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(evalParser(p))(function ($233) {
                      return evalParser(Options_Applicative_Types.BindP.create(k($233)));
                  });
              };
          })(Data_Maybe.Just.create)(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Common (line 219, column 1 - line 219, column 44): " + [ v.constructor.name ]);
  };
  var searchParser = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Options_Applicative_Types.NilP) {
                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
              };
              if (v1 instanceof Options_Applicative_Types.OptP) {
                  return v(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.MultP) {
                  return Data_Exists.runExists(function (v2) {
                      var b = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value1))(function (p2$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(v2.value0)(p2$prime);
                      });
                      var a = Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(v2.value0))(function (p1$prime) {
                          return Control_Apply.apply(Options_Applicative_Types.parserApply)(p1$prime)(v2.value1);
                      });
                      return Options_Applicative_Internal.nondetTAltOp(dictMonad)(a)(b);
                  })(v1.value0);
              };
              if (v1 instanceof Options_Applicative_Types.AltP) {
                  return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ searchParser(dictMonad)(v)(v1.value0), searchParser(dictMonad)(v)(v1.value1) ]);
              };
              if (v1 instanceof Options_Applicative_Types.BindP) {
                  return Control_Monad_Free["resume'"](function (p) {
                      return function (k) {
                          return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Internal.nondetTPlus(dictMonad))([ Data_Functor.mapFlipped(Options_Applicative_Internal.nondetTFunctor(dictMonad))(searchParser(dictMonad)(v)(p))(function (p$prime) {
                              return Options_Applicative_Types.BindP.create(Control_Bind.bind(Control_Monad_Free.freeBind)(Control_Monad_Free.liftF(p$prime))(k));
                          }), (function () {
                              var v2 = evalParser(p);
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad));
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return searchParser(dictMonad)(v)(Options_Applicative_Types.BindP.create(k(v2.value0)));
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Common (line 134, column 7 - line 136, column 49): " + [ v2.constructor.name ]);
                          })() ]);
                      };
                  })(Data_Function["const"](Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(dictMonad))))(v1.value0);
              };
              throw new Error("Failed pattern match at Options.Applicative.Common (line 117, column 1 - line 119, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var searchOpt = function (dictMonadP) {
      return function (pprefs) {
          return function (w) {
              return searchParser(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(function (opt) {
                  var disambiguate = (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefDisambiguate && Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Internal.value);
                  var v = optMatches(dictMonadP)(disambiguate)((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain)(w);
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Data_Functor.map(Control_Monad_State_Trans.functorStateT((((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Plus1()).Alt0()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(v.value0));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())));
                  };
                  throw new Error("Failed pattern match at Options.Applicative.Common (line 143, column 3 - line 145, column 21): " + [ v.constructor.name ]);
              });
          };
      };
  };
  var stepParser = function (dictMonadP) {
      return function (pprefs) {
          return function (v) {
              return function (arg) {
                  return function (p) {
                      if (v instanceof Options_Applicative_Types.AllPositionals) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      if (v instanceof Options_Applicative_Types.ForwardOptions) {
                          var v1 = parseWord(arg);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Alt.alt(Options_Applicative_Internal.nondetTAlt(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(searchOpt(dictMonadP)(pprefs)(v1.value0)(p))(searchArg(dictMonadP)(pprefs)(arg)(p));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return searchArg(dictMonadP)(pprefs)(arg)(p);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 173, column 42 - line 175, column 36): " + [ v1.constructor.name ]);
                      };
                      var v1 = parseWord(arg);
                      if (v1 instanceof Data_Maybe.Just) {
                          return searchOpt(dictMonadP)(pprefs)(v1.value0)(p);
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return searchArg(dictMonadP)(pprefs)(arg)(p);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 176, column 29 - line 178, column 36): " + [ v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var searchArg = function (dictMonadP) {
      return function (prefs) {
          return function (arg) {
              return searchParser(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(function (opt) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Options_Applicative_Internal.nondetTBind(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Applicative.when(Options_Applicative_Internal.nondetTApplicative(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(isArg((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain))(Options_Applicative_Internal.cut(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))))(function () {
                      var v = (Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain;
                      if (v instanceof Options_Applicative_Types.CmdReader) {
                          var v1 = new Data_Tuple.Tuple(v.value2(arg), (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(prefs)).prefBacktrack);
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.NoBacktrack) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Data_List_Types.Nil.value)))(function (args) {
                                  return Data_Functor.map(Control_Monad_State_Trans.functorStateT((((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Plus1()).Alt0()).Functor0()))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Control_Apply.applyFirst(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Control_Apply.applySecond(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParserInfo(dictMonadP)(v1.value0.value0)(args)))(Options_Applicative_Internal.exitContext(dictMonadP))));
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.Backtrack) {
                              return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_State_Trans.StateT(function (args) {
                                  return Control_Apply.applyFirst(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Control_Apply.applySecond(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0()).Apply0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0))(runParser(dictMonadP)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoPolicy)(Options_Applicative_Types.CmdStart.value)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser)(args)))(Options_Applicative_Internal.exitContext(dictMonadP));
                              })));
                          };
                          if (v1.value0 instanceof Data_Maybe.Just && v1.value1 instanceof Options_Applicative_Types.SubparserInline) {
                              return Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Options_Applicative_Internal.enterContext(dictMonadP)(arg)(v1.value0.value0)))(function () {
                                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(v1.value0.value0)).infoParser);
                              }));
                          };
                          if (v1.value0 instanceof Data_Maybe.Nothing) {
                              return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())));
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 153, column 7 - line 165, column 38): " + [ v1.constructor.name ]);
                      };
                      if (v instanceof Options_Applicative_Types.ArgReader) {
                          return Data_Functor.map(Options_Applicative_Internal.nondetTFunctor(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(Control_Monad_Trans_Class.lift(Options_Applicative_Internal.nondetTMonadTrans)(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())(Options_Applicative_Internal.runReadM(dictMonadP)((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(v.value0)).crReader)(arg))));
                      };
                      return Control_Plus.empty(Options_Applicative_Internal.nondetTPlus(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0())));
                  });
              });
          };
      };
  };
  var runParserInfo = function (dictMonadP) {
      return function (i) {
          return runParserFully(dictMonadP)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(i)).infoPolicy)((Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(i)).infoParser);
      };
  };
  var runParserFully = function (dictMonadP) {
      return function (policy) {
          return function (p) {
              return function (args) {
                  return Control_Bind.bind((((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()).Bind1())(runParser(dictMonadP)(policy)(Options_Applicative_Types.CmdStart.value)(p)(args))(function (v) {
                      if (v.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Applicative0())(v.value0);
                      };
                      if (v.value1 instanceof Data_List_Types.Cons) {
                          return parseError(dictMonadP)(v.value1.value0)(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Data_Unit.unit));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 213, column 3 - line 215, column 52): " + [ v.value1.constructor.name ]);
                  });
              };
          };
      };
  };
  var runParser = function (dictMonadP) {
      return function (policy) {
          return function (isCmdStart) {
              return function (p) {
                  return function (args) {
                      var result = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(evalParser(p)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(args));
                      var newPolicy = function (a) {
                          if (policy instanceof Options_Applicative_Types.NoIntersperse) {
                              var $181 = Data_Maybe.isJust(parseWord(a));
                              if ($181) {
                                  return Options_Applicative_Types.NoIntersperse.value;
                              };
                              return Options_Applicative_Types.AllPositionals.value;
                          };
                          return policy;
                      };
                      var do_step = function (prefs) {
                          return function (arg) {
                              return function (argt) {
                                  return (function (v) {
                                      return Control_Monad_State_Trans.runStateT(v)(argt);
                                  })(Options_Applicative_Internal.disamb(Control_Monad_State_Trans.monadStateT(((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()))(!(Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(prefs)).prefDisambiguate)(stepParser(dictMonadP)(prefs)(policy)(arg)(p)));
                              };
                          };
                      };
                      if (args instanceof Data_List_Types.Nil) {
                          return Options_Applicative_Internal.exitP(dictMonadP)(isCmdStart)(policy)(p)(result);
                      };
                      if (args instanceof Data_List_Types.Cons && (args.value0 === "--" && Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(policy)(Options_Applicative_Types.AllPositionals.value))) {
                          return runParser(dictMonadP)(Options_Applicative_Types.AllPositionals.value)(Options_Applicative_Types.CmdCont.value)(p)(args.value1);
                      };
                      if (args instanceof Data_List_Types.Cons) {
                          return Control_Bind.bind((((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()).Bind1())(Options_Applicative_Internal.getPrefs(dictMonadP))(function (prefs) {
                              return Control_Bind.bind((((dictMonadP.MonadPlus0()).MonadZero0()).Monad0()).Bind1())(do_step(prefs)(args.value0)(args.value1))(function (v) {
                                  if (v.value0 instanceof Data_Maybe.Nothing) {
                                      return Control_Alt.alt(((((dictMonadP.MonadPlus0()).MonadZero0()).Alternative1()).Plus1()).Alt0())(Options_Applicative_Internal.hoistMaybe(dictMonadP.MonadPlus0())(result))(parseError(dictMonadP)(args.value0)(p));
                                  };
                                  if (v.value0 instanceof Data_Maybe.Just) {
                                      return runParser(dictMonadP)(newPolicy(args.value0))(Options_Applicative_Types.CmdCont.value)(v.value0.value0)(v.value1);
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Common (line 191, column 5 - line 193, column 60): " + [ v.value0.constructor.name ]);
                              });
                          });
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Common (line 185, column 38 - line 193, column 60): " + [ args.constructor.name ]);
                  };
              };
          };
      };
  };
  var treeMapParser = function (g) {
      var has_default = function (p) {
          return Data_Maybe.isJust(evalParser(p));
      };
      var hasArg = function (v) {
          if (v instanceof Options_Applicative_Types.NilP) {
              return false;
          };
          if (v instanceof Options_Applicative_Types.OptP) {
              return isArg((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(v.value0)).optMain);
          };
          if (v instanceof Options_Applicative_Types.MultP) {
              return Data_Exists.runExists(function (v1) {
                  return hasArg(v1.value0) || hasArg(v1.value1);
              })(v.value0);
          };
          if (v instanceof Options_Applicative_Types.AltP) {
              return hasArg(v.value0) || hasArg(v.value1);
          };
          if (v instanceof Options_Applicative_Types.BindP) {
              return Control_Monad_Free["resume'"](function (p) {
                  return function (v1) {
                      return hasArg(p);
                  };
              })(Data_Function["const"](false))(v.value0);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 271, column 5 - line 271, column 44): " + [ v.constructor.name ]);
      };
      var go = function (v) {
          return function (v1) {
              return function (v2) {
                  return function (v3) {
                      return function (v4) {
                          if (v4 instanceof Options_Applicative_Types.NilP) {
                              return new Options_Applicative_Types.MultNode([  ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.OptP) {
                              if (Data_Ord.greaterThan(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.optVisibility(v4.value0))(Options_Applicative_Types.Internal.value)) {
                                  return new Options_Applicative_Types.Leaf(v3({
                                      hinfoMulti: v,
                                      hinfoDefault: v1,
                                      hinfoUnreachableArgs: v2
                                  })(v4.value0));
                              };
                              if (Data_Boolean.otherwise) {
                                  return new Options_Applicative_Types.MultNode([  ]);
                              };
                          };
                          if (v4 instanceof Options_Applicative_Types.MultP) {
                              return Data_Exists.runExists(function (v5) {
                                  var r$prime = v2 || hasArg(v5.value0);
                                  return new Options_Applicative_Types.MultNode([ go(v)(v1)(v2)(v3)(v5.value0), go(v)(v1)(r$prime)(v3)(v5.value1) ]);
                              })(v4.value0);
                          };
                          if (v4 instanceof Options_Applicative_Types.AltP) {
                              var d$prime = v1 || (has_default(v4.value0) || has_default(v4.value1));
                              return new Options_Applicative_Types.AltNode([ go(v)(d$prime)(v2)(v3)(v4.value0), go(v)(d$prime)(v2)(v3)(v4.value1) ]);
                          };
                          if (v4 instanceof Options_Applicative_Types.BindP) {
                              return Control_Monad_Free["resume'"](function (p) {
                                  return function (k) {
                                      var go$prime = go(true)(v1)(v2)(v3)(p);
                                      var v5 = evalParser(p);
                                      if (v5 instanceof Data_Maybe.Nothing) {
                                          return go$prime;
                                      };
                                      if (v5 instanceof Data_Maybe.Just) {
                                          return new Options_Applicative_Types.MultNode([ go$prime, go(true)(v1)(v2)(v3)(Options_Applicative_Types.BindP.create(k(v5.value0))) ]);
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.Common (line 266, column 12 - line 268, column 68): " + [ v5.constructor.name ]);
                                  };
                              })(Data_Function["const"](new Options_Applicative_Types.MultNode([  ])))(v4.value0);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.Common (line 247, column 5 - line 250, column 21): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name, v4.constructor.name ]);
                      };
                  };
              };
          };
      };
      var $234 = go(false)(false)(false)(g);
      return function ($235) {
          return simplify($234($235));
      };
  };
  var mapParser = function (f) {
      var flatten = function (v) {
          if (v instanceof Options_Applicative_Types.Leaf) {
              return [ v.value0 ];
          };
          if (v instanceof Options_Applicative_Types.MultNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          if (v instanceof Options_Applicative_Types.AltNode) {
              return Control_Bind.bind(Control_Bind.bindArray)(v.value0)(flatten);
          };
          throw new Error("Failed pattern match at Options.Applicative.Common (line 234, column 5 - line 234, column 27): " + [ v.constructor.name ]);
      };
      var $236 = treeMapParser(f);
      return function ($237) {
          return flatten($236($237));
      };
  };
  exports["liftOpt"] = liftOpt;
  exports["showOption"] = showOption;
  exports["runParserInfo"] = runParserInfo;
  exports["mapParser"] = mapParser;
  exports["treeMapParser"] = treeMapParser;
  exports["optionNames"] = optionNames;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.PrettyPrint.Leijen"] = $PS["Text.PrettyPrint.Leijen"] || {};
  var exports = $PS["Text.PrettyPrint.Leijen"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                
  var SFail = (function () {
      function SFail() {

      };
      SFail.value = new SFail();
      return SFail;
  })();
  var SEmpty = (function () {
      function SEmpty() {

      };
      SEmpty.value = new SEmpty();
      return SEmpty;
  })();
  var SChar = (function () {
      function SChar(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar.create = function (value0) {
          return function (value1) {
              return new SChar(value0, value1);
          };
      };
      return SChar;
  })();
  var SText = (function () {
      function SText(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText(value0, value1, value2);
              };
          };
      };
      return SText;
  })();
  var SLine = (function () {
      function SLine(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine.create = function (value0) {
          return function (value1) {
              return new SLine(value0, value1);
          };
      };
      return SLine;
  })();
  var SFail$prime = (function () {
      function SFail$prime() {

      };
      SFail$prime.value = new SFail$prime();
      return SFail$prime;
  })();
  var SEmpty$prime = (function () {
      function SEmpty$prime() {

      };
      SEmpty$prime.value = new SEmpty$prime();
      return SEmpty$prime;
  })();
  var SChar$prime = (function () {
      function SChar$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SChar$prime.create = function (value0) {
          return function (value1) {
              return new SChar$prime(value0, value1);
          };
      };
      return SChar$prime;
  })();
  var SText$prime = (function () {
      function SText$prime(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      SText$prime.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new SText$prime(value0, value1, value2);
              };
          };
      };
      return SText$prime;
  })();
  var SLine$prime = (function () {
      function SLine$prime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SLine$prime.create = function (value0) {
          return function (value1) {
              return new SLine$prime(value0, value1);
          };
      };
      return SLine$prime;
  })();
  var Fail = (function () {
      function Fail() {

      };
      Fail.value = new Fail();
      return Fail;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Char = (function () {
      function Char(value0) {
          this.value0 = value0;
      };
      Char.create = function (value0) {
          return new Char(value0);
      };
      return Char;
  })();
  var Text = (function () {
      function Text(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Text.create = function (value0) {
          return function (value1) {
              return new Text(value0, value1);
          };
      };
      return Text;
  })();
  var Line = (function () {
      function Line() {

      };
      Line.value = new Line();
      return Line;
  })();
  var FlatAlt = (function () {
      function FlatAlt(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FlatAlt.create = function (value0) {
          return function (value1) {
              return new FlatAlt(value0, value1);
          };
      };
      return FlatAlt;
  })();
  var Cat = (function () {
      function Cat(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cat.create = function (value0) {
          return function (value1) {
              return new Cat(value0, value1);
          };
      };
      return Cat;
  })();
  var Nest = (function () {
      function Nest(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nest.create = function (value0) {
          return function (value1) {
              return new Nest(value0, value1);
          };
      };
      return Nest;
  })();
  var Union = (function () {
      function Union(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Union.create = function (value0) {
          return function (value1) {
              return new Union(value0, value1);
          };
      };
      return Union;
  })();
  var Column = (function () {
      function Column(value0) {
          this.value0 = value0;
      };
      Column.create = function (value0) {
          return new Column(value0);
      };
      return Column;
  })();
  var Columns = (function () {
      function Columns(value0) {
          this.value0 = value0;
      };
      Columns.create = function (value0) {
          return new Columns(value0);
      };
      return Columns;
  })();
  var Nesting = (function () {
      function Nesting(value0) {
          this.value0 = value0;
      };
      Nesting.create = function (value0) {
          return new Nesting(value0);
      };
      return Nesting;
  })();
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Cons(value0, value1, value2);
              };
          };
      };
      return Cons;
  })();
  var text = function (v) {
      if (v === "") {
          return Empty.value;
      };
      return new Text(Data_String_CodePoints.length(v), v);
  };                         
  var spaces = function (n) {
      if (n <= 0) {
          return "";
      };
      if (Data_Boolean.otherwise) {
          return Data_String_CodeUnits.fromCharArray(Data_Array.replicate(n)(" "));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 908, column 1 - line 908, column 24): " + [ n.constructor.name ]);
  };
  var space = new Char(" ");
  var rparen = new Char(")");
  var rbracket = new Char("]");
  var nesting = function (f) {
      return new Nesting(f);
  };
  var nest = function (i) {
      return function (x) {
          return new Nest(i, x);
      };
  };
  var lparen = new Char("(");
  var line = new FlatAlt(Line.value, space);
  var lbracket = new Char("[");
  var indentation = function (n) {
      return spaces(n);
  }; 
  var forceSimpleDoc = function (v) {
      if (v instanceof SFail$prime) {
          return SFail.value;
      };
      if (v instanceof SEmpty$prime) {
          return SEmpty.value;
      };
      if (v instanceof SChar$prime) {
          return new SChar(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      if (v instanceof SText$prime) {
          return new SText(v.value0, v.value1, forceSimpleDoc(Data_Lazy.force(v.value2)));
      };
      if (v instanceof SLine$prime) {
          return new SLine(v.value0, forceSimpleDoc(Data_Lazy.force(v.value1)));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 600, column 18 - line 605, column 51): " + [ v.constructor.name ]);
  };
  var renderFits = function (fits) {
      return function (rfrac) {
          return function (w) {
              return function (headNode) {
                  var r = Data_Ord.max(Data_Ord.ordInt)(0)(Data_Ord.min(Data_Ord.ordInt)(w)(Data_Int.round(Data_Int.toNumber(w) * rfrac)));
                  var nicest$prime = function (n) {
                      return function (k) {
                          return function (i) {
                              return function (ds) {
                                  return function (x) {
                                      return function (y) {
                                          var x$prime = best(n)(k)(new Cons(i, x, ds));
                                          var width$prime = Data_Ord.min(Data_Ord.ordInt)(w - k | 0)((r - k | 0) + n | 0);
                                          var $170 = fits(w)(Data_Ord.min(Data_Ord.ordInt)(n)(k))(width$prime)(x$prime);
                                          if ($170) {
                                              return x$prime;
                                          };
                                          var y$prime = best(n)(k)(new Cons(i, y, ds));
                                          return y$prime;
                                      };
                                  };
                              };
                          };
                      };
                  };
                  var best = function (n) {
                      return function (k) {
                          return function (v) {
                              if (v instanceof Nil) {
                                  return SEmpty$prime.value;
                              };
                              if (v instanceof Cons) {
                                  if (v.value1 instanceof Fail) {
                                      return SFail$prime.value;
                                  };
                                  if (v.value1 instanceof Empty) {
                                      return best(n)(k)(v.value2);
                                  };
                                  if (v.value1 instanceof Char) {
                                      var k$prime = k + 1 | 0;
                                      return new SChar$prime(v.value1.value0, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Text) {
                                      var k$prime = k + v.value1.value0 | 0;
                                      return new SText$prime(v.value1.value0, v.value1.value1, Data_Lazy.defer(function (v1) {
                                          return best(n)(k$prime)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof Line) {
                                      return new SLine$prime(v.value0, Data_Lazy.defer(function (v1) {
                                          return best(v.value0)(v.value0)(v.value2);
                                      }));
                                  };
                                  if (v.value1 instanceof FlatAlt) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, v.value2));
                                  };
                                  if (v.value1 instanceof Cat) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0, new Cons(v.value0, v.value1.value1, v.value2)));
                                  };
                                  if (v.value1 instanceof Nest) {
                                      var i$prime = v.value0 + v.value1.value0 | 0;
                                      return best(n)(k)(new Cons(i$prime, v.value1.value1, v.value2));
                                  };
                                  if (v.value1 instanceof Union) {
                                      return nicest$prime(n)(k)(v.value0)(v.value2)(v.value1.value0)(v.value1.value1);
                                  };
                                  if (v.value1 instanceof Column) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(k), v.value2));
                                  };
                                  if (v.value1 instanceof Columns) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(new Data_Maybe.Just(w)), v.value2));
                                  };
                                  if (v.value1 instanceof Nesting) {
                                      return best(n)(k)(new Cons(v.value0, v.value1.value0(v.value0), v.value2));
                                  };
                                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 788, column 11 - line 802, column 56): " + [ v.value1.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 785, column 7 - line 785, column 50): " + [ n.constructor.name, k.constructor.name, v.constructor.name ]);
                          };
                      };
                  };
                  return forceSimpleDoc(best(0)(0)(new Cons(0, headNode, Nil.value)));
              };
          };
      };
  };
  var foldr1 = function (dictMonoid) {
      return function (f) {
          return function ($246) {
              return (function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(v.value0.last)(v.value0.init);
                  };
                  throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 122, column 29 - line 124, column 43): " + [ v.constructor.name ]);
              })(Data_Array.unsnoc($246));
          };
      };
  };
  var flatten = function (v) {
      if (v instanceof FlatAlt) {
          return v.value1;
      };
      if (v instanceof Cat) {
          return new Cat(flatten(v.value0), flatten(v.value1));
      };
      if (v instanceof Nest) {
          return new Nest(v.value0, flatten(v.value1));
      };
      if (v instanceof Line) {
          return Fail.value;
      };
      if (v instanceof Union) {
          return flatten(v.value0);
      };
      if (v instanceof Column) {
          return new Column(function ($247) {
              return flatten(v.value0($247));
          });
      };
      if (v instanceof Columns) {
          return new Columns(function ($248) {
              return flatten(v.value0($248));
          });
      };
      if (v instanceof Nesting) {
          return new Nesting(function ($249) {
              return flatten(v.value0($249));
          });
      };
      return v;
  };
  var group = function (x) {
      return new Union(flatten(x), x);
  };
  var softline = group(line);         
  var fits1 = function ($copy_v) {
      return function ($copy_v1) {
          return function ($copy_w) {
              return function ($copy_v2) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_var_w = $copy_w;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, w, v2) {
                      if (w < 0) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SFail$prime) {
                          $tco_done = true;
                          return false;
                      };
                      if (v2 instanceof SEmpty$prime) {
                          $tco_done = true;
                          return true;
                      };
                      if (v2 instanceof SChar$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - 1 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value1);
                          return;
                      };
                      if (v2 instanceof SText$prime) {
                          $tco_var_v = v;
                          $tco_var_v1 = v1;
                          $tco_var_w = w - v2.value0 | 0;
                          $copy_v2 = Data_Lazy.force(v2.value2);
                          return;
                      };
                      if (v2 instanceof SLine$prime) {
                          $tco_done = true;
                          return true;
                      };
                      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 819, column 1 - line 819, column 55): " + [ v.constructor.name, v1.constructor.name, w.constructor.name, v2.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $tco_var_w, $copy_v2);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var renderPretty = renderFits(fits1);
  var empty = Empty.value;
  var linebreak = new FlatAlt(Line.value, empty);
  var displayS = function (v) {
      if (v instanceof SFail) {
          return Partial_Unsafe.unsafeCrashWith("@SFail@ can not appear uncaught in a rendered @SimpleDoc@");
      };
      if (v instanceof SEmpty) {
          return "";
      };
      if (v instanceof SChar) {
          return Data_String_CodeUnits.fromCharArray([ v.value0 ]) + displayS(v.value1);
      };
      if (v instanceof SText) {
          return v.value1 + displayS(v.value2);
      };
      if (v instanceof SLine) {
          return "\x0a" + (indentation(v.value0) + displayS(v.value1));
      };
      throw new Error("Failed pattern match at Text.PrettyPrint.Leijen (line 893, column 1 - line 893, column 32): " + [ v.constructor.name ]);
  };
  var column = function (f) {
      return new Column(f);
  };                        
  var $$char = function (v) {
      if (v === "\x0a") {
          return line;
      };
      return new Char(v);
  };
  var beside = function (x) {
      return function (y) {
          return new Cat(x, y);
      };
  };
  var docSemigroup = new Data_Semigroup.Semigroup(beside);
  var docMonoid = new Data_Monoid.Monoid(function () {
      return docSemigroup;
  }, empty);
  var string = (function () {
      var $252 = Data_Foldable.intercalate(Data_Foldable.foldableArray)(docMonoid)(line);
      var $253 = Data_Functor.map(Data_Functor.functorArray)(text);
      var $254 = Data_String_Common.split("\x0a");
      return function ($255) {
          return $252($253($254($255)));
      };
  })();
  var enclose = function (l) {
      return function (r) {
          return function (x) {
              return Data_Semigroup.append(docSemigroup)(l)(Data_Semigroup.append(docSemigroup)(x)(r));
          };
      };
  };                                   
  var brackets = enclose(lbracket)(rbracket);
  var parens = enclose(lparen)(rparen);
  var width = function (d) {
      return function (f) {
          return column(function (k1) {
              return Data_Semigroup.append(docSemigroup)(d)(column(function (k2) {
                  return f(k2 - k1 | 0);
              }));
          });
      };
  };
  var fillBreak = function (f) {
      return function (x) {
          return width(x)(function (w) {
              var $241 = w > f;
              if ($241) {
                  return nest(f)(linebreak);
              };
              return text(spaces(f - w | 0));
          });
      };
  };                             
  var appendWithSpace = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(space)(y));
      };
  };
  var hsep = foldr1(docMonoid)(appendWithSpace);
  var appendWithSoftline = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(softline)(y));
      };
  };                                                   
  var appendWithLinebreak = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(linebreak)(y));
      };
  };
  var vcat = foldr1(docMonoid)(appendWithLinebreak);
  var appendWithLine = function (x) {
      return function (y) {
          return Data_Semigroup.append(docSemigroup)(x)(Data_Semigroup.append(docSemigroup)(line)(y));
      };
  };                                   
  var align = function (d) {
      return column(function (k) {
          return nesting(function (i) {
              return nest(k - i | 0)(d);
          });
      });
  };                                             
  var hang = function (i) {
      return function (d) {
          return align(nest(i)(d));
      };
  };
  var indent = function (i) {
      return function (d) {
          return hang(i)(Data_Semigroup.append(docSemigroup)(text(spaces(i)))(d));
      };
  };
  exports["hsep"] = hsep;
  exports["vcat"] = vcat;
  exports["appendWithSpace"] = appendWithSpace;
  exports["appendWithSoftline"] = appendWithSoftline;
  exports["appendWithLine"] = appendWithLine;
  exports["parens"] = parens;
  exports["brackets"] = brackets;
  exports["string"] = string;
  exports["fillBreak"] = fillBreak;
  exports["indent"] = indent;
  exports["align"] = align;
  exports["char"] = $$char;
  exports["text"] = text;
  exports["renderPretty"] = renderPretty;
  exports["displayS"] = displayS;
  exports["docSemigroup"] = docSemigroup;
  exports["docMonoid"] = docMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Help.Chunk"] = $PS["Options.Applicative.Help.Chunk"] || {};
  var exports = $PS["Options.Applicative.Help.Chunk"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Chunk = function (x) {
      return x;
  };
  var chunked = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v2;
              };
              if (v2 instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(v(v1.value0)(v2.value0));
              };
              throw new Error("Failed pattern match at Options.Applicative.Help.Chunk (line 59, column 1 - line 60, column 41): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var chunkSemigroup = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(chunked(Data_Semigroup.append(dictSemigroup)));
  };
  var chunkNewtype = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Chunk);
  var extractChunk = function (dictMonoid) {
      var $34 = Data_Maybe.fromMaybe(Data_Monoid.mempty(dictMonoid));
      var $35 = Data_Newtype.un(chunkNewtype)(Chunk);
      return function ($36) {
          return $34($35($36));
      };
  };
  var isEmpty = (function () {
      var $37 = Data_Newtype.un(chunkNewtype)(Chunk);
      return function ($38) {
          return Data_Maybe.isNothing($37($38));
      };
  })();
  var chunkMonoid = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return chunkSemigroup(dictSemigroup);
      }, Data_Maybe.Nothing.value);
  };
  var vcatChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(Text_PrettyPrint_Leijen.appendWithLine))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var vsepChunks = Data_Foldable.foldr(Data_Foldable.foldableArray)(chunked(function (x) {
      return function (y) {
          return Text_PrettyPrint_Leijen.appendWithLine(x)(Text_PrettyPrint_Leijen.appendWithLine(Data_Monoid.mempty(Text_PrettyPrint_Leijen.docMonoid))(y));
      };
  }))(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
  var chunkFunctor = Data_Maybe.functorMaybe;
  var chunkBesideOrBelow = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
  var chunkBeside = chunked(Text_PrettyPrint_Leijen.appendWithSpace);
  var chunkApply = Data_Maybe.applyMaybe;
  var chunkApplicative = Data_Maybe.applicativeMaybe;
  var listToChunk = function (dictMonoid) {
      return function (v) {
          if (v.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(dictMonoid.Semigroup0()));
          };
          return Control_Applicative.pure(chunkApplicative)(Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid)(v));
      };
  };
  var stringChunk = function (v) {
      if (v === "") {
          return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
      };
      return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.text(v));
  };
  var paragraph = (function () {
      var $39 = Data_Foldable.foldr(Data_Foldable.foldableArray)((function () {
          var $41 = chunked(Text_PrettyPrint_Leijen.appendWithSoftline);
          return function ($42) {
              return $41(stringChunk($42));
          };
      })())(Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
      return function ($40) {
          return $39(Options_Applicative_Internal_Utils.words($40));
      };
  })();
  var tabulate$prime = function (v) {
      return function (v1) {
          if (v1.length === 0) {
              return Data_Monoid.mempty(chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
          };
          return Control_Applicative.pure(chunkApplicative)(Text_PrettyPrint_Leijen.vcat(Data_Functor.mapFlipped(Data_Functor.functorArray)(v1)(function (v2) {
              return Text_PrettyPrint_Leijen.indent(2)(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.fillBreak(v)(v2.value0))(v2.value1));
          })));
      };
  };
  var tabulate = tabulate$prime(24);
  exports["Chunk"] = Chunk;
  exports["chunked"] = chunked;
  exports["listToChunk"] = listToChunk;
  exports["chunkBeside"] = chunkBeside;
  exports["chunkBesideOrBelow"] = chunkBesideOrBelow;
  exports["vcatChunks"] = vcatChunks;
  exports["vsepChunks"] = vsepChunks;
  exports["isEmpty"] = isEmpty;
  exports["stringChunk"] = stringChunk;
  exports["paragraph"] = paragraph;
  exports["extractChunk"] = extractChunk;
  exports["tabulate"] = tabulate;
  exports["chunkNewtype"] = chunkNewtype;
  exports["chunkFunctor"] = chunkFunctor;
  exports["chunkApply"] = chunkApply;
  exports["chunkApplicative"] = chunkApplicative;
  exports["chunkSemigroup"] = chunkSemigroup;
  exports["chunkMonoid"] = chunkMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Builder.Internal"] = $PS["Options.Applicative.Builder.Internal"] || {};
  var exports = $PS["Options.Applicative.Builder.Internal"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptionFields = function (x) {
      return x;
  };
  var FlagFields = function (x) {
      return x;
  };
  var DefaultProp = (function () {
      function DefaultProp(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DefaultProp.create = function (value0) {
          return function (value1) {
              return new DefaultProp(value0, value1);
          };
      };
      return DefaultProp;
  })();
  var Mod = (function () {
      function Mod(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Mod.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Mod(value0, value1, value2);
              };
          };
      };
      return Mod;
  })();
  var CommandFields = function (x) {
      return x;
  };
  var HasValue = function (hasValueDummy) {
      this.hasValueDummy = hasValueDummy;
  };
  var HasName = function (name) {
      this.name = name;
  };
  var HasMetavar = function (hasMetavarDummy) {
      this.hasMetavarDummy = hasMetavarDummy;
  };
  var optionFieldsHasValue = new HasValue(function (v) {
      return Data_Unit.unit;
  });
  var optionFieldsHasMetavar = new HasMetavar(function (v) {
      return Data_Unit.unit;
  });
  var newtypeOptionFields = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptionFields);
  var optionFieldsHasName = new HasName(function (n) {
      return Data_Newtype.over(newtypeOptionFields)(newtypeOptionFields)(OptionFields)(function (fields) {
          return {
              optNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.optNames),
              optCompleter: fields.optCompleter,
              optNoArgError: fields.optNoArgError
          };
      });
  });
  var newtypeFlagFields = new Data_Newtype.Newtype(function (n) {
      return n;
  }, FlagFields);
  var newtypeCommandFields = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CommandFields); 
  var name = function (dict) {
      return dict.name;
  };
  var mkCommand = function (m) {
      var v = m.value0({
          cmdCommands: [  ],
          cmdGroup: Data_Maybe.Nothing.value
      });
      return new Data_Tuple.Tuple(v.cmdGroup, new Data_Tuple.Tuple(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(v.cmdCommands), new Data_Tuple.Tuple(function (v1) {
          return Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v1)(v.cmdCommands);
      }, Data_Unit.unit)));
  };
  var flagFieldsHasName = new HasName(function (n) {
      return Data_Newtype.over(newtypeFlagFields)(newtypeFlagFields)(FlagFields)(function (fields) {
          return {
              flagNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ n ])(fields.flagNames),
              flagActive: fields.flagActive
          };
      });
  });
  var defaultPropSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new DefaultProp(Control_Alt.alt(Data_Maybe.altMaybe)(v.value0)(v1.value0), Control_Alt.alt(Data_Maybe.altMaybe)(v.value1)(v1.value1));
      };
  });
  var modSemigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new Mod(function ($61) {
              return v1.value0(v.value0($61));
          }, Data_Semigroup.append(defaultPropSemigroup)(v1.value1)(v.value1), function ($62) {
              return v1.value2(v.value2($62));
          });
      };
  });
  var defaultPropMonoid = new Data_Monoid.Monoid(function () {
      return defaultPropSemigroup;
  }, new DefaultProp(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value));
  var fieldMod = function (f) {
      return new Mod(f, Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn));
  };
  var modMonoid = new Data_Monoid.Monoid(function () {
      return modSemigroup;
  }, new Mod(Control_Category.identity(Control_Category.categoryFn), Data_Monoid.mempty(defaultPropMonoid), Control_Category.identity(Control_Category.categoryFn)));
  var optionMod = Mod.create(Control_Category.identity(Control_Category.categoryFn))(Data_Monoid.mempty(defaultPropMonoid));
  var internal = optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Options_Applicative_Types.Internal.value,
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var commandFieldsHasMetavar = new HasMetavar(function (v) {
      return Data_Unit.unit;
  });
  var baseProps = {
      propMetaVar: "",
      propVisibility: Options_Applicative_Types.Visible.value,
      propHelp: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
      propShowDefault: Data_Maybe.Nothing.value,
      propDescMod: Data_Maybe.Nothing.value
  };
  var mkProps = function (v) {
      return function (g) {
          var props = Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (r) {
              return {
                  propShowDefault: Control_Apply.apply(Data_Maybe.applyMaybe)(v.value1)(v.value0),
                  propDescMod: r.propDescMod,
                  propHelp: r.propHelp,
                  propMetaVar: r.propMetaVar,
                  propVisibility: r.propVisibility
              };
          })(g(baseProps));
          return props;
      };
  };
  var mkOption = function (d) {
      return function (g) {
          return function (rdr) {
              return {
                  optMain: rdr,
                  optProps: mkProps(d)(g)
              };
          };
      };
  };
  var mkParser = function (v) {
      return function (g) {
          return function (rdr) {
              var opt = mkOption(v)(g)(rdr);
              return Control_Alt.alt(Options_Applicative_Types.parserAlt)(Options_Applicative_Common.liftOpt(opt))(Data_Maybe.maybe(Control_Plus.empty(Options_Applicative_Types.parserPlus))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative))(v.value0));
          };
      };
  };
  var argumentFieldsHasValue = new HasValue(function (v) {
      return Data_Unit.unit;
  });
  var argumentFieldsHasMetavar = new HasMetavar(function (v) {
      return Data_Unit.unit;
  });
  exports["Mod"] = Mod;
  exports["name"] = name;
  exports["OptionFields"] = OptionFields;
  exports["CommandFields"] = CommandFields;
  exports["DefaultProp"] = DefaultProp;
  exports["optionMod"] = optionMod;
  exports["fieldMod"] = fieldMod;
  exports["mkCommand"] = mkCommand;
  exports["mkParser"] = mkParser;
  exports["internal"] = internal;
  exports["newtypeOptionFields"] = newtypeOptionFields;
  exports["newtypeCommandFields"] = newtypeCommandFields;
  exports["optionFieldsHasName"] = optionFieldsHasName;
  exports["flagFieldsHasName"] = flagFieldsHasName;
  exports["optionFieldsHasValue"] = optionFieldsHasValue;
  exports["argumentFieldsHasValue"] = argumentFieldsHasValue;
  exports["optionFieldsHasMetavar"] = optionFieldsHasMetavar;
  exports["argumentFieldsHasMetavar"] = argumentFieldsHasMetavar;
  exports["commandFieldsHasMetavar"] = commandFieldsHasMetavar;
  exports["modMonoid"] = modMonoid;
  exports["modSemigroup"] = modSemigroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Builder"] = $PS["Options.Applicative.Builder"] || {};
  var exports = $PS["Options.Applicative.Builder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var ExitCodes = $PS["ExitCodes"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var PrefsMod = function (x) {
      return x;
  };
  var InfoMod = function (x) {
      return x;
  };
  var value = function (dictHasValue) {
      return function (x) {
          return new Options_Applicative_Builder_Internal.Mod(Control_Category.identity(Control_Category.categoryFn), new Options_Applicative_Builder_Internal.DefaultProp(new Data_Maybe.Just(x), Data_Maybe.Nothing.value), Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var str = Options_Applicative_Types.readerAsk;
  var showHelpOnEmpty = PrefsMod(Data_Newtype.over(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(function (p) {
      return {
          prefShowHelpOnEmpty: true,
          prefBacktrack: p.prefBacktrack,
          prefColumns: p.prefColumns,
          prefDisambiguate: p.prefDisambiguate,
          prefMultiSuffix: p.prefMultiSuffix,
          prefShowHelpOnError: p.prefShowHelpOnError
      };
  }));
  var showDefaultWith = function (s) {
      return new Options_Applicative_Builder_Internal.Mod(Control_Category.identity(Control_Category.categoryFn), new Options_Applicative_Builder_Internal.DefaultProp(Data_Maybe.Nothing.value, new Data_Maybe.Just(s)), Control_Category.identity(Control_Category.categoryFn));
  };
  var showDefault = function (dictShow) {
      return showDefaultWith(Data_Show.show(dictShow));
  };
  var $$short = function (dictHasName) {
      var $85 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($86) {
          return Options_Applicative_Builder_Internal.fieldMod($85(Options_Applicative_Types.OptShort.create($86)));
      };
  };
  var progDesc = function (s) {
      return InfoMod(Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoProgDesc: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoHeader: i.infoHeader,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy
          };
      }));
  };  
  var noArgError = function (e) {
      return Options_Applicative_Builder_Internal.fieldMod(Data_Newtype.over(Options_Applicative_Builder_Internal.newtypeOptionFields)(Options_Applicative_Builder_Internal.newtypeOptionFields)(Options_Applicative_Builder_Internal.OptionFields)(function (p) {
          return {
              optNoArgError: Data_Function["const"](e),
              optCompleter: p.optCompleter,
              optNames: p.optNames
          };
      }));
  };
  var newtypePrefsMod = new Data_Newtype.Newtype(function (n) {
      return n;
  }, PrefsMod);
  var prefs = function (m) {
      var base = {
          prefMultiSuffix: "",
          prefDisambiguate: false,
          prefShowHelpOnError: false,
          prefShowHelpOnEmpty: false,
          prefBacktrack: Options_Applicative_Types.Backtrack.value,
          prefColumns: 80
      };
      return Data_Newtype.un(newtypePrefsMod)(PrefsMod)(m)(base);
  };                                                         
  var newtypeInfoMod = new Data_Newtype.Newtype(function (n) {
      return n;
  }, InfoMod);
  var metavar = function (dictHasMetavar) {
      return function ($$var) {
          return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
              return {
                  propMetaVar: $$var,
                  propDescMod: p.propDescMod,
                  propHelp: p.propHelp,
                  propShowDefault: p.propShowDefault,
                  propVisibility: p.propVisibility
              };
          }));
      };
  };
  var option = function (r) {
      return function (m) {
          var v = Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("ARG"))(m);
          var v1 = v.value0({
              optNames: [  ],
              optCompleter: Data_Monoid.mempty(Options_Applicative_Types.completerMonoid),
              optNoArgError: Options_Applicative_Types.ExpectsArgError.create
          });
          var crdr = {
              crCompleter: v1.optCompleter,
              crReader: r
          };
          var rdr = new Options_Applicative_Types.OptReader(v1.optNames, crdr, v1.optNoArgError);
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var strOption = option(str);
  var $$long = function (dictHasName) {
      var $90 = Options_Applicative_Builder_Internal.name(dictHasName);
      return function ($91) {
          return Options_Applicative_Builder_Internal.fieldMod($90(Options_Applicative_Types.OptLong.create($91)));
      };
  };
  var infoModSemigroup = new Data_Semigroup.Semigroup(function (m1) {
      return function (m2) {
          return InfoMod((function () {
              var $92 = Data_Newtype.un(newtypeInfoMod)(InfoMod)(m2);
              var $93 = Data_Newtype.un(newtypeInfoMod)(InfoMod)(m1);
              return function ($94) {
                  return $92($93($94));
              };
          })());
      };
  });                                                        
  var info = function (parser) {
      return function (m) {
          var base = {
              infoParser: parser,
              infoFullDesc: true,
              infoProgDesc: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoHeader: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFooter: Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)),
              infoFailureCode: ExitCodes["Error"].value,
              infoPolicy: Options_Applicative_Types.Intersperse.value
          };
          return Data_Newtype.un(newtypeInfoMod)(InfoMod)(m)(base);
      };
  };
  var hidden = Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
      return {
          propVisibility: Data_Ord.min(Options_Applicative_Types.optVisibilityOrd)(Options_Applicative_Types.Hidden.value)(p.propVisibility),
          propDescMod: p.propDescMod,
          propHelp: p.propHelp,
          propMetaVar: p.propMetaVar,
          propShowDefault: p.propShowDefault
      };
  }));
  var help = function (s) {
      return Options_Applicative_Builder_Internal.optionMod(Data_Newtype.over(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.optPropertiesNewtype)(Options_Applicative_Types.OptProperties)(function (p) {
          return {
              propHelp: Options_Applicative_Help_Chunk.paragraph(s),
              propDescMod: p.propDescMod,
              propMetaVar: p.propMetaVar,
              propShowDefault: p.propShowDefault,
              propVisibility: p.propVisibility
          };
      }));
  };
  var header = function (s) {
      return InfoMod(Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
          return {
              infoHeader: Options_Applicative_Help_Chunk.paragraph(s),
              infoFailureCode: i.infoFailureCode,
              infoFooter: i.infoFooter,
              infoFullDesc: i.infoFullDesc,
              infoParser: i.infoParser,
              infoPolicy: i.infoPolicy,
              infoProgDesc: i.infoProgDesc
          };
      }));
  };
  var fullDesc = InfoMod(Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
      return {
          infoFullDesc: true,
          infoFailureCode: i.infoFailureCode,
          infoFooter: i.infoFooter,
          infoHeader: i.infoHeader,
          infoParser: i.infoParser,
          infoPolicy: i.infoPolicy,
          infoProgDesc: i.infoProgDesc
      };
  }));
  var flag$prime = function (actv) {
      return function (v) {
          var rdr = (function () {
              var v1 = v.value0({
                  flagNames: [  ],
                  flagActive: actv
              });
              return new Options_Applicative_Types.FlagReader(v1.flagNames, v1.flagActive);
          })();
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
      };
  };
  var eitherReader = function (f) {
      return Control_Bind.bind(Options_Applicative_Types.readMBind)(Options_Applicative_Types.readerAsk)((function () {
          var $95 = Data_Either.either(Options_Applicative_Types.readerError)(Control_Applicative.pure(Options_Applicative_Types.readMApplicative));
          return function ($96) {
              return $95(f($96));
          };
      })());
  };
  var $$int = eitherReader(function (s) {
      var v = Data_Int.fromString(s);
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Either.Left.create("Can't parse as Int: `" + (Data_Show.show(Data_Show.showString)(s) + "`"));
      };
      if (v instanceof Data_Maybe.Just) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Options.Applicative.Builder (line 124, column 28 - line 126, column 20): " + [ v.constructor.name ]);
  });
  var command = function (cmd) {
      return function (pinfo) {
          return Options_Applicative_Builder_Internal.fieldMod(Data_Newtype.over(Options_Applicative_Builder_Internal.newtypeCommandFields)(Options_Applicative_Builder_Internal.newtypeCommandFields)(Options_Applicative_Builder_Internal.CommandFields)(function (p) {
              return {
                  cmdCommands: Data_Semigroup.append(Data_Semigroup.semigroupArray)([ new Data_Tuple.Tuple(cmd, pinfo) ])(p.cmdCommands),
                  cmdGroup: p.cmdGroup
              };
          }));
      };
  }; 
  var argument = function (p) {
      return function (v) {
          var v1 = v.value0(Data_Monoid.mempty(Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
              return "argCompleter";
          }))(Options_Applicative_Types.completerMonoid)()(Data_Monoid.monoidRecordNil))));
          var rdr = {
              crCompleter: v1.argCompleter,
              crReader: p
          };
          return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(new Options_Applicative_Types.ArgReader(rdr));
      };
  };
  var abortOption = function (err) {
      return function (m) {
          return option(Options_Applicative_Types.readerAbort(err))((function (v) {
              return Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(v)(m);
          })(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ noArgError(err), value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(Control_Category.identity(Control_Category.categoryFn)), metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("") ])));
      };
  };
  exports["argument"] = argument;
  exports["flag'"] = flag$prime;
  exports["abortOption"] = abortOption;
  exports["strOption"] = strOption;
  exports["option"] = option;
  exports["short"] = $$short;
  exports["long"] = $$long;
  exports["help"] = help;
  exports["value"] = value;
  exports["showDefault"] = showDefault;
  exports["metavar"] = metavar;
  exports["hidden"] = hidden;
  exports["command"] = command;
  exports["str"] = str;
  exports["int"] = $$int;
  exports["fullDesc"] = fullDesc;
  exports["header"] = header;
  exports["progDesc"] = progDesc;
  exports["info"] = info;
  exports["showHelpOnEmpty"] = showHelpOnEmpty;
  exports["prefs"] = prefs;
  exports["infoModSemigroup"] = infoModSemigroup;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];       
  var stdout = $foreign.process.stdout;           
  var stderr = $foreign.process.stderr;
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var argv = mkEffect(function (v) {
      return $foreign.process.argv;
  });
  exports["argv"] = argv;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["exit"] = $foreign.exit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.BashCompletion"] = $PS["Options.Applicative.BashCompletion"] || {};
  var exports = $PS["Options.Applicative.BashCompletion"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var Standard = (function () {
      function Standard() {

      };
      Standard.value = new Standard();
      return Standard;
  })();
  var Enriched = (function () {
      function Enriched(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Enriched.create = function (value0) {
          return function (value1) {
              return new Enriched(value0, value1);
          };
      };
      return Enriched;
  })();
  var zshCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "#compdef " + progn, "", "local request", "local completions", "local word", "local index=$((CURRENT - 1))", "", "request=(--bash-completion-enriched --bash-completion-index $index)", "for arg in ${words[@]}; do", "  request=(${request[@]} --bash-completion-word $arg)", "done", "", "IFS=$'\\n' completions=($( " + (prog + " \"${request[@]}\" ))"), "", "for word in $completions; do", "  local -a parts", "", "  # Split the line at a tab if there is one.", "  IFS=$'\\t' parts=($( echo $word ))", "", "  if [[ -n $parts[2] ]]; then", "     if [[ $word[1] == \"-\" ]]; then", "       local desc=(\"$parts[1] ($parts[2])\")", "       compadd -d desc -- $parts[1]", "     else", "       local desc=($(print -f  \"%-019s -- %s\" $parts[1] $parts[2]))", "       compadd -l -d desc -- $parts[1]", "     fi", "  else", "    compadd -f -- $word", "  fi", "done" ]);
      };
  }; 
  var fishCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ " function _" + progn, "    set -l cl (commandline --tokenize --current-process)", "    # Hack around fish issue #3934", "    set -l cn (commandline --tokenize --cut-at-cursor --current-process)", "    set -l cn (count $cn)", "    set -l tmpline --bash-completion-enriched --bash-completion-index $cn", "    for arg in $cl", "      set tmpline $tmpline --bash-completion-word $arg", "    end", "    for opt in (" + (prog + " $tmpline)"), "      if test -d $opt", "        echo -E \"$opt/\"", "      else", "        echo -E \"$opt\"", "      end", "    end", "end", "", "complete --no-files --command " + (progn + (" --arguments '(_" + (progn + ")'"))) ]);
      };
  };
  var bashCompletionScript = function (prog) {
      return function (progn) {
          return Control_Applicative.pure(Effect.applicativeEffect)([ "_" + (progn + "()"), "{", "    local CMDLINE", "    local IFS=$'\\n'", "    CMDLINE=(--bash-completion-index $COMP_CWORD)", "", "    for arg in ${COMP_WORDS[@]}; do", "        CMDLINE=(${CMDLINE[@]} --bash-completion-word $arg)", "    done", "", "    COMPREPLY=( $(" + (prog + " \"${CMDLINE[@]}\") )"), "}", "", "complete -o filenames -F _" + (progn + (" " + progn)) ]);
      };
  };
  var arraySplitAt = function (idx) {
      return function (arr) {
          if (idx === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          return {
              init: Data_Array.slice(0)(idx)(arr),
              rest: Data_Array.slice(idx)(Data_Array.length(arr))(arr)
          };
      };
  };
  var bashCompletionQuery = function (pinfo) {
      return function (pprefs) {
          return function (richness) {
              return function (ws) {
                  return function (i) {
                      return function (v) {
                          var v1 = arraySplitAt(i)(ws);
                          var run_completer = function (c) {
                              return Data_Newtype.un(Options_Applicative_Types.newtypeCompleter)(Options_Applicative_Types.Completer)(c)(Data_Maybe.fromMaybe("")(Data_Array.head(v1.rest)));
                          };
                          var render_line = function (len) {
                              return function (doc) {
                                  var v2 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.uncons)(Data_Array_NonEmpty.fromArray(Options_Applicative_Internal_Utils.lines(Text_PrettyPrint_Leijen.displayS(Text_PrettyPrint_Leijen.renderPretty(1.0)(len)(doc)))));
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return "";
                                  };
                                  if (v2 instanceof Data_Maybe.Just && v2.value0.tail.length === 0) {
                                      return v2.value0.head;
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return v2.value0.head + "...";
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 162, column 27 - line 165, column 43): " + [ v2.constructor.name ]);
                              };
                          };
                          var is_completion = (function () {
                              var v2 = Data_Array.head(v1.rest);
                              if (v2 instanceof Data_Maybe.Just) {
                                  return Options_Applicative_Internal_Utils.startsWith(v2.value0);
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Data_Function["const"](true);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 175, column 7 - line 177, column 30): " + [ v2.constructor.name ]);
                          })();
                          var filter_names = Data_Array.filter(is_completion);
                          var show_names = (function () {
                              var $84 = Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption);
                              return function ($85) {
                                  return filter_names($84($85));
                              };
                          })();
                          var compl = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.completionMonadP)(pinfo)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Array.drop(1)(v1.init)));
                          var add_opt_help = function (dictFunctor) {
                              return function (opt) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (o) {
                                          var h = Data_Newtype.un(Options_Applicative_Help_Chunk.chunkNewtype)(Options_Applicative_Help_Chunk.Chunk)(Options_Applicative_Types.optHelp(opt));
                                          return Data_Maybe.maybe(o)(function (h$prime) {
                                              return o + ("\x09" + render_line(richness.value0)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 138, column 24 - line 143, column 79): " + [ richness.constructor.name ]);
                              };
                          };
                          var add_cmd_help = function (dictFunctor) {
                              return function (p) {
                                  if (richness instanceof Standard) {
                                      return Control_Category.identity(Control_Category.categoryFn);
                                  };
                                  if (richness instanceof Enriched) {
                                      return Data_Functor.map(dictFunctor)(function (cmd) {
                                          var h = Control_Bind.bind(Data_Maybe.bindMaybe)(p(cmd))((function () {
                                              var $86 = Data_Newtype.un(Options_Applicative_Help_Chunk.chunkNewtype)(Options_Applicative_Help_Chunk.Chunk);
                                              var $87 = Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo);
                                              return function ($88) {
                                                  return $86((function (v2) {
                                                      return v2.infoProgDesc;
                                                  })($87($88)));
                                              };
                                          })());
                                          return Data_Maybe.maybe(cmd)(function (h$prime) {
                                              return cmd + ("\x09" + render_line(richness.value1)(h$prime));
                                          })(h);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 148, column 22 - line 153, column 85): " + [ richness.constructor.name ]);
                              };
                          };
                          var opt_completions = function (argPolicy) {
                              return function (hinfo) {
                                  return function (opt) {
                                      var v2 = (Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain;
                                      if (v2 instanceof Options_Applicative_Types.OptReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.FlagReader) {
                                          if (Data_Eq.notEq(Options_Applicative_Types.argPolicyEq)(argPolicy)(Options_Applicative_Types.AllPositionals.value)) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_opt_help(Data_Functor.functorArray)(opt)(show_names(v2.value0)));
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.ArgReader) {
                                          if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return run_completer((Data_Newtype.un(Options_Applicative_Types.newtypeCReader)(Options_Applicative_Types.CReader)(v2.value0)).crCompleter);
                                          };
                                      };
                                      if (v2 instanceof Options_Applicative_Types.CmdReader) {
                                          if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(hinfo)).hinfoUnreachableArgs) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                                          };
                                          if (Data_Boolean.otherwise) {
                                              return Control_Applicative.pure(Effect.applicativeEffect)(add_cmd_help(Data_Functor.functorArray)(v2.value2)(filter_names(v2.value1)));
                                          };
                                      };
                                      throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 113, column 43 - line 133, column 53): " + [ v2.constructor.name ]);
                                  };
                              };
                          };
                          var list_options = function (a) {
                              var $89 = Data_Functor.map(Effect.functorEffect)(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray));
                              var $90 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
                              var $91 = Options_Applicative_Common.mapParser(opt_completions(a));
                              return function ($92) {
                                  return $89($90($91($92)));
                              };
                          };
                          var v2 = Options_Applicative_Internal.runCompletion(compl)(pprefs);
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Left) {
                              return Data_Exists.runExists(function (p) {
                                  return list_options(v2.value0.value0.value1)(p);
                              })(v2.value0.value0.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Just && v2.value0 instanceof Data_Either.Right) {
                              return run_completer(v2.value0.value0);
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect.applicativeEffect)([  ]);
                          };
                          throw new Error("Failed pattern match at Options.Applicative.BashCompletion (line 83, column 52 - line 89, column 15): " + [ v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var bashCompletionParser = function (pinfo) {
      return function (pprefs) {
          var failure = function (opts) {
              return {
                  execCompletion: function (progn) {
                      return Data_Functor.map(Effect.functorEffect)(Options_Applicative_Internal_Utils.unLines(Data_Foldable.foldableArray))(opts(progn));
                  }
              };
          };
          var complParser = Data_Foldable.oneOf(Data_Foldable.foldableArray)(Options_Applicative_Types.parserPlus)([ Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionQuery(pinfo)(pprefs))(Control_Alt.alt(Options_Applicative_Types.parserAlt)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Control_Apply.apply(Options_Applicative_Types.parserApply)(Options_Applicative_Builder["flag'"](Enriched.create)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.flagFieldsHasName)("bash-completion-enriched"))(Options_Applicative_Builder_Internal.internal)))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-option-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-command-desc-length"))(Options_Applicative_Builder_Internal.internal))(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(40)))))(Control_Applicative.pure(Options_Applicative_Types.parserApplicative)(Standard.value))))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Array.fromFoldable(Data_List_Types.foldableList))(Options_Applicative_Types.many(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-word"))(Options_Applicative_Builder_Internal.internal))))))(Options_Applicative_Builder.option(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-index"))(Options_Applicative_Builder_Internal.internal)))), Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(bashCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("bash-completion-script"))(Options_Applicative_Builder_Internal.internal)))), Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(fishCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("fish-completion-script"))(Options_Applicative_Builder_Internal.internal)))), Data_Functor.map(Options_Applicative_Types.parserFunctor)(failure)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(zshCompletionScript)(Options_Applicative_Builder.strOption(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("zsh-completion-script"))(Options_Applicative_Builder_Internal.internal)))) ]);
          return complParser;
      };
  };
  exports["bashCompletionParser"] = bashCompletionParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Help.Types"] = $PS["Options.Applicative.Help.Types"] || {};
  var exports = $PS["Options.Applicative.Help.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var ParserHelp = function (x) {
      return x;
  }
  var parserHelpMonoid = Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpBody";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpError";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpFooter";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpHeader";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpSuggestions";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordCons(new Data_Symbol.IsSymbol(function () {
      return "helpUsage";
  }))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup))()(Data_Monoid.monoidRecordNil)))))));
  var newtypeParserHelp = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserHelp);
  var helpText = function (v) {
      return Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.vsepChunks([ v.helpError, v.helpSuggestions, v.helpHeader, v.helpUsage, v.helpBody, v.helpFooter ]));
  };
  var renderHelp = function (cols) {
      var $5 = Text_PrettyPrint_Leijen.renderPretty(1.0)(cols);
      return function ($6) {
          return Text_PrettyPrint_Leijen.displayS($5(helpText($6)));
      };
  };
  exports["ParserHelp"] = ParserHelp;
  exports["renderHelp"] = renderHelp;
  exports["newtypeParserHelp"] = newtypeParserHelp;
  exports["parserHelpMonoid"] = parserHelpMonoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Help.Core"] = $PS["Options.Applicative.Help.Core"] || {};
  var exports = $PS["Options.Applicative.Help.Core"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var OptDescStyle = function (x) {
      return x;
  };
  var usageHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpUsage: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var suggestionsHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpSuggestions: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var newtypeOptDescStyle = new Data_Newtype.Newtype(function (n) {
      return n;
  }, OptDescStyle);
  var intersperse = function (sep) {
      var $31 = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray);
      var $32 = Data_Array.mapWithIndex(function (idx) {
          return function (e) {
              var $16 = idx === 0;
              if ($16) {
                  return [ e ];
              };
              return [ sep, e ];
          };
      });
      return function ($33) {
          return $31($32($33));
      };
  };
  var optDesc = function (pprefs) {
      return function (style) {
          return function (info) {
              return function (opt) {
                  var suffix = (function () {
                      if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(info)).hinfoMulti) {
                          return Options_Applicative_Help_Chunk.stringChunk((Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefMultiSuffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 58, column 7 - line 62, column 17): " + [  ]);
                  })();
                  var show_opt = (function () {
                      if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault && !(Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descOptional) {
                          return false;
                      };
                      if (Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Hidden.value)) {
                          return (Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descHidden;
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Eq.eq(Options_Applicative_Types.optVisibilityEq)(Options_Applicative_Types.optVisibility(opt))(Options_Applicative_Types.Visible.value);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 51, column 7 - line 57, column 39): " + [  ]);
                  })();
                  var ns = Options_Applicative_Common.optionNames((Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain);
                  var mv = Options_Applicative_Help_Chunk.stringChunk(Options_Applicative_Types.optMetaVar(opt));
                  var descs = Data_Functor.map(Data_Functor.functorArray)(function ($34) {
                      return Text_PrettyPrint_Leijen.string(Options_Applicative_Common.showOption($34));
                  })(Data_Array.sort(Options_Applicative_Types.optNameOrd)(ns));
                  var render = function (chunk) {
                      if (!show_opt) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (Options_Applicative_Help_Chunk.isEmpty(chunk) || !(Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descSurround) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if ((Data_Newtype.un(Options_Applicative_Types.newtypeOptHelpInfo)(Options_Applicative_Types.OptHelpInfo)(info)).hinfoDefault) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.brackets)(chunk))(suffix);
                      };
                      if (Data_Array["null"](Data_Array.drop(1)(descs))) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(chunk)(suffix);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Semigroup.append(Options_Applicative_Help_Chunk.chunkSemigroup(Text_PrettyPrint_Leijen.docSemigroup))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(chunk))(suffix);
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 63, column 7 - line 73, column 43): " + [ chunk.constructor.name ]);
                  };
                  var desc$prime = Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.listToChunk(Text_PrettyPrint_Leijen.docMonoid)(intersperse((Data_Newtype.un(newtypeOptDescStyle)(OptDescStyle)(style)).descSep)(descs)))(mv);
                  return Data_Maybe.maybe(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor))(Options_Applicative_Types.optDescMod(opt))(render(desc$prime));
              };
          };
      };
  };
  var headerHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpHeader: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fullDesc = function (pprefs) {
      var style = {
          descSep: Text_PrettyPrint_Leijen.string(","),
          descHidden: true,
          descOptional: true,
          descSurround: false
      };
      var doc = function (info) {
          return function (opt) {
              var show_def = function (s) {
                  return Text_PrettyPrint_Leijen.parens(Text_PrettyPrint_Leijen.appendWithSpace(Text_PrettyPrint_Leijen.string("default:"))(Text_PrettyPrint_Leijen.string(s)));
              };
              var n = optDesc(pprefs)(style)(info)(opt);
              var hdef = Options_Applicative_Help_Chunk.Chunk(Data_Functor.map(Data_Maybe.functorMaybe)(show_def)(Options_Applicative_Types.optShowDefault(opt)));
              var h = Options_Applicative_Types.optHelp(opt);
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(!Options_Applicative_Help_Chunk.isEmpty(n)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(!Options_Applicative_Help_Chunk.isEmpty(h)))(function () {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(n), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(Options_Applicative_Help_Chunk.chunkBeside(h)(hdef)))));
                  });
              });
          };
      };
      var $35 = Options_Applicative_Common.mapParser(doc);
      return function ($36) {
          return Options_Applicative_Help_Chunk.tabulate(Data_Array.catMaybes($35($36)));
      };
  };
  var footerHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpFooter: chunk,
              helpBody: v.helpBody,
              helpError: v.helpError,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var fold_tree = function (v) {
      if (v instanceof Options_Applicative_Types.Leaf) {
          return v.value0;
      };
      if (v instanceof Options_Applicative_Types.MultNode) {
          return Data_Foldable.foldr(Data_Foldable.foldableArray)(function ($37) {
              return Options_Applicative_Help_Chunk.chunkBesideOrBelow(fold_tree($37));
          })(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v.value0);
      };
      if (v instanceof Options_Applicative_Types.AltNode) {
          var alt_node = function (v1) {
              if (v1.length === 1) {
                  return v1[0];
              };
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.parens)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Options_Applicative_Help_Chunk.chunked(function (x) {
                  return function (y) {
                      return Text_PrettyPrint_Leijen.appendWithSoftline(x)(Text_PrettyPrint_Leijen.appendWithSoftline(Text_PrettyPrint_Leijen["char"]("|"))(y));
                  };
              }))(Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)))(v1));
          };
          return alt_node(Data_Array.filter((function () {
              var $38 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              return function ($39) {
                  return $38(Options_Applicative_Help_Chunk.isEmpty($39));
              };
          })())(Data_Functor.map(Data_Functor.functorArray)(fold_tree)(v.value0)));
      };
      throw new Error("Failed pattern match at Options.Applicative.Help.Core (line 116, column 1 - line 116, column 46): " + [ v.constructor.name ]);
  };
  var errorHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpError: chunk,
              helpBody: v.helpBody,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var cmdDesc = (function () {
      var desc = function (v) {
          return function (opt) {
              var v1 = (Data_Newtype.un(Options_Applicative_Types.optionNewtype)(Options_Applicative_Types.Option)(opt)).optMain;
              if (v1 instanceof Options_Applicative_Types.CmdReader) {
                  return Data_Tuple.Tuple.create(v1.value0)(Options_Applicative_Help_Chunk.tabulate(Control_Bind.bind(Control_Bind.bindArray)(Data_Array.reverse(v1.value1))(function (cmd) {
                      return Control_Bind.bind(Control_Bind.bindArray)(Data_Maybe.maybe([  ])(Control_Applicative.pure(Control_Applicative.applicativeArray))(Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $40 = Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo);
                          return function ($41) {
                              return (function (v2) {
                                  return v2.infoProgDesc;
                              })($40($41));
                          };
                      })())(v1.value2(cmd))))(function (d) {
                          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(Text_PrettyPrint_Leijen.string(cmd), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(d))));
                      });
                  })));
              };
              return Data_Monoid.mempty(Data_Tuple.monoidTuple(Data_Maybe.monoidMaybe(Data_Semigroup.semigroupString))(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup)));
          };
      };
      return Options_Applicative_Common.mapParser(desc);
  })();
  var briefDesc$prime = function (showOptional) {
      return function (pprefs) {
          var style = {
              descSep: Text_PrettyPrint_Leijen.string("|"),
              descHidden: false,
              descOptional: showOptional,
              descSurround: true
          };
          var $42 = Options_Applicative_Common.treeMapParser(optDesc(pprefs)(style));
          return function ($43) {
              return fold_tree($42($43));
          };
      };
  };
  var missingDesc = briefDesc$prime(false);
  var briefDesc = briefDesc$prime(true);
  var parserUsage = function (pprefs) {
      return function (p) {
          return function (progn) {
              return Text_PrettyPrint_Leijen.hsep([ Text_PrettyPrint_Leijen.string("Usage:"), Text_PrettyPrint_Leijen.string(progn), Text_PrettyPrint_Leijen.align(Options_Applicative_Help_Chunk.extractChunk(Text_PrettyPrint_Leijen.docMonoid)(briefDesc(pprefs)(p))) ]);
          };
      };
  };
  var bodyHelp = function (chunk) {
      return Data_Newtype.over(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.newtypeParserHelp)(Options_Applicative_Help_Types.ParserHelp)(function (v) {
          return {
              helpBody: chunk,
              helpError: v.helpError,
              helpFooter: v.helpFooter,
              helpHeader: v.helpHeader,
              helpSuggestions: v.helpSuggestions,
              helpUsage: v.helpUsage
          };
      })(Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid));
  };
  var parserHelp = function (pprefs) {
      return function (p) {
          var with_title = function (title) {
              return Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(function (v) {
                  return Text_PrettyPrint_Leijen.appendWithLine(Text_PrettyPrint_Leijen.string(title))(v);
              });
          };
          var group_title = function (arr) {
              var v = Data_Array_NonEmpty.uncons(arr);
              return with_title(Data_Maybe.fromMaybe("Available commands:")(Data_Tuple.fst(v.head)))(Options_Applicative_Help_Chunk.vcatChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Data_Tuple.snd(v.head) ])(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.tail))));
          };
          var cs = Data_Array.groupBy(Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqString)))(Data_Tuple.fst))(cmdDesc(p));
          return bodyHelp(Options_Applicative_Help_Chunk.vsepChunks(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ with_title("Available options:")(fullDesc(pprefs)(p)) ])(Data_Functor.map(Data_Functor.functorArray)(group_title)(cs))));
      };
  };
  exports["missingDesc"] = missingDesc;
  exports["errorHelp"] = errorHelp;
  exports["headerHelp"] = headerHelp;
  exports["suggestionsHelp"] = suggestionsHelp;
  exports["usageHelp"] = usageHelp;
  exports["footerHelp"] = footerHelp;
  exports["parserHelp"] = parserHelp;
  exports["parserUsage"] = parserUsage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Help.Levenshtein"] = $PS["Options.Applicative.Help.Levenshtein"] || {};
  var exports = $PS["Options.Applicative.Help.Levenshtein"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function_Memoize = $PS["Data.Function.Memoize"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];                
  var editDistance = function (dictEq) {
      return function (xs) {
          return function (ys) {
              var dist$prime = Data_Function_Memoize.memoize2(Data_Function_Memoize.tabulateNat)(Data_Function_Memoize.tabulateNat)(function (a) {
                  return function (b) {
                      return dist(a)(b);
                  };
              });
              var dist = function (v) {
                  return function (v1) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 === 0) {
                          return v;
                      };
                      return Data_Semigroup_Foldable.minimum(Data_Ord.ordInt)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(dist$prime(v - 1 | 0)(v1) + 1 | 0, [ dist$prime(v)(v1 - 1 | 0) + 1 | 0, (function (dictPartial) {
                          var $6 = Data_Eq.eq(dictEq)(xs[v - 1 | 0])(ys[v1 - 1 | 0]);
                          if ($6) {
                              return dist$prime(v - 1 | 0)(v1 - 1 | 0);
                          };
                          return 1 + dist$prime(v - 1 | 0)(v1 - 1 | 0) | 0;
                      })() ]));
                  };
              };
              return dist$prime(Data_Array.length(xs))(Data_Array.length(ys));
          };
      };
  };
  exports["editDistance"] = editDistance;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Options.Applicative.Extra"] = $PS["Options.Applicative.Extra"] || {};
  var exports = $PS["Options.Applicative.Extra"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var ExitCodes = $PS["ExitCodes"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var Options_Applicative_BashCompletion = $PS["Options.Applicative.BashCompletion"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Common = $PS["Options.Applicative.Common"];
  var Options_Applicative_Help_Chunk = $PS["Options.Applicative.Help.Chunk"];
  var Options_Applicative_Help_Core = $PS["Options.Applicative.Help.Core"];
  var Options_Applicative_Help_Levenshtein = $PS["Options.Applicative.Help.Levenshtein"];
  var Options_Applicative_Help_Types = $PS["Options.Applicative.Help.Types"];
  var Options_Applicative_Internal = $PS["Options.Applicative.Internal"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Text_PrettyPrint_Leijen = $PS["Text.PrettyPrint.Leijen"];                
  var renderFailure = function (failure) {
      return function (progn) {
          var v = Data_Newtype.un(Options_Applicative_Types.newtypeParserFailure)(Options_Applicative_Types.ParserFailure)(failure)(progn);
          return new Data_Tuple.Tuple(Options_Applicative_Help_Types.renderHelp(v.value1.value1.value0)(v.value0), v.value1.value0);
      };
  };
  var parserFailure = function (pprefs) {
      return function (pinfo) {
          return function (msg) {
              return function (ctx) {
                  var with_context = function (arr) {
                      return function (i) {
                          return function (f) {
                              var v = Data_Array.head(arr);
                              if (v instanceof Data_Maybe.Nothing) {
                                  return f([  ])(i);
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  return Data_Exists.runExists(function (i$prime) {
                                      return f(Options_Applicative_Internal.contextNames(arr))(i$prime);
                                  })(v.value0.value1);
                              };
                              throw new Error("Failed pattern match at Options.Applicative.Extra (line 184, column 28 - line 186, column 73): " + [ v.constructor.name ]);
                          };
                      };
                  };
                  var usage_help = function (progn) {
                      return function (names) {
                          return function (v) {
                              if (msg instanceof Options_Applicative_Types.InfoMsg) {
                                  return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                              };
                              return Options_Applicative_Help_Core.usageHelp(Options_Applicative_Help_Chunk.vcatChunks([ Control_Applicative.pure(Options_Applicative_Help_Chunk.chunkApplicative)(Options_Applicative_Help_Core.parserUsage(pprefs)(v.infoParser)(Options_Applicative_Internal_Utils.unWords(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ progn ])(names)))), Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(2))(v.infoProgDesc) ]));
                          };
                      };
                  };
                  var suggestion_help = Options_Applicative_Help_Core.suggestionsHelp((function () {
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var opt_completions = function (v) {
                              return function (v1) {
                                  if (v1.optMain instanceof Options_Applicative_Types.OptReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.FlagReader) {
                                      return Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Common.showOption)(v1.optMain.value0);
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.ArgReader) {
                                      return [  ];
                                  };
                                  if (v1.optMain instanceof Options_Applicative_Types.CmdReader) {
                                      if (v.hinfoUnreachableArgs) {
                                          return [  ];
                                      };
                                      if (Data_Boolean.otherwise) {
                                          return v1.optMain.value1;
                                      };
                                  };
                                  throw new Error("Failed pattern match at Options.Applicative.Extra (line 278, column 64 - line 285, column 37): " + [ v1.optMain.constructor.name ]);
                              };
                          };
                          var possibles = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(Data_Exists.runExists(function (zz) {
                              return Options_Applicative_Common.mapParser(opt_completions)(zz);
                          })(msg.value1.value0));
                          var isClose = function (a) {
                              return Data_Function.on(Options_Applicative_Help_Levenshtein.editDistance(Data_Eq.eqChar))(Data_String_CodeUnits.toCharArray)(a)(msg.value0) < 3;
                          };
                          var good = Data_Array.filter(isClose)(possibles);
                          var prose = (function () {
                              var $43 = Data_Array.length(good) < 2;
                              if ($43) {
                                  return Options_Applicative_Help_Chunk.stringChunk("Did you mean this?");
                              };
                              return Options_Applicative_Help_Chunk.stringChunk("Did you mean one of these?");
                          })();
                          var suggestions = Control_Apply.apply(Options_Applicative_Help_Chunk.chunkApply)(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.appendWithLine)(prose))(Data_Functor.map(Options_Applicative_Help_Chunk.chunkFunctor)(Text_PrettyPrint_Leijen.indent(4))(Options_Applicative_Help_Chunk.vcatChunks(Data_Functor.map(Data_Functor.functorArray)(Options_Applicative_Help_Chunk.stringChunk)(good))));
                          return suggestions;
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                  })());
                  var show_full_help = (function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return true;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return true;
                      };
                      return (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnError;
                  })();
                  var exit_code = (function () {
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.UnknownError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          return (Data_Newtype.un(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(pinfo)).infoFailureCode;
                      };
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return ExitCodes.Success.value;
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return ExitCodes.Success.value;
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 171, column 17 - line 178, column 44): " + [ msg.constructor.name ]);
                  })();
                  var error_help = Options_Applicative_Help_Core.errorHelp((function () {
                      if (msg instanceof Options_Applicative_Types.ShowHelpText) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.ErrorMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.InfoMsg) {
                          return Options_Applicative_Help_Chunk.stringChunk(msg.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError && (msg.value0 instanceof Options_Applicative_Types.CmdStart && (Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefShowHelpOnEmpty)) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      if (msg instanceof Options_Applicative_Types.MissingError) {
                          return Data_Exists.runExists(function (x) {
                              return Options_Applicative_Help_Chunk.chunkBeside(Options_Applicative_Help_Chunk.stringChunk("Missing:"))(Options_Applicative_Help_Core.missingDesc(pprefs)(x));
                          })(msg.value1.value0);
                      };
                      if (msg instanceof Options_Applicative_Types.ExpectsArgError) {
                          return Options_Applicative_Help_Chunk.stringChunk("The option `" + (msg.value0 + "` expects an argument."));
                      };
                      if (msg instanceof Options_Applicative_Types.UnexpectedError) {
                          var msg$prime = (function () {
                              var $67 = Options_Applicative_Internal_Utils.startsWith("-")(msg.value0);
                              if ($67) {
                                  return "Invalid option `" + (msg.value0 + "'");
                              };
                              return "Invalid argument `" + (msg.value0 + "'");
                          })();
                          return Options_Applicative_Help_Chunk.stringChunk(msg$prime);
                      };
                      if (msg instanceof Options_Applicative_Types.UnknownError) {
                          return Data_Monoid.mempty(Options_Applicative_Help_Chunk.chunkMonoid(Text_PrettyPrint_Leijen.docSemigroup));
                      };
                      throw new Error("Failed pattern match at Options.Applicative.Extra (line 197, column 30 - line 229, column 18): " + [ msg.constructor.name ]);
                  })());
                  var base_help = function (v) {
                      var h = Options_Applicative_Help_Core.headerHelp(v.infoHeader);
                      var f = Options_Applicative_Help_Core.footerHelp(v.infoFooter);
                      if (show_full_help) {
                          return Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Help_Types.parserHelpMonoid)([ h, f, Options_Applicative_Help_Core.parserHelp(pprefs)(v.infoParser) ]);
                      };
                      return Data_Monoid.mempty(Options_Applicative_Help_Types.parserHelpMonoid);
                  };
                  return Options_Applicative_Types.ParserFailure(function (progn) {
                      var h = with_context(ctx)(pinfo)(function (names) {
                          return function (pinfo$prime) {
                              return Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Help_Types.parserHelpMonoid)([ base_help(pinfo$prime), usage_help(progn)(names)(pinfo$prime), suggestion_help, error_help ]);
                          };
                      });
                      return new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(exit_code, new Data_Tuple.Tuple((Data_Newtype.un(Options_Applicative_Types.parserPrefsNewtype)(Options_Applicative_Types.ParserPrefs)(pprefs)).prefColumns, Data_Unit.unit)));
                  });
              };
          };
      };
  };
  var helper = Options_Applicative_Builder.abortOption(Options_Applicative_Types.ShowHelpText.value)(Data_Foldable.fold(Data_Foldable.foldableArray)(Options_Applicative_Builder_Internal.modMonoid)([ Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("help"), Options_Applicative_Builder["short"](Options_Applicative_Builder_Internal.optionFieldsHasName)("h"), Options_Applicative_Builder.help("Show this help text"), Options_Applicative_Builder.hidden ]));
  var hsubparser = function (m) {
      var v = Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.commandFieldsHasMetavar)("COMMAND"))(m);
      var v1 = Options_Applicative_Builder_Internal.mkCommand(m);
      var add_helper = Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (pinfo) {
          return {
              infoParser: Options_Applicative_Internal_Utils.apApplyFlipped(Options_Applicative_Types.parserApply)(pinfo.infoParser)(helper),
              infoFailureCode: pinfo.infoFailureCode,
              infoFooter: pinfo.infoFooter,
              infoFullDesc: pinfo.infoFullDesc,
              infoHeader: pinfo.infoHeader,
              infoPolicy: pinfo.infoPolicy,
              infoProgDesc: pinfo.infoProgDesc
          };
      });
      var rdr = new Options_Applicative_Types.CmdReader(v1.value0, v1.value1.value0, (function () {
          var $105 = Data_Functor.map(Data_Maybe.functorMaybe)(add_helper);
          return function ($106) {
              return $105(v1.value1.value1.value0($106));
          };
      })());
      return Options_Applicative_Builder_Internal.mkParser(v.value1)(v.value2)(rdr);
  };
  var getProgName = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(function (args) {
      return Data_Maybe.fromMaybe("")(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(args)(1))(function (executablePath) {
          return Data_Array.last(Data_String_Common.split("/")(executablePath));
      }));
  });
  var getArgs = Data_Functor.mapFlipped(Effect.functorEffect)(Node_Process.argv)(Data_Array.drop(2));
  var exitWith = function (c) {
      return Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(c));
  };
  var exitSuccess = Node_Process.exit(Data_Enum.fromEnum(ExitCodes.boundedEnumExitCode)(ExitCodes.Success.value));
  var handleParseResult = function (v) {
      if (v instanceof Options_Applicative_Types.Success) {
          return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
      };
      if (v instanceof Options_Applicative_Types.Failure) {
          return function __do() {
              var progn = getProgName();
              var v1 = renderFailure(v.value0)(progn);
              var stream = (function () {
                  if (v1.value1 instanceof ExitCodes.Success) {
                      return Node_Process.stdout;
                  };
                  return Node_Process.stderr;
              })();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(v1.value0 + "\x0a")(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitWith(v1.value1)();
          };
      };
      if (v instanceof Options_Applicative_Types.CompletionInvoked) {
          return function __do() {
              var progn = getProgName();
              var msg = (Data_Newtype.un(Options_Applicative_Types.newtypeCompletionResult)(Options_Applicative_Types.CompletionResult)(v.value0)).execCompletion(progn)();
              Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(Node_Process.stdout)(Node_Encoding.UTF8.value)(msg)(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit))))();
              return exitSuccess();
          };
      };
      throw new Error("Failed pattern match at Options.Applicative.Extra (line 110, column 1 - line 110, column 58): " + [ v.constructor.name ]);
  };
  var execParserPure = function (pprefs) {
      return function (pinfo) {
          return function (args) {
              var pinfo$prime = Data_Newtype.over(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.parserInfoNewtype)(Options_Applicative_Types.ParserInfo)(function (i) {
                  return {
                      infoParser: Control_Alt.alt(Options_Applicative_Types.parserAlt)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Left.create)(Options_Applicative_BashCompletion.bashCompletionParser(pinfo)(pprefs)))(Data_Functor.map(Options_Applicative_Types.parserFunctor)(Data_Either.Right.create)(i.infoParser)),
                      infoFailureCode: i.infoFailureCode,
                      infoFooter: i.infoFooter,
                      infoFullDesc: i.infoFullDesc,
                      infoHeader: i.infoHeader,
                      infoPolicy: i.infoPolicy,
                      infoProgDesc: i.infoProgDesc
                  };
              })(pinfo);
              var p = Options_Applicative_Common.runParserInfo(Options_Applicative_Internal.pMonadP)(pinfo$prime)(Data_List.fromFoldable(Data_Foldable.foldableArray)(args));
              var v = Options_Applicative_Internal.runP(p)(pprefs);
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Right) {
                  return new Options_Applicative_Types.Success(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Right && v.value0.value0 instanceof Data_Either.Left) {
                  return new Options_Applicative_Types.CompletionInvoked(v.value0.value0.value0);
              };
              if (v.value0 instanceof Data_Either.Left) {
                  return Options_Applicative_Types.Failure.create(parserFailure(pprefs)(pinfo)(v.value0.value0)(v.value1));
              };
              throw new Error("Failed pattern match at Options.Applicative.Extra (line 144, column 3 - line 147, column 73): " + [ v.constructor.name ]);
          };
      };
  };
  var customExecParser = function (pprefs) {
      return function (pinfo) {
          return Control_Bind.bind(Effect.bindEffect)(Data_Functor.map(Effect.functorEffect)(execParserPure(pprefs)(pinfo))(getArgs))(handleParseResult);
      };
  };
  exports["helper"] = helper;
  exports["hsubparser"] = hsubparser;
  exports["customExecParser"] = customExecParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Core = $PS["Core"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Generate_1 = $PS["Generate"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Options_Applicative_Builder = $PS["Options.Applicative.Builder"];
  var Options_Applicative_Builder_Internal = $PS["Options.Applicative.Builder.Internal"];
  var Options_Applicative_Extra = $PS["Options.Applicative.Extra"];
  var Options_Applicative_Internal_Utils = $PS["Options.Applicative.Internal.Utils"];
  var Options_Applicative_Types = $PS["Options.Applicative.Types"];
  var Simple_JSON = $PS["Simple.JSON"];                
  var Generate = (function () {
      function Generate(value0) {
          this.value0 = value0;
      };
      Generate.create = function (value0) {
          return new Generate(value0);
      };
      return Generate;
  })();
  var Install = (function () {
      function Install(value0) {
          this.value0 = value0;
      };
      Install.create = function (value0) {
          return new Install(value0);
      };
      return Install;
  })();
  var Build = (function () {
      function Build(value0) {
          this.value0 = value0;
      };
      Build.create = function (value0) {
          return new Build(value0);
      };
      return Build;
  })();
  var BuildNix = (function () {
      function BuildNix(value0) {
          this.value0 = value0;
      };
      BuildNix.create = function (value0) {
          return new BuildNix(value0);
      };
      return BuildNix;
  })();
  var SpagoStyle = (function () {
      function SpagoStyle() {

      };
      SpagoStyle.value = new SpagoStyle();
      return SpagoStyle;
  })();
  var NixStyle = (function () {
      function NixStyle() {

      };
      NixStyle.value = new NixStyle();
      return NixStyle;
  })();
  var Args = (function () {
      function Args(value0) {
          this.value0 = value0;
      };
      Args.create = function (value0) {
          return new Args(value0);
      };
      return Args;
  })();
  var install = function (cacheDir) {
      return function (extraArgs) {
          var installPath = cacheDir + "/install";
          var installCmd = installPath + "/bin/install-spago-style";
          return Control_Bind.bind(Effect_Aff.bindAff)(Core.buildScript(Data_List_Types.foldableList)({
              attr: "installSpagoStyle",
              path: installPath,
              extraArgs: extraArgs
          }))(function (nixBuildResult) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                  if (nixBuildResult instanceof Node_ChildProcess.Normally && nixBuildResult.value0 === 0) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  if (nixBuildResult instanceof Node_ChildProcess.Normally) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix install' command failed to build the 'installSpagoStyle' Nix attribute"))(function () {
                          return Core.exit(nixBuildResult.value0);
                      });
                  };
                  if (nixBuildResult instanceof Node_ChildProcess.BySignal) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix install' command was killed by signal " + (Data_Show.show(Data_Posix_Signal.showSignal)(nixBuildResult.value0) + " while building the 'installSpagoStyle' Nix attribute")))(function () {
                          return Core.exit(1);
                      });
                  };
                  throw new Error("Failed pattern match at Main (line 117, column 3 - line 124, column 13): " + [ nixBuildResult.constructor.name ]);
              })())(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Core.runCommand({
                      cmd: installCmd,
                      args: [  ]
                  }))(function (installResult) {
                      if (installResult instanceof Node_ChildProcess.Normally && installResult.value0 === 0) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Wrote install script to " + installPath))(function () {
                              return Core.exit(0);
                          });
                      };
                      if (installResult instanceof Node_ChildProcess.Normally) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix install' command failed"))(function () {
                              return Core.exit(installResult.value0);
                          });
                      };
                      if (installResult instanceof Node_ChildProcess.BySignal) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix install' command was killed by signal " + Data_Show.show(Data_Posix_Signal.showSignal)(installResult.value0)))(function () {
                              return Core.exit(1);
                          });
                      };
                      throw new Error("Failed pattern match at Main (line 126, column 3 - line 135, column 13): " + [ installResult.constructor.name ]);
                  });
              });
          });
      };
  };
  var build = function (buildStyle) {
      return function (cacheDir) {
          return function (args) {
              var buildStyleAttr = (function () {
                  if (buildStyle instanceof SpagoStyle) {
                      return "buildSpagoStyle";
                  };
                  if (buildStyle instanceof NixStyle) {
                      return "buildFromNixStore";
                  };
                  throw new Error("Failed pattern match at Main (line 182, column 22 - line 184, column 38): " + [ buildStyle.constructor.name ]);
              })();
              var buildPath = cacheDir + "/build";
              var buildCmd = buildPath + (function () {
                  if (buildStyle instanceof SpagoStyle) {
                      return "/bin/build-spago-style";
                  };
                  if (buildStyle instanceof NixStyle) {
                      return "/bin/build-from-store";
                  };
                  throw new Error("Failed pattern match at Main (line 179, column 29 - line 181, column 42): " + [ buildStyle.constructor.name ]);
              })();
              return Control_Bind.bind(Effect_Aff.bindAff)(Core.buildScript(Data_List_Types.foldableList)({
                  attr: buildStyleAttr,
                  path: buildPath,
                  extraArgs: args.extraArgs
              }))(function (nixBuildResult) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                      if (nixBuildResult instanceof Node_ChildProcess.Normally && nixBuildResult.value0 === 0) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      if (nixBuildResult instanceof Node_ChildProcess.Normally) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix build' command failed to failed to build the '" + (buildStyleAttr + "' Nix attribute")))(function () {
                              return Core.exit(nixBuildResult.value0);
                          });
                      };
                      if (nixBuildResult instanceof Node_ChildProcess.BySignal) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix build' command nix-build of " + (buildStyleAttr + (" was killed by " + Data_Show.show(Data_Posix_Signal.showSignal)(nixBuildResult.value0)))))(function () {
                              return Core.exit(1);
                          });
                      };
                      throw new Error("Failed pattern match at Main (line 147, column 3 - line 154, column 13): " + [ nixBuildResult.constructor.name ]);
                  })())(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.realpath(args.spagoDhall))(function (absSpagoDhall) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Alt.alt(Effect_Aff.altAff)(Core.runDhallToJSON("(" + (absSpagoDhall + ").sources")))(Control_Applicative.pure(Effect_Aff.applicativeAff)("")))(function (json) {
                              return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                  var v = Simple_JSON.readJSON(Simple_JSON.readArray(Simple_JSON.readString))(json);
                                  if (v instanceof Data_Either.Left) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("failed to read sources from " + (args.spagoDhall + " using dhall-to-json.")))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("using default glob: " + "src/**/*.purs"))(function () {
                                              return Control_Applicative.pure(Effect_Aff.applicativeAff)([ "src/**/*.purs" ]);
                                          });
                                      });
                                  };
                                  if (v instanceof Data_Either.Right) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("using sources from " + (args.spagoDhall + (": " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(v.value0)))))(function () {
                                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0);
                                      });
                                  };
                                  throw new Error("Failed pattern match at Main (line 157, column 12 - line 165, column 14): " + [ v.constructor.name ]);
                              })())(function (globs) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Core.runCommand({
                                      cmd: buildCmd,
                                      args: globs
                                  }))(function (buildResult) {
                                      if (buildResult instanceof Node_ChildProcess.Normally && buildResult.value0 === 0) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.log(Effect_Aff.monadEffectAff)("Wrote build script to " + buildPath))(function () {
                                              return Core.exit(0);
                                          });
                                      };
                                      if (buildResult instanceof Node_ChildProcess.Normally) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix build' command failed"))(function () {
                                              return Core.exit(buildResult.value0);
                                          });
                                      };
                                      if (buildResult instanceof Node_ChildProcess.BySignal) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class_Console.error(Effect_Aff.monadEffectAff)("Error: the 'spago2nix build' command was killed by signal " + Data_Show.show(Data_Posix_Signal.showSignal)(buildResult.value0)))(function () {
                                              return Core.exit(1);
                                          });
                                      };
                                      throw new Error("Failed pattern match at Main (line 167, column 3 - line 176, column 13): " + [ buildResult.constructor.name ]);
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  var argParser = (function () {
      var subcommand = function (v) {
          return Options_Applicative_Builder.command(v.cmd)(Options_Applicative_Builder.info(v.opts)(Options_Applicative_Builder.progDesc(v.desc)));
      };
      var nonempty = function (reader) {
          return Control_Bind.bind(Options_Applicative_Types.readMBind)(reader)(function (v) {
              if (v === "") {
                  return Options_Applicative_Types.readerError("cannot be the empty string");
              };
              return Control_Applicative.pure(Options_Applicative_Types.readMApplicative)(v);
          });
      };
      var spagoDhall = Options_Applicative_Builder.option(nonempty(Options_Applicative_Builder.str))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("spago-dhall"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("FILE"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)("spago.dhall"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.showDefault(Data_Show.showString))(Options_Applicative_Builder.help("the path to your spago.dhall"))))));
      var mainOpts = Options_Applicative_Builder.option(nonempty(Options_Applicative_Builder.str))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder["long"](Options_Applicative_Builder_Internal.optionFieldsHasName)("cache-dir"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.optionFieldsHasMetavar)("DIR"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.optionFieldsHasValue)(".spago2nix"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.showDefault(Data_Show.showString))(Options_Applicative_Builder.help("the cache directory spago2nix uses for intermediate outputs"))))));
      var mainParser = function (subparsers) {
          return Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
              return function (v1) {
                  return new Args({
                      command: v,
                      cacheDir: v1
                  });
              };
          })(subparsers))(mainOpts);
      };
      var mainDesc = function (subparsers) {
          return Options_Applicative_Builder.info(Options_Applicative_Internal_Utils.apApplyFlipped(Options_Applicative_Types.parserApply)(mainParser(subparsers))(Options_Applicative_Extra.helper))(Data_Semigroup.append(Options_Applicative_Builder.infoModSemigroup)(Options_Applicative_Builder.fullDesc)(Options_Applicative_Builder.header("spago2nix - generate Nix derivations from packages required in a spago project, and allow for installing them and building them.")));
      };
      var extraArgs = Options_Applicative_Types.many(Options_Applicative_Builder.argument(Options_Applicative_Builder.str)(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.argumentFieldsHasMetavar)("EXTRA_ARGS..."))(Options_Applicative_Builder.help("passthrough args for nix-shell"))));
      return mainDesc(Options_Applicative_Extra.hsubparser(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(subcommand({
          cmd: "generate",
          opts: Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
              return new Generate({
                  maxPackagesFetchedAtOnce: v
              });
          })(Options_Applicative_Builder.argument(Options_Applicative_Builder["int"])(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.metavar(Options_Applicative_Builder_Internal.argumentFieldsHasMetavar)("N"))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.value(Options_Applicative_Builder_Internal.argumentFieldsHasValue)(1))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(Options_Applicative_Builder.showDefault(Data_Show.showInt))(Options_Applicative_Builder.help("Specify the maximum number of packages to fetch simultaneously.")))))),
          desc: "Generate a Nix expression of packages from Spago. If N is given, it will limit the number of packages fetched at once."
      }))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(subcommand({
          cmd: "install",
          opts: Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
              return new Install({
                  extraArgs: v
              });
          })(extraArgs),
          desc: "Install dependencies from spago-packages.nix in Spago style."
      }))(Data_Semigroup.append(Options_Applicative_Builder_Internal.modSemigroup)(subcommand({
          cmd: "build",
          opts: Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
              return function (v1) {
                  return new Build({
                      extraArgs: v,
                      spagoDhall: v1
                  });
              };
          })(extraArgs))(spagoDhall),
          desc: "Build the project Spago style."
      }))(subcommand({
          cmd: "build-nix",
          opts: Control_Apply.apply(Options_Applicative_Types.parserApply)(Data_Functor.map(Options_Applicative_Types.parserFunctor)(function (v) {
              return function (v1) {
                  return new BuildNix({
                      extraArgs: v,
                      spagoDhall: v1
                  });
              };
          })(extraArgs))(spagoDhall),
          desc: "Build the project using dependency sources from Nix store."
      }))))));
  })();
  var main = (function () {
      var prefs$prime = Options_Applicative_Builder.prefs(Options_Applicative_Builder.showHelpOnEmpty);
      return function __do() {
          var v = Options_Applicative_Extra.customExecParser(prefs$prime)(argParser)();
          return Effect_Aff.launchAff_((function () {
              if (v.value0.command instanceof Generate) {
                  return Generate_1.generate(v.value0.cacheDir)(v.value0.command.value0.maxPackagesFetchedAtOnce);
              };
              if (v.value0.command instanceof Install) {
                  return install(v.value0.cacheDir)(v.value0.command.value0.extraArgs);
              };
              if (v.value0.command instanceof Build) {
                  return build(SpagoStyle.value)(v.value0.cacheDir)(v.value0.command.value0);
              };
              if (v.value0.command instanceof BuildNix) {
                  return build(NixStyle.value)(v.value0.cacheDir)(v.value0.command.value0);
              };
              throw new Error("Failed pattern match at Main (line 108, column 89 - line 112, column 50): " + [ v.value0.command.constructor.name ]);
          })())();
      };
  })();
  exports["Generate"] = Generate;
  exports["Install"] = Install;
  exports["Build"] = Build;
  exports["BuildNix"] = BuildNix;
  exports["Args"] = Args;
  exports["argParser"] = argParser;
  exports["main"] = main;
  exports["install"] = install;
  exports["SpagoStyle"] = SpagoStyle;
  exports["NixStyle"] = NixStyle;
  exports["build"] = build;
  exports["argv"] = $foreign.argv;
})(PS);
PS["Main"].main();